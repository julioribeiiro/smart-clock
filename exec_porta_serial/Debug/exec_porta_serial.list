
exec_porta_serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  0800c768  0800c768  0001c768  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cab8  0800cab8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800cab8  0800cab8  0001cab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cac0  0800cac0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cac0  0800cac0  0001cac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cac4  0800cac4  0001cac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800cac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001118  20000074  0800cb3c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000118c  0800cb3c  0002118c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000222c2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000441d  00000000  00000000  00042366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b50  00000000  00000000  00046788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001988  00000000  00000000  000482d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e5c9  00000000  00000000  00049c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bf56  00000000  00000000  00078229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001196f8  00000000  00000000  0009417f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ad877  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d14  00000000  00000000  001ad8cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c74c 	.word	0x0800c74c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800c74c 	.word	0x0800c74c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bc0:	f000 b96e 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	4604      	mov	r4, r0
 8000be4:	468c      	mov	ip, r1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f040 8083 	bne.w	8000cf2 <__udivmoddi4+0x116>
 8000bec:	428a      	cmp	r2, r1
 8000bee:	4617      	mov	r7, r2
 8000bf0:	d947      	bls.n	8000c82 <__udivmoddi4+0xa6>
 8000bf2:	fab2 f282 	clz	r2, r2
 8000bf6:	b142      	cbz	r2, 8000c0a <__udivmoddi4+0x2e>
 8000bf8:	f1c2 0020 	rsb	r0, r2, #32
 8000bfc:	fa24 f000 	lsr.w	r0, r4, r0
 8000c00:	4091      	lsls	r1, r2
 8000c02:	4097      	lsls	r7, r2
 8000c04:	ea40 0c01 	orr.w	ip, r0, r1
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0e:	0c23      	lsrs	r3, r4, #16
 8000c10:	fbbc f6f8 	udiv	r6, ip, r8
 8000c14:	fa1f fe87 	uxth.w	lr, r7
 8000c18:	fb08 c116 	mls	r1, r8, r6, ip
 8000c1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c20:	fb06 f10e 	mul.w	r1, r6, lr
 8000c24:	4299      	cmp	r1, r3
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x60>
 8000c28:	18fb      	adds	r3, r7, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2e:	f080 8119 	bcs.w	8000e64 <__udivmoddi4+0x288>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 8116 	bls.w	8000e64 <__udivmoddi4+0x288>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	443b      	add	r3, r7
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x8c>
 8000c54:	193c      	adds	r4, r7, r4
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 8105 	bcs.w	8000e68 <__udivmoddi4+0x28c>
 8000c5e:	45a6      	cmp	lr, r4
 8000c60:	f240 8102 	bls.w	8000e68 <__udivmoddi4+0x28c>
 8000c64:	3802      	subs	r0, #2
 8000c66:	443c      	add	r4, r7
 8000c68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6c:	eba4 040e 	sub.w	r4, r4, lr
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa0>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	b902      	cbnz	r2, 8000c86 <__udivmoddi4+0xaa>
 8000c84:	deff      	udf	#255	; 0xff
 8000c86:	fab2 f282 	clz	r2, r2
 8000c8a:	2a00      	cmp	r2, #0
 8000c8c:	d150      	bne.n	8000d30 <__udivmoddi4+0x154>
 8000c8e:	1bcb      	subs	r3, r1, r7
 8000c90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c94:	fa1f f887 	uxth.w	r8, r7
 8000c98:	2601      	movs	r6, #1
 8000c9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9e:	0c21      	lsrs	r1, r4, #16
 8000ca0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca8:	fb08 f30c 	mul.w	r3, r8, ip
 8000cac:	428b      	cmp	r3, r1
 8000cae:	d907      	bls.n	8000cc0 <__udivmoddi4+0xe4>
 8000cb0:	1879      	adds	r1, r7, r1
 8000cb2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0xe2>
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	f200 80e9 	bhi.w	8000e90 <__udivmoddi4+0x2b4>
 8000cbe:	4684      	mov	ip, r0
 8000cc0:	1ac9      	subs	r1, r1, r3
 8000cc2:	b2a3      	uxth	r3, r4
 8000cc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ccc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cd0:	fb08 f800 	mul.w	r8, r8, r0
 8000cd4:	45a0      	cmp	r8, r4
 8000cd6:	d907      	bls.n	8000ce8 <__udivmoddi4+0x10c>
 8000cd8:	193c      	adds	r4, r7, r4
 8000cda:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cde:	d202      	bcs.n	8000ce6 <__udivmoddi4+0x10a>
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	f200 80d9 	bhi.w	8000e98 <__udivmoddi4+0x2bc>
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	eba4 0408 	sub.w	r4, r4, r8
 8000cec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cf0:	e7bf      	b.n	8000c72 <__udivmoddi4+0x96>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0x12e>
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	f000 80b1 	beq.w	8000e5e <__udivmoddi4+0x282>
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000d02:	4630      	mov	r0, r6
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	fab3 f683 	clz	r6, r3
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d14a      	bne.n	8000da8 <__udivmoddi4+0x1cc>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0x140>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	f200 80b8 	bhi.w	8000e8c <__udivmoddi4+0x2b0>
 8000d1c:	1a84      	subs	r4, r0, r2
 8000d1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	468c      	mov	ip, r1
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	d0a8      	beq.n	8000c7c <__udivmoddi4+0xa0>
 8000d2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2e:	e7a5      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000d30:	f1c2 0320 	rsb	r3, r2, #32
 8000d34:	fa20 f603 	lsr.w	r6, r0, r3
 8000d38:	4097      	lsls	r7, r2
 8000d3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d42:	40d9      	lsrs	r1, r3
 8000d44:	4330      	orrs	r0, r6
 8000d46:	0c03      	lsrs	r3, r0, #16
 8000d48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d4c:	fa1f f887 	uxth.w	r8, r7
 8000d50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d58:	fb06 f108 	mul.w	r1, r6, r8
 8000d5c:	4299      	cmp	r1, r3
 8000d5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x19c>
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d6a:	f080 808d 	bcs.w	8000e88 <__udivmoddi4+0x2ac>
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	f240 808a 	bls.w	8000e88 <__udivmoddi4+0x2ac>
 8000d74:	3e02      	subs	r6, #2
 8000d76:	443b      	add	r3, r7
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	b281      	uxth	r1, r0
 8000d7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d88:	fb00 f308 	mul.w	r3, r0, r8
 8000d8c:	428b      	cmp	r3, r1
 8000d8e:	d907      	bls.n	8000da0 <__udivmoddi4+0x1c4>
 8000d90:	1879      	adds	r1, r7, r1
 8000d92:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d96:	d273      	bcs.n	8000e80 <__udivmoddi4+0x2a4>
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d971      	bls.n	8000e80 <__udivmoddi4+0x2a4>
 8000d9c:	3802      	subs	r0, #2
 8000d9e:	4439      	add	r1, r7
 8000da0:	1acb      	subs	r3, r1, r3
 8000da2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da6:	e778      	b.n	8000c9a <__udivmoddi4+0xbe>
 8000da8:	f1c6 0c20 	rsb	ip, r6, #32
 8000dac:	fa03 f406 	lsl.w	r4, r3, r6
 8000db0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db4:	431c      	orrs	r4, r3
 8000db6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dba:	fa01 f306 	lsl.w	r3, r1, r6
 8000dbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc6:	431f      	orrs	r7, r3
 8000dc8:	0c3b      	lsrs	r3, r7, #16
 8000dca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dce:	fa1f f884 	uxth.w	r8, r4
 8000dd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dda:	fb09 fa08 	mul.w	sl, r9, r8
 8000dde:	458a      	cmp	sl, r1
 8000de0:	fa02 f206 	lsl.w	r2, r2, r6
 8000de4:	fa00 f306 	lsl.w	r3, r0, r6
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x220>
 8000dea:	1861      	adds	r1, r4, r1
 8000dec:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000df0:	d248      	bcs.n	8000e84 <__udivmoddi4+0x2a8>
 8000df2:	458a      	cmp	sl, r1
 8000df4:	d946      	bls.n	8000e84 <__udivmoddi4+0x2a8>
 8000df6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dfa:	4421      	add	r1, r4
 8000dfc:	eba1 010a 	sub.w	r1, r1, sl
 8000e00:	b2bf      	uxth	r7, r7
 8000e02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0e:	fb00 f808 	mul.w	r8, r0, r8
 8000e12:	45b8      	cmp	r8, r7
 8000e14:	d907      	bls.n	8000e26 <__udivmoddi4+0x24a>
 8000e16:	19e7      	adds	r7, r4, r7
 8000e18:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e1c:	d22e      	bcs.n	8000e7c <__udivmoddi4+0x2a0>
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d92c      	bls.n	8000e7c <__udivmoddi4+0x2a0>
 8000e22:	3802      	subs	r0, #2
 8000e24:	4427      	add	r7, r4
 8000e26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e2a:	eba7 0708 	sub.w	r7, r7, r8
 8000e2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e32:	454f      	cmp	r7, r9
 8000e34:	46c6      	mov	lr, r8
 8000e36:	4649      	mov	r1, r9
 8000e38:	d31a      	bcc.n	8000e70 <__udivmoddi4+0x294>
 8000e3a:	d017      	beq.n	8000e6c <__udivmoddi4+0x290>
 8000e3c:	b15d      	cbz	r5, 8000e56 <__udivmoddi4+0x27a>
 8000e3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e42:	eb67 0701 	sbc.w	r7, r7, r1
 8000e46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e4a:	40f2      	lsrs	r2, r6
 8000e4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e50:	40f7      	lsrs	r7, r6
 8000e52:	e9c5 2700 	strd	r2, r7, [r5]
 8000e56:	2600      	movs	r6, #0
 8000e58:	4631      	mov	r1, r6
 8000e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5e:	462e      	mov	r6, r5
 8000e60:	4628      	mov	r0, r5
 8000e62:	e70b      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000e64:	4606      	mov	r6, r0
 8000e66:	e6e9      	b.n	8000c3c <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fd      	b.n	8000c68 <__udivmoddi4+0x8c>
 8000e6c:	4543      	cmp	r3, r8
 8000e6e:	d2e5      	bcs.n	8000e3c <__udivmoddi4+0x260>
 8000e70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e74:	eb69 0104 	sbc.w	r1, r9, r4
 8000e78:	3801      	subs	r0, #1
 8000e7a:	e7df      	b.n	8000e3c <__udivmoddi4+0x260>
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	e7d2      	b.n	8000e26 <__udivmoddi4+0x24a>
 8000e80:	4660      	mov	r0, ip
 8000e82:	e78d      	b.n	8000da0 <__udivmoddi4+0x1c4>
 8000e84:	4681      	mov	r9, r0
 8000e86:	e7b9      	b.n	8000dfc <__udivmoddi4+0x220>
 8000e88:	4666      	mov	r6, ip
 8000e8a:	e775      	b.n	8000d78 <__udivmoddi4+0x19c>
 8000e8c:	4630      	mov	r0, r6
 8000e8e:	e74a      	b.n	8000d26 <__udivmoddi4+0x14a>
 8000e90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e94:	4439      	add	r1, r7
 8000e96:	e713      	b.n	8000cc0 <__udivmoddi4+0xe4>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	443c      	add	r4, r7
 8000e9c:	e724      	b.n	8000ce8 <__udivmoddi4+0x10c>
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4a07      	ldr	r2, [pc, #28]	; (8000ed0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000eb4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	4a06      	ldr	r2, [pc, #24]	; (8000ed4 <vApplicationGetIdleTaskMemory+0x30>)
 8000eba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2280      	movs	r2, #128	; 0x80
 8000ec0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ec2:	bf00      	nop
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000090 	.word	0x20000090
 8000ed4:	20000144 	.word	0x20000144

08000ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	0a1b      	lsrs	r3, r3, #8
 8000ee2:	f003 0307 	and.w	r3, r3, #7
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	db0b      	blt.n	8000f1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	f003 021f 	and.w	r2, r3, #31
 8000f0c:	4907      	ldr	r1, [pc, #28]	; (8000f2c <__NVIC_EnableIRQ+0x38>)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	095b      	lsrs	r3, r3, #5
 8000f14:	2001      	movs	r0, #1
 8000f16:	fa00 f202 	lsl.w	r2, r0, r2
 8000f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000e100 	.word	0xe000e100

08000f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	6039      	str	r1, [r7, #0]
 8000f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	db0a      	blt.n	8000f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	490c      	ldr	r1, [pc, #48]	; (8000f7c <__NVIC_SetPriority+0x4c>)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	0112      	lsls	r2, r2, #4
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	440b      	add	r3, r1
 8000f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f58:	e00a      	b.n	8000f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4908      	ldr	r1, [pc, #32]	; (8000f80 <__NVIC_SetPriority+0x50>)
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	f003 030f 	and.w	r3, r3, #15
 8000f66:	3b04      	subs	r3, #4
 8000f68:	0112      	lsls	r2, r2, #4
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	761a      	strb	r2, [r3, #24]
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000e100 	.word	0xe000e100
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b089      	sub	sp, #36	; 0x24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f1c3 0307 	rsb	r3, r3, #7
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	bf28      	it	cs
 8000fa2:	2304      	movcs	r3, #4
 8000fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	2b06      	cmp	r3, #6
 8000fac:	d902      	bls.n	8000fb4 <NVIC_EncodePriority+0x30>
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3b03      	subs	r3, #3
 8000fb2:	e000      	b.n	8000fb6 <NVIC_EncodePriority+0x32>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43da      	mvns	r2, r3
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fcc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd6:	43d9      	mvns	r1, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	4313      	orrs	r3, r2
         );
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3724      	adds	r7, #36	; 0x24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f043 0201 	orr.w	r2, r3, #1
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	601a      	str	r2, [r3, #0]
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	609a      	str	r2, [r3, #8]
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8001036:	b480      	push	{r7}
 8001038:	b083      	sub	sp, #12
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	f003 0320 	and.w	r3, r3, #32
 8001046:	2b20      	cmp	r3, #32
 8001048:	d101      	bne.n	800104e <LL_USART_IsActiveFlag_RXNE+0x18>
 800104a:	2301      	movs	r3, #1
 800104c:	e000      	b.n	8001050 <LL_USART_IsActiveFlag_RXNE+0x1a>
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	69db      	ldr	r3, [r3, #28]
 8001068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800106c:	2b80      	cmp	r3, #128	; 0x80
 800106e:	d101      	bne.n	8001074 <LL_USART_IsActiveFlag_TXE+0x18>
 8001070:	2301      	movs	r3, #1
 8001072:	e000      	b.n	8001076 <LL_USART_IsActiveFlag_TXE+0x1a>
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f043 0220 	orr.w	r2, r3, #32
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	601a      	str	r2, [r3, #0]
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	601a      	str	r2, [r3, #0]
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	601a      	str	r2, [r3, #0]
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	b2db      	uxtb	r3, r3
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
 8001106:	460b      	mov	r3, r1
 8001108:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 800110a:	78fb      	ldrb	r3, [r7, #3]
 800110c:	b29a      	uxth	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
	...

08001120 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800112a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800112c:	4907      	ldr	r1, [pc, #28]	; (800114c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4313      	orrs	r3, r2
 8001132:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001136:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4013      	ands	r3, r2
 800113c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800113e:	68fb      	ldr	r3, [r7, #12]
}
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	40021000 	.word	0x40021000

08001150 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <LL_APB1_GRP1_EnableClock+0x2c>)
 800115a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800115c:	4907      	ldr	r1, [pc, #28]	; (800117c <LL_APB1_GRP1_EnableClock+0x2c>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4313      	orrs	r3, r2
 8001162:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001166:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4013      	ands	r3, r2
 800116c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800116e:	68fb      	ldr	r3, [r7, #12]
}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	40021000 	.word	0x40021000

08001180 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <LL_APB2_GRP1_EnableClock+0x2c>)
 800118a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800118c:	4907      	ldr	r1, [pc, #28]	; (80011ac <LL_APB2_GRP1_EnableClock+0x2c>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4313      	orrs	r3, r2
 8001192:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <LL_APB2_GRP1_EnableClock+0x2c>)
 8001196:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4013      	ands	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800119e:	68fb      	ldr	r3, [r7, #12]
}
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	40021000 	.word	0x40021000

080011b0 <sendchar>:
QueueHandle_t tx_queue_2;
QueueHandle_t rx_queue_2;
SemaphoreHandle_t uart_1_mutex = NULL;
SemaphoreHandle_t uart_2_mutex = NULL;

void sendchar(char c, char usart){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	460a      	mov	r2, r1
 80011ba:	71fb      	strb	r3, [r7, #7]
 80011bc:	4613      	mov	r3, r2
 80011be:	71bb      	strb	r3, [r7, #6]
	if(usart == USART_1){
 80011c0:	79bb      	ldrb	r3, [r7, #6]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d10b      	bne.n	80011de <sendchar+0x2e>
		xQueueSend(tx_queue_1, &c, HAL_MAX_DELAY);
 80011c6:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <sendchar+0x54>)
 80011c8:	6818      	ldr	r0, [r3, #0]
 80011ca:	1df9      	adds	r1, r7, #7
 80011cc:	2300      	movs	r3, #0
 80011ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011d2:	f007 ff81 	bl	80090d8 <xQueueGenericSend>
		LL_USART_EnableIT_TXE(USART1);
 80011d6:	480c      	ldr	r0, [pc, #48]	; (8001208 <sendchar+0x58>)
 80011d8:	f7ff ff63 	bl	80010a2 <LL_USART_EnableIT_TXE>
	}
	else if( usart == USART_2){
		xQueueSend(tx_queue_2, &c, HAL_MAX_DELAY);
		LL_USART_EnableIT_TXE(USART2);
	}
}
 80011dc:	e00d      	b.n	80011fa <sendchar+0x4a>
	else if( usart == USART_2){
 80011de:	79bb      	ldrb	r3, [r7, #6]
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d10a      	bne.n	80011fa <sendchar+0x4a>
		xQueueSend(tx_queue_2, &c, HAL_MAX_DELAY);
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <sendchar+0x5c>)
 80011e6:	6818      	ldr	r0, [r3, #0]
 80011e8:	1df9      	adds	r1, r7, #7
 80011ea:	2300      	movs	r3, #0
 80011ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011f0:	f007 ff72 	bl	80090d8 <xQueueGenericSend>
		LL_USART_EnableIT_TXE(USART2);
 80011f4:	4806      	ldr	r0, [pc, #24]	; (8001210 <sendchar+0x60>)
 80011f6:	f7ff ff54 	bl	80010a2 <LL_USART_EnableIT_TXE>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20001128 	.word	0x20001128
 8001208:	40013800 	.word	0x40013800
 800120c:	200010d4 	.word	0x200010d4
 8001210:	40004400 	.word	0x40004400

08001214 <sendString>:

void sendString(char * str, char usart){
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	460b      	mov	r3, r1
 800121e:	70fb      	strb	r3, [r7, #3]
	while(*str != 0){
 8001220:	e009      	b.n	8001236 <sendString+0x22>
		sendchar(*str, usart);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	78fa      	ldrb	r2, [r7, #3]
 8001228:	4611      	mov	r1, r2
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff ffc0 	bl	80011b0 <sendchar>
		str++;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3301      	adds	r3, #1
 8001234:	607b      	str	r3, [r7, #4]
	while(*str != 0){
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1f1      	bne.n	8001222 <sendString+0xe>
	}
}
 800123e:	bf00      	nop
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <readchar>:

char readchar(char usart){
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
	uint8_t caracter=0;
 8001252:	2300      	movs	r3, #0
 8001254:	73fb      	strb	r3, [r7, #15]
	if(usart == USART_1)
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d109      	bne.n	8001270 <readchar+0x28>
		xQueueReceive(rx_queue_1, &caracter, HAL_MAX_DELAY);
 800125c:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <readchar+0x4c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f107 010f 	add.w	r1, r7, #15
 8001264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001268:	4618      	mov	r0, r3
 800126a:	f008 f8cf 	bl	800940c <xQueueReceive>
 800126e:	e00b      	b.n	8001288 <readchar+0x40>
	else if(usart == USART_2)
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d108      	bne.n	8001288 <readchar+0x40>
		xQueueReceive(rx_queue_2, &caracter, HAL_MAX_DELAY);
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <readchar+0x50>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f107 010f 	add.w	r1, r7, #15
 800127e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001282:	4618      	mov	r0, r3
 8001284:	f008 f8c2 	bl	800940c <xQueueReceive>
	return caracter;
 8001288:	7bfb      	ldrb	r3, [r7, #15]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	2000106c 	.word	0x2000106c
 8001298:	200010d8 	.word	0x200010d8

0800129c <readVoltage>:

uint16_t readVoltage(void){
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 80012a0:	4807      	ldr	r0, [pc, #28]	; (80012c0 <readVoltage+0x24>)
 80012a2:	f002 ff39 	bl	8004118 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80012a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012aa:	4805      	ldr	r0, [pc, #20]	; (80012c0 <readVoltage+0x24>)
 80012ac:	f002 ffee 	bl	800428c <HAL_ADC_PollForConversion>

	return HAL_ADC_GetValue(&hadc1);
 80012b0:	4803      	ldr	r0, [pc, #12]	; (80012c0 <readVoltage+0x24>)
 80012b2:	f003 f8c3 	bl	800443c <HAL_ADC_GetValue>
 80012b6:	4603      	mov	r3, r0
 80012b8:	b29b      	uxth	r3, r3
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20001070 	.word	0x20001070
 80012c4:	00000000 	.word	0x00000000

080012c8 <cli>:

void cli(void * vParam)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	uint8_t caracter;
	while(1)
	{
		xQueueReceive(rx_queue_1, &caracter, HAL_MAX_DELAY);
 80012d0:	4b37      	ldr	r3, [pc, #220]	; (80013b0 <cli+0xe8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f107 010b 	add.w	r1, r7, #11
 80012d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012dc:	4618      	mov	r0, r3
 80012de:	f008 f895 	bl	800940c <xQueueReceive>
		if(caracter == 'l'){
 80012e2:	7afb      	ldrb	r3, [r7, #11]
 80012e4:	2b6c      	cmp	r3, #108	; 0x6c
 80012e6:	d1f3      	bne.n	80012d0 <cli+0x8>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80012e8:	2108      	movs	r1, #8
 80012ea:	4832      	ldr	r0, [pc, #200]	; (80013b4 <cli+0xec>)
 80012ec:	f005 fcd2 	bl	8006c94 <HAL_TIM_PWM_Start>

			for(float i = 0.000; i<= 1080; i += 0.03){
 80012f0:	f04f 0300 	mov.w	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	e03f      	b.n	8001378 <cli+0xb0>
				toneVal = (uint32_t) (90 + (60 * sin (0.3 * i)));
 80012f8:	68f8      	ldr	r0, [r7, #12]
 80012fa:	f7ff f8cd 	bl	8000498 <__aeabi_f2d>
 80012fe:	a328      	add	r3, pc, #160	; (adr r3, 80013a0 <cli+0xd8>)
 8001300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001304:	f7ff f920 	bl	8000548 <__aeabi_dmul>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	ec43 2b17 	vmov	d7, r2, r3
 8001310:	eeb0 0a47 	vmov.f32	s0, s14
 8001314:	eef0 0a67 	vmov.f32	s1, s15
 8001318:	f00a f9e2 	bl	800b6e0 <sin>
 800131c:	ec51 0b10 	vmov	r0, r1, d0
 8001320:	f04f 0200 	mov.w	r2, #0
 8001324:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <cli+0xf0>)
 8001326:	f7ff f90f 	bl	8000548 <__aeabi_dmul>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	4b21      	ldr	r3, [pc, #132]	; (80013bc <cli+0xf4>)
 8001338:	f7fe ff50 	bl	80001dc <__adddf3>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4610      	mov	r0, r2
 8001342:	4619      	mov	r1, r3
 8001344:	f7ff fbc2 	bl	8000acc <__aeabi_d2uiz>
 8001348:	4603      	mov	r3, r0
 800134a:	4a1d      	ldr	r2, [pc, #116]	; (80013c0 <cli+0xf8>)
 800134c:	6013      	str	r3, [r2, #0]

				htim2.Instance->PSC = toneVal;
 800134e:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <cli+0xec>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a1b      	ldr	r2, [pc, #108]	; (80013c0 <cli+0xf8>)
 8001354:	6812      	ldr	r2, [r2, #0]
 8001356:	629a      	str	r2, [r3, #40]	; 0x28
			for(float i = 0.000; i<= 1080; i += 0.03){
 8001358:	68f8      	ldr	r0, [r7, #12]
 800135a:	f7ff f89d 	bl	8000498 <__aeabi_f2d>
 800135e:	a312      	add	r3, pc, #72	; (adr r3, 80013a8 <cli+0xe0>)
 8001360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001364:	f7fe ff3a 	bl	80001dc <__adddf3>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	f7ff fbcc 	bl	8000b0c <__aeabi_d2f>
 8001374:	4603      	mov	r3, r0
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	edd7 7a03 	vldr	s15, [r7, #12]
 800137c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80013c4 <cli+0xfc>
 8001380:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001388:	d9b6      	bls.n	80012f8 <cli+0x30>

			}

			htim2.Instance->PSC = toneVal;
 800138a:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <cli+0xec>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a0c      	ldr	r2, [pc, #48]	; (80013c0 <cli+0xf8>)
 8001390:	6812      	ldr	r2, [r2, #0]
 8001392:	629a      	str	r2, [r3, #40]	; 0x28

			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8001394:	2108      	movs	r1, #8
 8001396:	4807      	ldr	r0, [pc, #28]	; (80013b4 <cli+0xec>)
 8001398:	f005 fd82 	bl	8006ea0 <HAL_TIM_PWM_Stop>
		xQueueReceive(rx_queue_1, &caracter, HAL_MAX_DELAY);
 800139c:	e798      	b.n	80012d0 <cli+0x8>
 800139e:	bf00      	nop
 80013a0:	33333333 	.word	0x33333333
 80013a4:	3fd33333 	.word	0x3fd33333
 80013a8:	eb851eb8 	.word	0xeb851eb8
 80013ac:	3f9eb851 	.word	0x3f9eb851
 80013b0:	2000106c 	.word	0x2000106c
 80013b4:	200010dc 	.word	0x200010dc
 80013b8:	404e0000 	.word	0x404e0000
 80013bc:	40568000 	.word	0x40568000
 80013c0:	20000344 	.word	0x20000344
 80013c4:	44870000 	.word	0x44870000

080013c8 <cli2>:
		}
	}
}

void cli2(void * vParam)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	uint8_t caracter;
	uint16_t temperatura_amb;
	char buff[8];
	while(1)
	{
		xQueueReceive(rx_queue_2, &caracter, HAL_MAX_DELAY);
 80013d0:	4b31      	ldr	r3, [pc, #196]	; (8001498 <cli2+0xd0>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f107 0115 	add.w	r1, r7, #21
 80013d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013dc:	4618      	mov	r0, r3
 80013de:	f008 f815 	bl	800940c <xQueueReceive>
		if(caracter == 'd'){
 80013e2:	7d7b      	ldrb	r3, [r7, #21]
 80013e4:	2b64      	cmp	r3, #100	; 0x64
 80013e6:	d10b      	bne.n	8001400 <cli2+0x38>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80013e8:	2108      	movs	r1, #8
 80013ea:	482c      	ldr	r0, [pc, #176]	; (800149c <cli2+0xd4>)
 80013ec:	f005 fc52 	bl	8006c94 <HAL_TIM_PWM_Start>

			htim2.Instance->PSC = 0;
 80013f0:	4b2a      	ldr	r3, [pc, #168]	; (800149c <cli2+0xd4>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2200      	movs	r2, #0
 80013f6:	629a      	str	r2, [r3, #40]	; 0x28

			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80013f8:	2108      	movs	r1, #8
 80013fa:	4828      	ldr	r0, [pc, #160]	; (800149c <cli2+0xd4>)
 80013fc:	f005 fd50 	bl	8006ea0 <HAL_TIM_PWM_Stop>
		}
		if(caracter == 'b' || caracter == 'B'){
 8001400:	7d7b      	ldrb	r3, [r7, #21]
 8001402:	2b62      	cmp	r3, #98	; 0x62
 8001404:	d002      	beq.n	800140c <cli2+0x44>
 8001406:	7d7b      	ldrb	r3, [r7, #21]
 8001408:	2b42      	cmp	r3, #66	; 0x42
 800140a:	d112      	bne.n	8001432 <cli2+0x6a>
			fflush(stdin);
 800140c:	4b24      	ldr	r3, [pc, #144]	; (80014a0 <cli2+0xd8>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	4618      	mov	r0, r3
 8001414:	f009 fe62 	bl	800b0dc <fflush>
			sprintf(buff, "%d\r\n", 1);
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	2201      	movs	r2, #1
 800141e:	4921      	ldr	r1, [pc, #132]	; (80014a4 <cli2+0xdc>)
 8001420:	4618      	mov	r0, r3
 8001422:	f002 f899 	bl	8003558 <sprintf_>
			sendString(buff, USART_1);
 8001426:	f107 030c 	add.w	r3, r7, #12
 800142a:	2101      	movs	r1, #1
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fef1 	bl	8001214 <sendString>
		}
		if(caracter == 't' || caracter == 'T'){
 8001432:	7d7b      	ldrb	r3, [r7, #21]
 8001434:	2b74      	cmp	r3, #116	; 0x74
 8001436:	d002      	beq.n	800143e <cli2+0x76>
 8001438:	7d7b      	ldrb	r3, [r7, #21]
 800143a:	2b54      	cmp	r3, #84	; 0x54
 800143c:	d1c8      	bne.n	80013d0 <cli2+0x8>
			temperatura_amb = readVoltage();
 800143e:	f7ff ff2d 	bl	800129c <readVoltage>
 8001442:	4603      	mov	r3, r0
 8001444:	82fb      	strh	r3, [r7, #22]
			temperatura_amb = temperatura_amb / 27.47;
 8001446:	8afb      	ldrh	r3, [r7, #22]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f813 	bl	8000474 <__aeabi_i2d>
 800144e:	a310      	add	r3, pc, #64	; (adr r3, 8001490 <cli2+0xc8>)
 8001450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001454:	f7ff f9a2 	bl	800079c <__aeabi_ddiv>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4610      	mov	r0, r2
 800145e:	4619      	mov	r1, r3
 8001460:	f7ff fb34 	bl	8000acc <__aeabi_d2uiz>
 8001464:	4603      	mov	r3, r0
 8001466:	82fb      	strh	r3, [r7, #22]
			fflush(stdin);
 8001468:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <cli2+0xd8>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	4618      	mov	r0, r3
 8001470:	f009 fe34 	bl	800b0dc <fflush>
			sprintf(buff, "temp_amb: %d\r\n", temperatura_amb);
 8001474:	8afa      	ldrh	r2, [r7, #22]
 8001476:	f107 030c 	add.w	r3, r7, #12
 800147a:	490b      	ldr	r1, [pc, #44]	; (80014a8 <cli2+0xe0>)
 800147c:	4618      	mov	r0, r3
 800147e:	f002 f86b 	bl	8003558 <sprintf_>
			sendString(buff, USART_2);
 8001482:	f107 030c 	add.w	r3, r7, #12
 8001486:	2102      	movs	r1, #2
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff fec3 	bl	8001214 <sendString>
		xQueueReceive(rx_queue_2, &caracter, HAL_MAX_DELAY);
 800148e:	e79f      	b.n	80013d0 <cli2+0x8>
 8001490:	eb851eb8 	.word	0xeb851eb8
 8001494:	403b7851 	.word	0x403b7851
 8001498:	200010d8 	.word	0x200010d8
 800149c:	200010dc 	.word	0x200010dc
 80014a0:	20000010 	.word	0x20000010
 80014a4:	0800c774 	.word	0x0800c774
 80014a8:	0800c77c 	.word	0x0800c77c

080014ac <usart_1_fcn>:
//	}
//}


//IMPORTANTE: Esta taska deve ser removida no projeto final
void usart_1_fcn(void * vParam){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	char c;
	while(1){
		c = readchar(USART_1);
 80014b4:	2001      	movs	r0, #1
 80014b6:	f7ff fec7 	bl	8001248 <readchar>
 80014ba:	4603      	mov	r3, r0
 80014bc:	73fb      	strb	r3, [r7, #15]
		if( c != 0){
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0f7      	beq.n	80014b4 <usart_1_fcn+0x8>
			sendchar(c, USART_2);
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	2102      	movs	r1, #2
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fe71 	bl	80011b0 <sendchar>
		c = readchar(USART_1);
 80014ce:	e7f1      	b.n	80014b4 <usart_1_fcn+0x8>

080014d0 <USART_2_IRQHandler>:
		}
	}
}
//Rotina de tratamento de interrupcao da USART2
void USART_2_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
	//Se for interrupcao de transmissao
    if (LL_USART_IsActiveFlag_TXE(USART2)) {
 80014d6:	482a      	ldr	r0, [pc, #168]	; (8001580 <USART_2_IRQHandler+0xb0>)
 80014d8:	f7ff fdc0 	bl	800105c <LL_USART_IsActiveFlag_TXE>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d026      	beq.n	8001530 <USART_2_IRQHandler+0x60>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_TXE(USART2)) {
 80014e2:	e014      	b.n	800150e <USART_2_IRQHandler+0x3e>
            uint8_t byte;
            //Desinfileira um byte para tranmistir
            if (xQueueReceiveFromISR(tx_queue_2, &byte, &contextSwitch) == pdFAIL) {
 80014e4:	4b27      	ldr	r3, [pc, #156]	; (8001584 <USART_2_IRQHandler+0xb4>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f107 020c 	add.w	r2, r7, #12
 80014ec:	f107 010b 	add.w	r1, r7, #11
 80014f0:	4618      	mov	r0, r3
 80014f2:	f008 f86b 	bl	80095cc <xQueueReceiveFromISR>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d103      	bne.n	8001504 <USART_2_IRQHandler+0x34>
            	//Se a fila de transmissao esta vazia, encerra a transmissao
                LL_USART_DisableIT_TXE(USART2);
 80014fc:	4820      	ldr	r0, [pc, #128]	; (8001580 <USART_2_IRQHandler+0xb0>)
 80014fe:	f7ff fde0 	bl	80010c2 <LL_USART_DisableIT_TXE>
 8001502:	e00a      	b.n	800151a <USART_2_IRQHandler+0x4a>
                break;
            }
            //Envia o byte retirado da fila de transmisao
            LL_USART_TransmitData8(USART2, byte);
 8001504:	7afb      	ldrb	r3, [r7, #11]
 8001506:	4619      	mov	r1, r3
 8001508:	481d      	ldr	r0, [pc, #116]	; (8001580 <USART_2_IRQHandler+0xb0>)
 800150a:	f7ff fdf8 	bl	80010fe <LL_USART_TransmitData8>
        while (LL_USART_IsActiveFlag_TXE(USART2)) {
 800150e:	481c      	ldr	r0, [pc, #112]	; (8001580 <USART_2_IRQHandler+0xb0>)
 8001510:	f7ff fda4 	bl	800105c <LL_USART_IsActiveFlag_TXE>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1e4      	bne.n	80014e4 <USART_2_IRQHandler+0x14>
        }
        portYIELD_FROM_ISR(contextSwitch);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d007      	beq.n	8001530 <USART_2_IRQHandler+0x60>
 8001520:	4b19      	ldr	r3, [pc, #100]	; (8001588 <USART_2_IRQHandler+0xb8>)
 8001522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	f3bf 8f4f 	dsb	sy
 800152c:	f3bf 8f6f 	isb	sy
    }

    //Se for interrupcao de recepcao
    if (LL_USART_IsActiveFlag_RXNE(USART2)) {
 8001530:	4813      	ldr	r0, [pc, #76]	; (8001580 <USART_2_IRQHandler+0xb0>)
 8001532:	f7ff fd80 	bl	8001036 <LL_USART_IsActiveFlag_RXNE>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d01d      	beq.n	8001578 <USART_2_IRQHandler+0xa8>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_RXNE(USART2)) {
 800153c:	e00b      	b.n	8001556 <USART_2_IRQHandler+0x86>
        	//Copia o byte do regstrador de recepcao
        	uint8_t byte =
                LL_USART_ReceiveData8(USART2);
 800153e:	4810      	ldr	r0, [pc, #64]	; (8001580 <USART_2_IRQHandler+0xb0>)
 8001540:	f7ff fdcf 	bl	80010e2 <LL_USART_ReceiveData8>
 8001544:	4603      	mov	r3, r0
        	uint8_t byte =
 8001546:	70fb      	strb	r3, [r7, #3]
        	//Enfileira o byte recebido na fila de recepcao
            xQueueSendFromISR(rx_queue_2, &byte, &contextSwitch);
 8001548:	4b10      	ldr	r3, [pc, #64]	; (800158c <USART_2_IRQHandler+0xbc>)
 800154a:	6818      	ldr	r0, [r3, #0]
 800154c:	1d3a      	adds	r2, r7, #4
 800154e:	1cf9      	adds	r1, r7, #3
 8001550:	2300      	movs	r3, #0
 8001552:	f007 febf 	bl	80092d4 <xQueueGenericSendFromISR>
        while (LL_USART_IsActiveFlag_RXNE(USART2)) {
 8001556:	480a      	ldr	r0, [pc, #40]	; (8001580 <USART_2_IRQHandler+0xb0>)
 8001558:	f7ff fd6d 	bl	8001036 <LL_USART_IsActiveFlag_RXNE>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1ed      	bne.n	800153e <USART_2_IRQHandler+0x6e>
            // xQueueSendFromISR can return errQUEUE_FULL
        }
        portYIELD_FROM_ISR(contextSwitch);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d007      	beq.n	8001578 <USART_2_IRQHandler+0xa8>
 8001568:	4b07      	ldr	r3, [pc, #28]	; (8001588 <USART_2_IRQHandler+0xb8>)
 800156a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	f3bf 8f4f 	dsb	sy
 8001574:	f3bf 8f6f 	isb	sy
    }
}
 8001578:	bf00      	nop
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40004400 	.word	0x40004400
 8001584:	200010d4 	.word	0x200010d4
 8001588:	e000ed04 	.word	0xe000ed04
 800158c:	200010d8 	.word	0x200010d8

08001590 <USART_1_IRQHandler>:

void USART_1_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
	//Se for interrupcao de transmissao
    if (LL_USART_IsActiveFlag_TXE(USART1)) {
 8001596:	482a      	ldr	r0, [pc, #168]	; (8001640 <USART_1_IRQHandler+0xb0>)
 8001598:	f7ff fd60 	bl	800105c <LL_USART_IsActiveFlag_TXE>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d026      	beq.n	80015f0 <USART_1_IRQHandler+0x60>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_TXE(USART1)) {
 80015a2:	e014      	b.n	80015ce <USART_1_IRQHandler+0x3e>
            uint8_t byte;
            //Desinfileira um byte para tranmistir
            if (xQueueReceiveFromISR(tx_queue_1, &byte, &contextSwitch) == pdFAIL) {
 80015a4:	4b27      	ldr	r3, [pc, #156]	; (8001644 <USART_1_IRQHandler+0xb4>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f107 020c 	add.w	r2, r7, #12
 80015ac:	f107 010b 	add.w	r1, r7, #11
 80015b0:	4618      	mov	r0, r3
 80015b2:	f008 f80b 	bl	80095cc <xQueueReceiveFromISR>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d103      	bne.n	80015c4 <USART_1_IRQHandler+0x34>
            	//Se a fila de transmissao esta vazia, encerra a transmissao
                LL_USART_DisableIT_TXE(USART1);
 80015bc:	4820      	ldr	r0, [pc, #128]	; (8001640 <USART_1_IRQHandler+0xb0>)
 80015be:	f7ff fd80 	bl	80010c2 <LL_USART_DisableIT_TXE>
 80015c2:	e00a      	b.n	80015da <USART_1_IRQHandler+0x4a>
                break;
            }
            //Envia o byte retirado da fila de transmisao
            LL_USART_TransmitData8(USART1, byte);
 80015c4:	7afb      	ldrb	r3, [r7, #11]
 80015c6:	4619      	mov	r1, r3
 80015c8:	481d      	ldr	r0, [pc, #116]	; (8001640 <USART_1_IRQHandler+0xb0>)
 80015ca:	f7ff fd98 	bl	80010fe <LL_USART_TransmitData8>
        while (LL_USART_IsActiveFlag_TXE(USART1)) {
 80015ce:	481c      	ldr	r0, [pc, #112]	; (8001640 <USART_1_IRQHandler+0xb0>)
 80015d0:	f7ff fd44 	bl	800105c <LL_USART_IsActiveFlag_TXE>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1e4      	bne.n	80015a4 <USART_1_IRQHandler+0x14>
        }
        portYIELD_FROM_ISR(contextSwitch);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d007      	beq.n	80015f0 <USART_1_IRQHandler+0x60>
 80015e0:	4b19      	ldr	r3, [pc, #100]	; (8001648 <USART_1_IRQHandler+0xb8>)
 80015e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	f3bf 8f4f 	dsb	sy
 80015ec:	f3bf 8f6f 	isb	sy
    }

    //Se for interrupcao de recepcao
    if (LL_USART_IsActiveFlag_RXNE(USART1)) {
 80015f0:	4813      	ldr	r0, [pc, #76]	; (8001640 <USART_1_IRQHandler+0xb0>)
 80015f2:	f7ff fd20 	bl	8001036 <LL_USART_IsActiveFlag_RXNE>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d01d      	beq.n	8001638 <USART_1_IRQHandler+0xa8>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_RXNE(USART1)) {
 80015fc:	e00b      	b.n	8001616 <USART_1_IRQHandler+0x86>
        	//Copia o byte do regstrador de recepcao
        	uint8_t byte =
                LL_USART_ReceiveData8(USART1);
 80015fe:	4810      	ldr	r0, [pc, #64]	; (8001640 <USART_1_IRQHandler+0xb0>)
 8001600:	f7ff fd6f 	bl	80010e2 <LL_USART_ReceiveData8>
 8001604:	4603      	mov	r3, r0
        	uint8_t byte =
 8001606:	70fb      	strb	r3, [r7, #3]
        	//Enfileira o byte recebido na fila de recepcao
            xQueueSendFromISR(rx_queue_1, &byte, &contextSwitch);
 8001608:	4b10      	ldr	r3, [pc, #64]	; (800164c <USART_1_IRQHandler+0xbc>)
 800160a:	6818      	ldr	r0, [r3, #0]
 800160c:	1d3a      	adds	r2, r7, #4
 800160e:	1cf9      	adds	r1, r7, #3
 8001610:	2300      	movs	r3, #0
 8001612:	f007 fe5f 	bl	80092d4 <xQueueGenericSendFromISR>
        while (LL_USART_IsActiveFlag_RXNE(USART1)) {
 8001616:	480a      	ldr	r0, [pc, #40]	; (8001640 <USART_1_IRQHandler+0xb0>)
 8001618:	f7ff fd0d 	bl	8001036 <LL_USART_IsActiveFlag_RXNE>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1ed      	bne.n	80015fe <USART_1_IRQHandler+0x6e>
            // xQueueSendFromISR can return errQUEUE_FULL
        }
        portYIELD_FROM_ISR(contextSwitch);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d007      	beq.n	8001638 <USART_1_IRQHandler+0xa8>
 8001628:	4b07      	ldr	r3, [pc, #28]	; (8001648 <USART_1_IRQHandler+0xb8>)
 800162a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	f3bf 8f4f 	dsb	sy
 8001634:	f3bf 8f6f 	isb	sy
    }
}
 8001638:	bf00      	nop
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40013800 	.word	0x40013800
 8001644:	20001128 	.word	0x20001128
 8001648:	e000ed04 	.word	0xe000ed04
 800164c:	2000106c 	.word	0x2000106c

08001650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001650:	b5b0      	push	{r4, r5, r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001656:	f002 f9e5 	bl	8003a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800165a:	f000 f85d 	bl	8001718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800165e:	f000 facb 	bl	8001bf8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001662:	f000 fa31 	bl	8001ac8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001666:	f000 f995 	bl	8001994 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800166a:	f000 f91d 	bl	80018a8 <MX_TIM2_Init>
  MX_ADC1_Init();
 800166e:	f000 f8a5 	bl	80017bc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  uart_1_mutex = xSemaphoreCreateMutex();
 8001672:	2001      	movs	r0, #1
 8001674:	f007 fd17 	bl	80090a6 <xQueueCreateMutex>
 8001678:	4603      	mov	r3, r0
 800167a:	4a1d      	ldr	r2, [pc, #116]	; (80016f0 <main+0xa0>)
 800167c:	6013      	str	r3, [r2, #0]
  uart_2_mutex = xSemaphoreCreateMutex();
 800167e:	2001      	movs	r0, #1
 8001680:	f007 fd11 	bl	80090a6 <xQueueCreateMutex>
 8001684:	4603      	mov	r3, r0
 8001686:	4a1b      	ldr	r2, [pc, #108]	; (80016f4 <main+0xa4>)
 8001688:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800168a:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <main+0xa8>)
 800168c:	1d3c      	adds	r4, r7, #4
 800168e:	461d      	mov	r5, r3
 8001690:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001692:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001694:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001698:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	2100      	movs	r1, #0
 80016a0:	4618      	mov	r0, r3
 80016a2:	f007 fb10 	bl	8008cc6 <osThreadCreate>
 80016a6:	4603      	mov	r3, r0
 80016a8:	4a14      	ldr	r2, [pc, #80]	; (80016fc <main+0xac>)
 80016aa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(cli,    /* Nome da funcao que contem a task */
 80016ac:	2300      	movs	r3, #0
 80016ae:	9301      	str	r3, [sp, #4]
 80016b0:	2301      	movs	r3, #1
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	2300      	movs	r3, #0
 80016b6:	2280      	movs	r2, #128	; 0x80
 80016b8:	4911      	ldr	r1, [pc, #68]	; (8001700 <main+0xb0>)
 80016ba:	4812      	ldr	r0, [pc, #72]	; (8001704 <main+0xb4>)
 80016bc:	f008 f973 	bl	80099a6 <xTaskCreate>
			  configMINIMAL_STACK_SIZE,   /* tamanho da pilha da task */
			  NULL,       /* parametro para a task */
			  1,          /* nivel de prioridade */
			  NULL);      /* ponteiro para o handle da task */

  xTaskCreate(cli2,    /* Nome da funcao que contem a task */
 80016c0:	2300      	movs	r3, #0
 80016c2:	9301      	str	r3, [sp, #4]
 80016c4:	2301      	movs	r3, #1
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	2300      	movs	r3, #0
 80016ca:	2280      	movs	r2, #128	; 0x80
 80016cc:	490e      	ldr	r1, [pc, #56]	; (8001708 <main+0xb8>)
 80016ce:	480f      	ldr	r0, [pc, #60]	; (800170c <main+0xbc>)
 80016d0:	f008 f969 	bl	80099a6 <xTaskCreate>
			  NULL,       /* parametro para a task */
			  1,          /* nivel de prioridade */
			  NULL);      /* ponteiro para o handle da task */

  //IMPORTANTE: Esta taska deve ser removida no projeto final
  xTaskCreate(usart_1_fcn,    /* Nome da funcao que contem a task */
 80016d4:	2300      	movs	r3, #0
 80016d6:	9301      	str	r3, [sp, #4]
 80016d8:	2301      	movs	r3, #1
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	2300      	movs	r3, #0
 80016de:	2280      	movs	r2, #128	; 0x80
 80016e0:	490b      	ldr	r1, [pc, #44]	; (8001710 <main+0xc0>)
 80016e2:	480c      	ldr	r0, [pc, #48]	; (8001714 <main+0xc4>)
 80016e4:	f008 f95f 	bl	80099a6 <xTaskCreate>
			  1,          /* nivel de prioridade */
			  NULL);      /* ponteiro para o handle da task */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80016e8:	f007 fae6 	bl	8008cb8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <main+0x9c>
 80016ee:	bf00      	nop
 80016f0:	20000348 	.word	0x20000348
 80016f4:	2000034c 	.word	0x2000034c
 80016f8:	0800c7a4 	.word	0x0800c7a4
 80016fc:	20001068 	.word	0x20001068
 8001700:	0800c78c 	.word	0x0800c78c
 8001704:	080012c9 	.word	0x080012c9
 8001708:	0800c790 	.word	0x0800c790
 800170c:	080013c9 	.word	0x080013c9
 8001710:	0800c798 	.word	0x0800c798
 8001714:	080014ad 	.word	0x080014ad

08001718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b096      	sub	sp, #88	; 0x58
 800171c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	2244      	movs	r2, #68	; 0x44
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f009 fe15 	bl	800b356 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800172c:	463b      	mov	r3, r7
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
 8001738:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800173a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800173e:	f003 fe65 	bl	800540c <HAL_PWREx_ControlVoltageScaling>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001748:	f000 fad8 	bl	8001cfc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800174c:	2302      	movs	r3, #2
 800174e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001750:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001754:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001756:	2310      	movs	r3, #16
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800175a:	2302      	movs	r3, #2
 800175c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800175e:	2302      	movs	r3, #2
 8001760:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001762:	2301      	movs	r3, #1
 8001764:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001766:	230a      	movs	r3, #10
 8001768:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800176a:	2307      	movs	r3, #7
 800176c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800176e:	2302      	movs	r3, #2
 8001770:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001772:	2302      	movs	r3, #2
 8001774:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	4618      	mov	r0, r3
 800177c:	f003 fe9c 	bl	80054b8 <HAL_RCC_OscConfig>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001786:	f000 fab9 	bl	8001cfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800178a:	230f      	movs	r3, #15
 800178c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800178e:	2303      	movs	r3, #3
 8001790:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001792:	2300      	movs	r3, #0
 8001794:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800179e:	463b      	mov	r3, r7
 80017a0:	2104      	movs	r1, #4
 80017a2:	4618      	mov	r0, r3
 80017a4:	f004 fa6e 	bl	8005c84 <HAL_RCC_ClockConfig>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80017ae:	f000 faa5 	bl	8001cfc <Error_Handler>
  }
}
 80017b2:	bf00      	nop
 80017b4:	3758      	adds	r7, #88	; 0x58
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	; 0x28
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80017c2:	f107 031c 	add.w	r3, r7, #28
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
 80017dc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80017de:	4b2f      	ldr	r3, [pc, #188]	; (800189c <MX_ADC1_Init+0xe0>)
 80017e0:	4a2f      	ldr	r2, [pc, #188]	; (80018a0 <MX_ADC1_Init+0xe4>)
 80017e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80017e4:	4b2d      	ldr	r3, [pc, #180]	; (800189c <MX_ADC1_Init+0xe0>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017ea:	4b2c      	ldr	r3, [pc, #176]	; (800189c <MX_ADC1_Init+0xe0>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017f0:	4b2a      	ldr	r3, [pc, #168]	; (800189c <MX_ADC1_Init+0xe0>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017f6:	4b29      	ldr	r3, [pc, #164]	; (800189c <MX_ADC1_Init+0xe0>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017fc:	4b27      	ldr	r3, [pc, #156]	; (800189c <MX_ADC1_Init+0xe0>)
 80017fe:	2204      	movs	r2, #4
 8001800:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001802:	4b26      	ldr	r3, [pc, #152]	; (800189c <MX_ADC1_Init+0xe0>)
 8001804:	2200      	movs	r2, #0
 8001806:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001808:	4b24      	ldr	r3, [pc, #144]	; (800189c <MX_ADC1_Init+0xe0>)
 800180a:	2200      	movs	r2, #0
 800180c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800180e:	4b23      	ldr	r3, [pc, #140]	; (800189c <MX_ADC1_Init+0xe0>)
 8001810:	2201      	movs	r2, #1
 8001812:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001814:	4b21      	ldr	r3, [pc, #132]	; (800189c <MX_ADC1_Init+0xe0>)
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800181c:	4b1f      	ldr	r3, [pc, #124]	; (800189c <MX_ADC1_Init+0xe0>)
 800181e:	2200      	movs	r2, #0
 8001820:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001822:	4b1e      	ldr	r3, [pc, #120]	; (800189c <MX_ADC1_Init+0xe0>)
 8001824:	2200      	movs	r2, #0
 8001826:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001828:	4b1c      	ldr	r3, [pc, #112]	; (800189c <MX_ADC1_Init+0xe0>)
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001830:	4b1a      	ldr	r3, [pc, #104]	; (800189c <MX_ADC1_Init+0xe0>)
 8001832:	2200      	movs	r2, #0
 8001834:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001836:	4b19      	ldr	r3, [pc, #100]	; (800189c <MX_ADC1_Init+0xe0>)
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800183e:	4817      	ldr	r0, [pc, #92]	; (800189c <MX_ADC1_Init+0xe0>)
 8001840:	f002 fb14 	bl	8003e6c <HAL_ADC_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800184a:	f000 fa57 	bl	8001cfc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001852:	f107 031c 	add.w	r3, r7, #28
 8001856:	4619      	mov	r1, r3
 8001858:	4810      	ldr	r0, [pc, #64]	; (800189c <MX_ADC1_Init+0xe0>)
 800185a:	f003 fa75 	bl	8004d48 <HAL_ADCEx_MultiModeConfigChannel>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001864:	f000 fa4a 	bl	8001cfc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001868:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <MX_ADC1_Init+0xe8>)
 800186a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800186c:	2306      	movs	r3, #6
 800186e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001874:	237f      	movs	r3, #127	; 0x7f
 8001876:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001878:	2304      	movs	r3, #4
 800187a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	4619      	mov	r1, r3
 8001884:	4805      	ldr	r0, [pc, #20]	; (800189c <MX_ADC1_Init+0xe0>)
 8001886:	f002 fde7 	bl	8004458 <HAL_ADC_ConfigChannel>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001890:	f000 fa34 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001894:	bf00      	nop
 8001896:	3728      	adds	r7, #40	; 0x28
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20001070 	.word	0x20001070
 80018a0:	50040000 	.word	0x50040000
 80018a4:	14f00020 	.word	0x14f00020

080018a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08e      	sub	sp, #56	; 0x38
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018bc:	f107 031c 	add.w	r3, r7, #28
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018c8:	463b      	mov	r3, r7
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]
 80018d4:	611a      	str	r2, [r3, #16]
 80018d6:	615a      	str	r2, [r3, #20]
 80018d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018da:	4b2d      	ldr	r3, [pc, #180]	; (8001990 <MX_TIM2_Init+0xe8>)
 80018dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 80018e2:	4b2b      	ldr	r3, [pc, #172]	; (8001990 <MX_TIM2_Init+0xe8>)
 80018e4:	227f      	movs	r2, #127	; 0x7f
 80018e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e8:	4b29      	ldr	r3, [pc, #164]	; (8001990 <MX_TIM2_Init+0xe8>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 96;
 80018ee:	4b28      	ldr	r3, [pc, #160]	; (8001990 <MX_TIM2_Init+0xe8>)
 80018f0:	2260      	movs	r2, #96	; 0x60
 80018f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f4:	4b26      	ldr	r3, [pc, #152]	; (8001990 <MX_TIM2_Init+0xe8>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fa:	4b25      	ldr	r3, [pc, #148]	; (8001990 <MX_TIM2_Init+0xe8>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001900:	4823      	ldr	r0, [pc, #140]	; (8001990 <MX_TIM2_Init+0xe8>)
 8001902:	f005 f89d 	bl	8006a40 <HAL_TIM_Base_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800190c:	f000 f9f6 	bl	8001cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001914:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001916:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800191a:	4619      	mov	r1, r3
 800191c:	481c      	ldr	r0, [pc, #112]	; (8001990 <MX_TIM2_Init+0xe8>)
 800191e:	f005 fd85 	bl	800742c <HAL_TIM_ConfigClockSource>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001928:	f000 f9e8 	bl	8001cfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800192c:	4818      	ldr	r0, [pc, #96]	; (8001990 <MX_TIM2_Init+0xe8>)
 800192e:	f005 f94f 	bl	8006bd0 <HAL_TIM_PWM_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001938:	f000 f9e0 	bl	8001cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001944:	f107 031c 	add.w	r3, r7, #28
 8001948:	4619      	mov	r1, r3
 800194a:	4811      	ldr	r0, [pc, #68]	; (8001990 <MX_TIM2_Init+0xe8>)
 800194c:	f006 fa8c 	bl	8007e68 <HAL_TIMEx_MasterConfigSynchronization>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001956:	f000 f9d1 	bl	8001cfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800195a:	2360      	movs	r3, #96	; 0x60
 800195c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 32;
 800195e:	2320      	movs	r3, #32
 8001960:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001962:	2300      	movs	r3, #0
 8001964:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001966:	2300      	movs	r3, #0
 8001968:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800196a:	463b      	mov	r3, r7
 800196c:	2208      	movs	r2, #8
 800196e:	4619      	mov	r1, r3
 8001970:	4807      	ldr	r0, [pc, #28]	; (8001990 <MX_TIM2_Init+0xe8>)
 8001972:	f005 fc4b 	bl	800720c <HAL_TIM_PWM_ConfigChannel>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800197c:	f000 f9be 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001980:	4803      	ldr	r0, [pc, #12]	; (8001990 <MX_TIM2_Init+0xe8>)
 8001982:	f001 feb3 	bl	80036ec <HAL_TIM_MspPostInit>

}
 8001986:	bf00      	nop
 8001988:	3738      	adds	r7, #56	; 0x38
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200010dc 	.word	0x200010dc

08001994 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b0b0      	sub	sp, #192	; 0xc0
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800199a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	60da      	str	r2, [r3, #12]
 80019a8:	611a      	str	r2, [r3, #16]
 80019aa:	615a      	str	r2, [r3, #20]
 80019ac:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ae:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	609a      	str	r2, [r3, #8]
 80019ba:	60da      	str	r2, [r3, #12]
 80019bc:	611a      	str	r2, [r3, #16]
 80019be:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	2288      	movs	r2, #136	; 0x88
 80019c4:	2100      	movs	r1, #0
 80019c6:	4618      	mov	r0, r3
 80019c8:	f009 fcc5 	bl	800b356 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80019cc:	2301      	movs	r3, #1
 80019ce:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80019d0:	2300      	movs	r3, #0
 80019d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	4618      	mov	r0, r3
 80019d8:	f004 fb76 	bl	80060c8 <HAL_RCCEx_PeriphCLKConfig>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80019e2:	f000 f98b 	bl	8001cfc <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80019e6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80019ea:	f7ff fbc9 	bl	8001180 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80019ee:	2001      	movs	r0, #1
 80019f0:	f7ff fb96 	bl	8001120 <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 80019f4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80019fc:	2302      	movs	r3, #2
 80019fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001a02:	2303      	movs	r3, #3
 8001a04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001a14:	2307      	movs	r3, #7
 8001a16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a24:	f006 fc11 	bl	800824a <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001a28:	f7ff fa56 	bl	8000ed8 <__NVIC_GetPriorityGrouping>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2105      	movs	r1, #5
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff faa6 	bl	8000f84 <NVIC_EncodePriority>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	2025      	movs	r0, #37	; 0x25
 8001a3e:	f7ff fa77 	bl	8000f30 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8001a42:	2025      	movs	r0, #37	; 0x25
 8001a44:	f7ff fa56 	bl	8000ef4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001a48:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001a4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001a50:	2300      	movs	r3, #0
 8001a52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001a56:	2300      	movs	r3, #0
 8001a58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001a62:	230c      	movs	r3, #12
 8001a64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  LL_USART_Init(USART1, &USART_InitStruct);
 8001a74:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4810      	ldr	r0, [pc, #64]	; (8001abc <MX_USART1_UART_Init+0x128>)
 8001a7c:	f007 f888 	bl	8008b90 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8001a80:	480e      	ldr	r0, [pc, #56]	; (8001abc <MX_USART1_UART_Init+0x128>)
 8001a82:	f7ff fac2 	bl	800100a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8001a86:	480d      	ldr	r0, [pc, #52]	; (8001abc <MX_USART1_UART_Init+0x128>)
 8001a88:	f7ff faaf 	bl	8000fea <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */
  //Inicializa as filas de transmissao e recepcao
   tx_queue_1 = xQueueCreate(TX_QUEUE_SIZE, sizeof(uint8_t));
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2101      	movs	r1, #1
 8001a90:	2080      	movs	r0, #128	; 0x80
 8001a92:	f007 fa95 	bl	8008fc0 <xQueueGenericCreate>
 8001a96:	4603      	mov	r3, r0
 8001a98:	4a09      	ldr	r2, [pc, #36]	; (8001ac0 <MX_USART1_UART_Init+0x12c>)
 8001a9a:	6013      	str	r3, [r2, #0]
   rx_queue_1 = xQueueCreate(RX_QUEUE_SIZE, sizeof(uint8_t));
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	2005      	movs	r0, #5
 8001aa2:	f007 fa8d 	bl	8008fc0 <xQueueGenericCreate>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	4a06      	ldr	r2, [pc, #24]	; (8001ac4 <MX_USART1_UART_Init+0x130>)
 8001aaa:	6013      	str	r3, [r2, #0]
   //Habilita a interrupcao de recepcao pela USART2
   LL_USART_EnableIT_RXNE(USART1);
 8001aac:	4803      	ldr	r0, [pc, #12]	; (8001abc <MX_USART1_UART_Init+0x128>)
 8001aae:	f7ff fae8 	bl	8001082 <LL_USART_EnableIT_RXNE>
  /* USER CODE END USART1_Init 2 */

}
 8001ab2:	bf00      	nop
 8001ab4:	37c0      	adds	r7, #192	; 0xc0
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40013800 	.word	0x40013800
 8001ac0:	20001128 	.word	0x20001128
 8001ac4:	2000106c 	.word	0x2000106c

08001ac8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b0b0      	sub	sp, #192	; 0xc0
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001ace:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]
 8001adc:	611a      	str	r2, [r3, #16]
 8001ade:	615a      	str	r2, [r3, #20]
 8001ae0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	609a      	str	r2, [r3, #8]
 8001aee:	60da      	str	r2, [r3, #12]
 8001af0:	611a      	str	r2, [r3, #16]
 8001af2:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001af4:	1d3b      	adds	r3, r7, #4
 8001af6:	2288      	movs	r2, #136	; 0x88
 8001af8:	2100      	movs	r1, #0
 8001afa:	4618      	mov	r0, r3
 8001afc:	f009 fc2b 	bl	800b356 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b00:	2302      	movs	r3, #2
 8001b02:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b04:	2300      	movs	r3, #0
 8001b06:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f004 fadc 	bl	80060c8 <HAL_RCCEx_PeriphCLKConfig>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b16:	f000 f8f1 	bl	8001cfc <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001b1a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001b1e:	f7ff fb17 	bl	8001150 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001b22:	2001      	movs	r0, #1
 8001b24:	f7ff fafc 	bl	8001120 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8001b28:	230c      	movs	r3, #12
 8001b2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001b34:	2303      	movs	r3, #3
 8001b36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b40:	2300      	movs	r3, #0
 8001b42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001b46:	2307      	movs	r3, #7
 8001b48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001b50:	4619      	mov	r1, r3
 8001b52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b56:	f006 fb78 	bl	800824a <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001b5a:	f7ff f9bd 	bl	8000ed8 <__NVIC_GetPriorityGrouping>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2200      	movs	r2, #0
 8001b62:	2105      	movs	r1, #5
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fa0d 	bl	8000f84 <NVIC_EncodePriority>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	2026      	movs	r0, #38	; 0x26
 8001b70:	f7ff f9de 	bl	8000f30 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001b74:	2026      	movs	r0, #38	; 0x26
 8001b76:	f7ff f9bd 	bl	8000ef4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001b7a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001b7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001b82:	2300      	movs	r3, #0
 8001b84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001b94:	230c      	movs	r3, #12
 8001b96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  LL_USART_Init(USART2, &USART_InitStruct);
 8001ba6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001baa:	4619      	mov	r1, r3
 8001bac:	480f      	ldr	r0, [pc, #60]	; (8001bec <MX_USART2_UART_Init+0x124>)
 8001bae:	f006 ffef 	bl	8008b90 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001bb2:	480e      	ldr	r0, [pc, #56]	; (8001bec <MX_USART2_UART_Init+0x124>)
 8001bb4:	f7ff fa29 	bl	800100a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001bb8:	480c      	ldr	r0, [pc, #48]	; (8001bec <MX_USART2_UART_Init+0x124>)
 8001bba:	f7ff fa16 	bl	8000fea <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */
  //Inicializa as filas de transmissao e recepcao
   tx_queue_2 = xQueueCreate(TX_QUEUE_SIZE, sizeof(uint8_t));
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	2080      	movs	r0, #128	; 0x80
 8001bc4:	f007 f9fc 	bl	8008fc0 <xQueueGenericCreate>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	4a09      	ldr	r2, [pc, #36]	; (8001bf0 <MX_USART2_UART_Init+0x128>)
 8001bcc:	6013      	str	r3, [r2, #0]
   rx_queue_2 = xQueueCreate(RX_QUEUE_SIZE, sizeof(uint8_t));
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	2005      	movs	r0, #5
 8001bd4:	f007 f9f4 	bl	8008fc0 <xQueueGenericCreate>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	4a06      	ldr	r2, [pc, #24]	; (8001bf4 <MX_USART2_UART_Init+0x12c>)
 8001bdc:	6013      	str	r3, [r2, #0]
   //Habilita a interrupcao de recepcao pela USART2
   LL_USART_EnableIT_RXNE(USART2);
 8001bde:	4803      	ldr	r0, [pc, #12]	; (8001bec <MX_USART2_UART_Init+0x124>)
 8001be0:	f7ff fa4f 	bl	8001082 <LL_USART_EnableIT_RXNE>
  /* USER CODE END USART2_Init 2 */

}
 8001be4:	bf00      	nop
 8001be6:	37c0      	adds	r7, #192	; 0xc0
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40004400 	.word	0x40004400
 8001bf0:	200010d4 	.word	0x200010d4
 8001bf4:	200010d8 	.word	0x200010d8

08001bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08a      	sub	sp, #40	; 0x28
 8001bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	609a      	str	r2, [r3, #8]
 8001c0a:	60da      	str	r2, [r3, #12]
 8001c0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c0e:	4b2b      	ldr	r3, [pc, #172]	; (8001cbc <MX_GPIO_Init+0xc4>)
 8001c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c12:	4a2a      	ldr	r2, [pc, #168]	; (8001cbc <MX_GPIO_Init+0xc4>)
 8001c14:	f043 0304 	orr.w	r3, r3, #4
 8001c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c1a:	4b28      	ldr	r3, [pc, #160]	; (8001cbc <MX_GPIO_Init+0xc4>)
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c26:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <MX_GPIO_Init+0xc4>)
 8001c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2a:	4a24      	ldr	r2, [pc, #144]	; (8001cbc <MX_GPIO_Init+0xc4>)
 8001c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c32:	4b22      	ldr	r3, [pc, #136]	; (8001cbc <MX_GPIO_Init+0xc4>)
 8001c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3e:	4b1f      	ldr	r3, [pc, #124]	; (8001cbc <MX_GPIO_Init+0xc4>)
 8001c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c42:	4a1e      	ldr	r2, [pc, #120]	; (8001cbc <MX_GPIO_Init+0xc4>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c4a:	4b1c      	ldr	r3, [pc, #112]	; (8001cbc <MX_GPIO_Init+0xc4>)
 8001c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c56:	4b19      	ldr	r3, [pc, #100]	; (8001cbc <MX_GPIO_Init+0xc4>)
 8001c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5a:	4a18      	ldr	r2, [pc, #96]	; (8001cbc <MX_GPIO_Init+0xc4>)
 8001c5c:	f043 0302 	orr.w	r3, r3, #2
 8001c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c62:	4b16      	ldr	r3, [pc, #88]	; (8001cbc <MX_GPIO_Init+0xc4>)
 8001c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	607b      	str	r3, [r7, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2120      	movs	r1, #32
 8001c72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c76:	f003 fba3 	bl	80053c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c80:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <MX_GPIO_Init+0xc8>)
 8001c82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	480d      	ldr	r0, [pc, #52]	; (8001cc4 <MX_GPIO_Init+0xcc>)
 8001c90:	f003 f9ec 	bl	800506c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c94:	2320      	movs	r3, #32
 8001c96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cae:	f003 f9dd 	bl	800506c <HAL_GPIO_Init>

}
 8001cb2:	bf00      	nop
 8001cb4:	3728      	adds	r7, #40	; 0x28
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	10210000 	.word	0x10210000
 8001cc4:	48000800 	.word	0x48000800

08001cc8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	f007 f844 	bl	8008d5e <osDelay>
 8001cd6:	e7fb      	b.n	8001cd0 <StartDefaultTask+0x8>

08001cd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a04      	ldr	r2, [pc, #16]	; (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d101      	bne.n	8001cee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001cea:	f001 febb 	bl	8003a64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40012c00 	.word	0x40012c00

08001cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d00:	b672      	cpsid	i
}
 8001d02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d04:	e7fe      	b.n	8001d04 <Error_Handler+0x8>

08001d06 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b085      	sub	sp, #20
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
 8001d10:	603b      	str	r3, [r7, #0]
 8001d12:	4603      	mov	r3, r0
 8001d14:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d204      	bcs.n	8001d28 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4413      	add	r3, r2
 8001d24:	7bfa      	ldrb	r2, [r7, #15]
 8001d26:	701a      	strb	r2, [r3, #0]
  }
}
 8001d28:	bf00      	nop
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
 8001d3e:	603b      	str	r3, [r7, #0]
 8001d40:	4603      	mov	r3, r0
 8001d42:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	e002      	b.n	8001d66 <_strnlen_s+0x16>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	3301      	adds	r3, #1
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d004      	beq.n	8001d78 <_strnlen_s+0x28>
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	1e5a      	subs	r2, r3, #1
 8001d72:	603a      	str	r2, [r7, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1f3      	bne.n	8001d60 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	1ad3      	subs	r3, r2, r3
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	4603      	mov	r3, r0
 8001d92:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	2b2f      	cmp	r3, #47	; 0x2f
 8001d98:	d904      	bls.n	8001da4 <_is_digit+0x1a>
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	2b39      	cmp	r3, #57	; 0x39
 8001d9e:	d801      	bhi.n	8001da4 <_is_digit+0x1a>
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <_is_digit+0x1c>
 8001da4:	2300      	movs	r3, #0
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	b2db      	uxtb	r3, r3
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8001dc4:	e00e      	b.n	8001de4 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	1c59      	adds	r1, r3, #1
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6011      	str	r1, [r2, #0]
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	4403      	add	r3, r0
 8001de0:	3b30      	subs	r3, #48	; 0x30
 8001de2:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff ffcd 	bl	8001d8a <_is_digit>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1e7      	bne.n	8001dc6 <_atoi+0xe>
  }
  return i;
 8001df6:	68fb      	ldr	r3, [r7, #12]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8001e00:	b590      	push	{r4, r7, lr}
 8001e02:	b087      	sub	sp, #28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
 8001e0c:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8001e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d125      	bne.n	8001e68 <_out_rev+0x68>
 8001e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d120      	bne.n	8001e68 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8001e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	e00a      	b.n	8001e42 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	1c53      	adds	r3, r2, #1
 8001e30:	607b      	str	r3, [r7, #4]
 8001e32:	68fc      	ldr	r4, [r7, #12]
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	68b9      	ldr	r1, [r7, #8]
 8001e38:	2020      	movs	r0, #32
 8001e3a:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d3f0      	bcc.n	8001e2c <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8001e4a:	e00d      	b.n	8001e68 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8001e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e56:	4413      	add	r3, r2
 8001e58:	7818      	ldrb	r0, [r3, #0]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	1c53      	adds	r3, r2, #1
 8001e5e:	607b      	str	r3, [r7, #4]
 8001e60:	68fc      	ldr	r4, [r7, #12]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	47a0      	blx	r4
  while (len) {
 8001e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1ee      	bne.n	8001e4c <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8001e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00e      	beq.n	8001e96 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8001e78:	e007      	b.n	8001e8a <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	1c53      	adds	r3, r2, #1
 8001e7e:	607b      	str	r3, [r7, #4]
 8001e80:	68fc      	ldr	r4, [r7, #12]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	68b9      	ldr	r1, [r7, #8]
 8001e86:	2020      	movs	r0, #32
 8001e88:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d8f1      	bhi.n	8001e7a <_out_rev+0x7a>
    }
  }

  return idx;
 8001e96:	687b      	ldr	r3, [r7, #4]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	371c      	adds	r7, #28
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd90      	pop	{r4, r7, pc}

08001ea0 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af04      	add	r7, sp, #16
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
 8001eac:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8001eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d136      	bne.n	8001f26 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8001eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d018      	beq.n	8001ef0 <_ntoa_format+0x50>
 8001ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d013      	beq.n	8001ef0 <_ntoa_format+0x50>
 8001ec8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d104      	bne.n	8001eda <_ntoa_format+0x3a>
 8001ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed2:	f003 030c 	and.w	r3, r3, #12
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00a      	beq.n	8001ef0 <_ntoa_format+0x50>
      width--;
 8001eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001edc:	3b01      	subs	r3, #1
 8001ede:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001ee0:	e006      	b.n	8001ef0 <_ntoa_format+0x50>
      buf[len++] = '0';
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	1c5a      	adds	r2, r3, #1
 8001ee6:	61fa      	str	r2, [r7, #28]
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4413      	add	r3, r2
 8001eec:	2230      	movs	r2, #48	; 0x30
 8001eee:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001ef0:	69fa      	ldr	r2, [r7, #28]
 8001ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d20a      	bcs.n	8001f0e <_ntoa_format+0x6e>
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	2b1f      	cmp	r3, #31
 8001efc:	d9f1      	bls.n	8001ee2 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001efe:	e006      	b.n	8001f0e <_ntoa_format+0x6e>
      buf[len++] = '0';
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	1c5a      	adds	r2, r3, #1
 8001f04:	61fa      	str	r2, [r7, #28]
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4413      	add	r3, r2
 8001f0a:	2230      	movs	r2, #48	; 0x30
 8001f0c:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d006      	beq.n	8001f26 <_ntoa_format+0x86>
 8001f18:	69fa      	ldr	r2, [r7, #28]
 8001f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d202      	bcs.n	8001f26 <_ntoa_format+0x86>
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	2b1f      	cmp	r3, #31
 8001f24:	d9ec      	bls.n	8001f00 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8001f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f28:	f003 0310 	and.w	r3, r3, #16
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d058      	beq.n	8001fe2 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8001f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d116      	bne.n	8001f68 <_ntoa_format+0xc8>
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d013      	beq.n	8001f68 <_ntoa_format+0xc8>
 8001f40:	69fa      	ldr	r2, [r7, #28]
 8001f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d003      	beq.n	8001f50 <_ntoa_format+0xb0>
 8001f48:	69fa      	ldr	r2, [r7, #28]
 8001f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d10b      	bne.n	8001f68 <_ntoa_format+0xc8>
      len--;
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d005      	beq.n	8001f68 <_ntoa_format+0xc8>
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	2b10      	cmp	r3, #16
 8001f60:	d102      	bne.n	8001f68 <_ntoa_format+0xc8>
        len--;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3b01      	subs	r3, #1
 8001f66:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	2b10      	cmp	r3, #16
 8001f6c:	d10f      	bne.n	8001f8e <_ntoa_format+0xee>
 8001f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f70:	f003 0320 	and.w	r3, r3, #32
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10a      	bne.n	8001f8e <_ntoa_format+0xee>
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	2b1f      	cmp	r3, #31
 8001f7c:	d807      	bhi.n	8001f8e <_ntoa_format+0xee>
      buf[len++] = 'x';
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	1c5a      	adds	r2, r3, #1
 8001f82:	61fa      	str	r2, [r7, #28]
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4413      	add	r3, r2
 8001f88:	2278      	movs	r2, #120	; 0x78
 8001f8a:	701a      	strb	r2, [r3, #0]
 8001f8c:	e01f      	b.n	8001fce <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	2b10      	cmp	r3, #16
 8001f92:	d10f      	bne.n	8001fb4 <_ntoa_format+0x114>
 8001f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f96:	f003 0320 	and.w	r3, r3, #32
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00a      	beq.n	8001fb4 <_ntoa_format+0x114>
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	2b1f      	cmp	r3, #31
 8001fa2:	d807      	bhi.n	8001fb4 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	1c5a      	adds	r2, r3, #1
 8001fa8:	61fa      	str	r2, [r7, #28]
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4413      	add	r3, r2
 8001fae:	2258      	movs	r2, #88	; 0x58
 8001fb0:	701a      	strb	r2, [r3, #0]
 8001fb2:	e00c      	b.n	8001fce <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d109      	bne.n	8001fce <_ntoa_format+0x12e>
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	2b1f      	cmp	r3, #31
 8001fbe:	d806      	bhi.n	8001fce <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	1c5a      	adds	r2, r3, #1
 8001fc4:	61fa      	str	r2, [r7, #28]
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4413      	add	r3, r2
 8001fca:	2262      	movs	r2, #98	; 0x62
 8001fcc:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	2b1f      	cmp	r3, #31
 8001fd2:	d806      	bhi.n	8001fe2 <_ntoa_format+0x142>
      buf[len++] = '0';
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	61fa      	str	r2, [r7, #28]
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4413      	add	r3, r2
 8001fde:	2230      	movs	r2, #48	; 0x30
 8001fe0:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	2b1f      	cmp	r3, #31
 8001fe6:	d824      	bhi.n	8002032 <_ntoa_format+0x192>
    if (negative) {
 8001fe8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d007      	beq.n	8002000 <_ntoa_format+0x160>
      buf[len++] = '-';
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	1c5a      	adds	r2, r3, #1
 8001ff4:	61fa      	str	r2, [r7, #28]
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	222d      	movs	r2, #45	; 0x2d
 8001ffc:	701a      	strb	r2, [r3, #0]
 8001ffe:	e018      	b.n	8002032 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8002000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	2b00      	cmp	r3, #0
 8002008:	d007      	beq.n	800201a <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	1c5a      	adds	r2, r3, #1
 800200e:	61fa      	str	r2, [r7, #28]
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4413      	add	r3, r2
 8002014:	222b      	movs	r2, #43	; 0x2b
 8002016:	701a      	strb	r2, [r3, #0]
 8002018:	e00b      	b.n	8002032 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 800201a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	2b00      	cmp	r3, #0
 8002022:	d006      	beq.n	8002032 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	61fa      	str	r2, [r7, #28]
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4413      	add	r3, r2
 800202e:	2220      	movs	r2, #32
 8002030:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002034:	9303      	str	r3, [sp, #12]
 8002036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002038:	9302      	str	r3, [sp, #8]
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	9301      	str	r3, [sp, #4]
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	9300      	str	r3, [sp, #0]
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	68b9      	ldr	r1, [r7, #8]
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f7ff fed9 	bl	8001e00 <_out_rev>
 800204e:	4603      	mov	r3, r0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b096      	sub	sp, #88	; 0x58
 800205c:	af08      	add	r7, sp, #32
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
 8002064:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8002066:	2300      	movs	r3, #0
 8002068:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800206a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800206c:	2b00      	cmp	r3, #0
 800206e:	d103      	bne.n	8002078 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8002070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002072:	f023 0310 	bic.w	r3, r3, #16
 8002076:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002078:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800207a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800207e:	2b00      	cmp	r3, #0
 8002080:	d002      	beq.n	8002088 <_ntoa_long+0x30>
 8002082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002084:	2b00      	cmp	r3, #0
 8002086:	d033      	beq.n	80020f0 <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 8002088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800208a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800208c:	fbb3 f2f2 	udiv	r2, r3, r2
 8002090:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002092:	fb01 f202 	mul.w	r2, r1, r2
 8002096:	1a9b      	subs	r3, r3, r2
 8002098:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800209c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80020a0:	2b09      	cmp	r3, #9
 80020a2:	d804      	bhi.n	80020ae <_ntoa_long+0x56>
 80020a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80020a8:	3330      	adds	r3, #48	; 0x30
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	e00d      	b.n	80020ca <_ntoa_long+0x72>
 80020ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020b0:	f003 0320 	and.w	r3, r3, #32
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <_ntoa_long+0x64>
 80020b8:	2241      	movs	r2, #65	; 0x41
 80020ba:	e000      	b.n	80020be <_ntoa_long+0x66>
 80020bc:	2261      	movs	r2, #97	; 0x61
 80020be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80020c2:	4413      	add	r3, r2
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	3b0a      	subs	r3, #10
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020cc:	1c59      	adds	r1, r3, #1
 80020ce:	6379      	str	r1, [r7, #52]	; 0x34
 80020d0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80020d4:	440b      	add	r3, r1
 80020d6:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80020da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020de:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e2:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80020e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d002      	beq.n	80020f0 <_ntoa_long+0x98>
 80020ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ec:	2b1f      	cmp	r3, #31
 80020ee:	d9cb      	bls.n	8002088 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80020f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020f2:	9306      	str	r3, [sp, #24]
 80020f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020f6:	9305      	str	r3, [sp, #20]
 80020f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020fa:	9304      	str	r3, [sp, #16]
 80020fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020fe:	9303      	str	r3, [sp, #12]
 8002100:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002104:	9302      	str	r3, [sp, #8]
 8002106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002108:	9301      	str	r3, [sp, #4]
 800210a:	f107 0310 	add.w	r3, r7, #16
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	68b9      	ldr	r1, [r7, #8]
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f7ff fec2 	bl	8001ea0 <_ntoa_format>
 800211c:	4603      	mov	r3, r0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3738      	adds	r7, #56	; 0x38
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b096      	sub	sp, #88	; 0x58
 800212a:	af08      	add	r7, sp, #32
 800212c:	60f8      	str	r0, [r7, #12]
 800212e:	60b9      	str	r1, [r7, #8]
 8002130:	607a      	str	r2, [r7, #4]
 8002132:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8002134:	2300      	movs	r3, #0
 8002136:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8002138:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800213c:	4313      	orrs	r3, r2
 800213e:	d103      	bne.n	8002148 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8002140:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002142:	f023 0310 	bic.w	r3, r3, #16
 8002146:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002148:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800214a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <_ntoa_long_long+0x34>
 8002152:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002156:	4313      	orrs	r3, r2
 8002158:	d038      	beq.n	80021cc <_ntoa_long_long+0xa6>
    do {
      const char digit = (char)(value % base);
 800215a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800215e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002162:	f7fe fd23 	bl	8000bac <__aeabi_uldivmod>
 8002166:	4613      	mov	r3, r2
 8002168:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800216c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002170:	2b09      	cmp	r3, #9
 8002172:	d804      	bhi.n	800217e <_ntoa_long_long+0x58>
 8002174:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002178:	3330      	adds	r3, #48	; 0x30
 800217a:	b2da      	uxtb	r2, r3
 800217c:	e00d      	b.n	800219a <_ntoa_long_long+0x74>
 800217e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002180:	f003 0320 	and.w	r3, r3, #32
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <_ntoa_long_long+0x66>
 8002188:	2241      	movs	r2, #65	; 0x41
 800218a:	e000      	b.n	800218e <_ntoa_long_long+0x68>
 800218c:	2261      	movs	r2, #97	; 0x61
 800218e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002192:	4413      	add	r3, r2
 8002194:	b2db      	uxtb	r3, r3
 8002196:	3b0a      	subs	r3, #10
 8002198:	b2da      	uxtb	r2, r3
 800219a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800219c:	1c59      	adds	r1, r3, #1
 800219e:	6379      	str	r1, [r7, #52]	; 0x34
 80021a0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80021a4:	440b      	add	r3, r1
 80021a6:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80021aa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80021ae:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80021b2:	f7fe fcfb 	bl	8000bac <__aeabi_uldivmod>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80021be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021c2:	4313      	orrs	r3, r2
 80021c4:	d002      	beq.n	80021cc <_ntoa_long_long+0xa6>
 80021c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c8:	2b1f      	cmp	r3, #31
 80021ca:	d9c6      	bls.n	800215a <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80021cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021d0:	9206      	str	r2, [sp, #24]
 80021d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80021d4:	9205      	str	r2, [sp, #20]
 80021d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80021d8:	9204      	str	r2, [sp, #16]
 80021da:	9303      	str	r3, [sp, #12]
 80021dc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80021e0:	9302      	str	r3, [sp, #8]
 80021e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e4:	9301      	str	r3, [sp, #4]
 80021e6:	f107 0310 	add.w	r3, r7, #16
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	68b9      	ldr	r1, [r7, #8]
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f7ff fe54 	bl	8001ea0 <_ntoa_format>
 80021f8:	4603      	mov	r3, r0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3738      	adds	r7, #56	; 0x38
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	0000      	movs	r0, r0
 8002204:	0000      	movs	r0, r0
	...

08002208 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002208:	b590      	push	{r4, r7, lr}
 800220a:	b09d      	sub	sp, #116	; 0x74
 800220c:	af04      	add	r7, sp, #16
 800220e:	6178      	str	r0, [r7, #20]
 8002210:	6139      	str	r1, [r7, #16]
 8002212:	60fa      	str	r2, [r7, #12]
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 800221e:	f04f 0200 	mov.w	r2, #0
 8002222:	f04f 0300 	mov.w	r3, #0
 8002226:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800222a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800222e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002232:	f7fe fbf1 	bl	8000a18 <__aeabi_dcmpeq>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10f      	bne.n	800225c <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 800223c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800223e:	9303      	str	r3, [sp, #12]
 8002240:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002242:	9302      	str	r3, [sp, #8]
 8002244:	2303      	movs	r3, #3
 8002246:	9301      	str	r3, [sp, #4]
 8002248:	4ba9      	ldr	r3, [pc, #676]	; (80024f0 <_ftoa+0x2e8>)
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	6939      	ldr	r1, [r7, #16]
 8002252:	6978      	ldr	r0, [r7, #20]
 8002254:	f7ff fdd4 	bl	8001e00 <_out_rev>
 8002258:	4603      	mov	r3, r0
 800225a:	e22b      	b.n	80026b4 <_ftoa+0x4ac>
  if (value < -DBL_MAX)
 800225c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002260:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8002264:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002268:	f7fe fbe0 	bl	8000a2c <__aeabi_dcmplt>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00f      	beq.n	8002292 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8002272:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002274:	9303      	str	r3, [sp, #12]
 8002276:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002278:	9302      	str	r3, [sp, #8]
 800227a:	2304      	movs	r3, #4
 800227c:	9301      	str	r3, [sp, #4]
 800227e:	4b9d      	ldr	r3, [pc, #628]	; (80024f4 <_ftoa+0x2ec>)
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	6939      	ldr	r1, [r7, #16]
 8002288:	6978      	ldr	r0, [r7, #20]
 800228a:	f7ff fdb9 	bl	8001e00 <_out_rev>
 800228e:	4603      	mov	r3, r0
 8002290:	e210      	b.n	80026b4 <_ftoa+0x4ac>
  if (value > DBL_MAX)
 8002292:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002296:	4b98      	ldr	r3, [pc, #608]	; (80024f8 <_ftoa+0x2f0>)
 8002298:	e9d7 0100 	ldrd	r0, r1, [r7]
 800229c:	f7fe fbe4 	bl	8000a68 <__aeabi_dcmpgt>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d01d      	beq.n	80022e2 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 80022a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <_ftoa+0xac>
 80022b0:	4b92      	ldr	r3, [pc, #584]	; (80024fc <_ftoa+0x2f4>)
 80022b2:	e000      	b.n	80022b6 <_ftoa+0xae>
 80022b4:	4b92      	ldr	r3, [pc, #584]	; (8002500 <_ftoa+0x2f8>)
 80022b6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80022b8:	f002 0204 	and.w	r2, r2, #4
 80022bc:	2a00      	cmp	r2, #0
 80022be:	d001      	beq.n	80022c4 <_ftoa+0xbc>
 80022c0:	2204      	movs	r2, #4
 80022c2:	e000      	b.n	80022c6 <_ftoa+0xbe>
 80022c4:	2203      	movs	r2, #3
 80022c6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80022c8:	9103      	str	r1, [sp, #12]
 80022ca:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80022cc:	9102      	str	r1, [sp, #8]
 80022ce:	9201      	str	r2, [sp, #4]
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	6939      	ldr	r1, [r7, #16]
 80022d8:	6978      	ldr	r0, [r7, #20]
 80022da:	f7ff fd91 	bl	8001e00 <_out_rev>
 80022de:	4603      	mov	r3, r0
 80022e0:	e1e8      	b.n	80026b4 <_ftoa+0x4ac>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 80022e2:	a37f      	add	r3, pc, #508	; (adr r3, 80024e0 <_ftoa+0x2d8>)
 80022e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022ec:	f7fe fbbc 	bl	8000a68 <__aeabi_dcmpgt>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d109      	bne.n	800230a <_ftoa+0x102>
 80022f6:	a37c      	add	r3, pc, #496	; (adr r3, 80024e8 <_ftoa+0x2e0>)
 80022f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002300:	f7fe fb94 	bl	8000a2c <__aeabi_dcmplt>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00f      	beq.n	800232a <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800230a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800230c:	9302      	str	r3, [sp, #8]
 800230e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002310:	9301      	str	r3, [sp, #4]
 8002312:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	ed97 0b00 	vldr	d0, [r7]
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	6939      	ldr	r1, [r7, #16]
 8002320:	6978      	ldr	r0, [r7, #20]
 8002322:	f000 f9d1 	bl	80026c8 <_etoa>
 8002326:	4603      	mov	r3, r0
 8002328:	e1c4      	b.n	80026b4 <_ftoa+0x4ac>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800232a:	2300      	movs	r3, #0
 800232c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8002330:	f04f 0200 	mov.w	r2, #0
 8002334:	f04f 0300 	mov.w	r3, #0
 8002338:	e9d7 0100 	ldrd	r0, r1, [r7]
 800233c:	f7fe fb76 	bl	8000a2c <__aeabi_dcmplt>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00e      	beq.n	8002364 <_ftoa+0x15c>
    negative = true;
 8002346:	2301      	movs	r3, #1
 8002348:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 800234c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002350:	f04f 0000 	mov.w	r0, #0
 8002354:	f04f 0100 	mov.w	r1, #0
 8002358:	f7fd ff3e 	bl	80001d8 <__aeabi_dsub>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8002364:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10e      	bne.n	800238c <_ftoa+0x184>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800236e:	2306      	movs	r3, #6
 8002370:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002372:	e00b      	b.n	800238c <_ftoa+0x184>
    buf[len++] = '0';
 8002374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002376:	1c5a      	adds	r2, r3, #1
 8002378:	65fa      	str	r2, [r7, #92]	; 0x5c
 800237a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800237e:	4413      	add	r3, r2
 8002380:	2230      	movs	r2, #48	; 0x30
 8002382:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8002386:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002388:	3b01      	subs	r3, #1
 800238a:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800238c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800238e:	2b1f      	cmp	r3, #31
 8002390:	d802      	bhi.n	8002398 <_ftoa+0x190>
 8002392:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002394:	2b09      	cmp	r3, #9
 8002396:	d8ed      	bhi.n	8002374 <_ftoa+0x16c>
  }

  int whole = (int)value;
 8002398:	e9d7 0100 	ldrd	r0, r1, [r7]
 800239c:	f7fe fb6e 	bl	8000a7c <__aeabi_d2iz>
 80023a0:	4603      	mov	r3, r0
 80023a2:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 80023a4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80023a6:	f7fe f865 	bl	8000474 <__aeabi_i2d>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023b2:	f7fd ff11 	bl	80001d8 <__aeabi_dsub>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	4610      	mov	r0, r2
 80023bc:	4619      	mov	r1, r3
 80023be:	4a51      	ldr	r2, [pc, #324]	; (8002504 <_ftoa+0x2fc>)
 80023c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	4413      	add	r3, r2
 80023c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ca:	f7fe f8bd 	bl	8000548 <__aeabi_dmul>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 80023d6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80023da:	f7fe fb77 	bl	8000acc <__aeabi_d2uiz>
 80023de:	4603      	mov	r3, r0
 80023e0:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 80023e2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80023e4:	f7fe f836 	bl	8000454 <__aeabi_ui2d>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80023f0:	f7fd fef2 	bl	80001d8 <__aeabi_dsub>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 80023fc:	f04f 0200 	mov.w	r2, #0
 8002400:	4b41      	ldr	r3, [pc, #260]	; (8002508 <_ftoa+0x300>)
 8002402:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002406:	f7fe fb2f 	bl	8000a68 <__aeabi_dcmpgt>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d016      	beq.n	800243e <_ftoa+0x236>
    ++frac;
 8002410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002412:	3301      	adds	r3, #1
 8002414:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8002416:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002418:	f7fe f81c 	bl	8000454 <__aeabi_ui2d>
 800241c:	4a39      	ldr	r2, [pc, #228]	; (8002504 <_ftoa+0x2fc>)
 800241e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	4413      	add	r3, r2
 8002424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002428:	f7fe fb14 	bl	8000a54 <__aeabi_dcmpge>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d01a      	beq.n	8002468 <_ftoa+0x260>
      frac = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8002436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002438:	3301      	adds	r3, #1
 800243a:	657b      	str	r3, [r7, #84]	; 0x54
 800243c:	e014      	b.n	8002468 <_ftoa+0x260>
    }
  }
  else if (diff < 0.5) {
 800243e:	f04f 0200 	mov.w	r2, #0
 8002442:	4b31      	ldr	r3, [pc, #196]	; (8002508 <_ftoa+0x300>)
 8002444:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002448:	f7fe faf0 	bl	8000a2c <__aeabi_dcmplt>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10a      	bne.n	8002468 <_ftoa+0x260>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8002452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002454:	2b00      	cmp	r3, #0
 8002456:	d004      	beq.n	8002462 <_ftoa+0x25a>
 8002458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d002      	beq.n	8002468 <_ftoa+0x260>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8002462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002464:	3301      	adds	r3, #1
 8002466:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8002468:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800246a:	2b00      	cmp	r3, #0
 800246c:	d134      	bne.n	80024d8 <_ftoa+0x2d0>
    diff = value - (double)whole;
 800246e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002470:	f7fe f800 	bl	8000474 <__aeabi_i2d>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	e9d7 0100 	ldrd	r0, r1, [r7]
 800247c:	f7fd feac 	bl	80001d8 <__aeabi_dsub>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8002488:	2301      	movs	r3, #1
 800248a:	461c      	mov	r4, r3
 800248c:	f04f 0200 	mov.w	r2, #0
 8002490:	4b1d      	ldr	r3, [pc, #116]	; (8002508 <_ftoa+0x300>)
 8002492:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002496:	f7fe fac9 	bl	8000a2c <__aeabi_dcmplt>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <_ftoa+0x29c>
 80024a0:	2300      	movs	r3, #0
 80024a2:	461c      	mov	r4, r3
 80024a4:	b2e3      	uxtb	r3, r4
 80024a6:	f083 0301 	eor.w	r3, r3, #1
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d109      	bne.n	80024c4 <_ftoa+0x2bc>
 80024b0:	f04f 0200 	mov.w	r2, #0
 80024b4:	4b14      	ldr	r3, [pc, #80]	; (8002508 <_ftoa+0x300>)
 80024b6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80024ba:	f7fe fad5 	bl	8000a68 <__aeabi_dcmpgt>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d067      	beq.n	8002594 <_ftoa+0x38c>
 80024c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 8085 	beq.w	80025da <_ftoa+0x3d2>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 80024d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024d2:	3301      	adds	r3, #1
 80024d4:	657b      	str	r3, [r7, #84]	; 0x54
 80024d6:	e080      	b.n	80025da <_ftoa+0x3d2>
    }
  }
  else {
    unsigned int count = prec;
 80024d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024da:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80024dc:	e037      	b.n	800254e <_ftoa+0x346>
 80024de:	bf00      	nop
 80024e0:	00000000 	.word	0x00000000
 80024e4:	41cdcd65 	.word	0x41cdcd65
 80024e8:	00000000 	.word	0x00000000
 80024ec:	c1cdcd65 	.word	0xc1cdcd65
 80024f0:	0800c7c0 	.word	0x0800c7c0
 80024f4:	0800c7c4 	.word	0x0800c7c4
 80024f8:	7fefffff 	.word	0x7fefffff
 80024fc:	0800c7cc 	.word	0x0800c7cc
 8002500:	0800c7d4 	.word	0x0800c7d4
 8002504:	0800c7e0 	.word	0x0800c7e0
 8002508:	3fe00000 	.word	0x3fe00000
      --count;
 800250c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800250e:	3b01      	subs	r3, #1
 8002510:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8002512:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002514:	4b69      	ldr	r3, [pc, #420]	; (80026bc <_ftoa+0x4b4>)
 8002516:	fba3 2301 	umull	r2, r3, r3, r1
 800251a:	08da      	lsrs	r2, r3, #3
 800251c:	4613      	mov	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	1aca      	subs	r2, r1, r3
 8002526:	b2d2      	uxtb	r2, r2
 8002528:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800252a:	1c59      	adds	r1, r3, #1
 800252c:	65f9      	str	r1, [r7, #92]	; 0x5c
 800252e:	3230      	adds	r2, #48	; 0x30
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002536:	440b      	add	r3, r1
 8002538:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 800253c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800253e:	4a5f      	ldr	r2, [pc, #380]	; (80026bc <_ftoa+0x4b4>)
 8002540:	fba2 2303 	umull	r2, r3, r2, r3
 8002544:	08db      	lsrs	r3, r3, #3
 8002546:	653b      	str	r3, [r7, #80]	; 0x50
 8002548:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <_ftoa+0x34e>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800254e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002550:	2b1f      	cmp	r3, #31
 8002552:	d9db      	bls.n	800250c <_ftoa+0x304>
 8002554:	e00a      	b.n	800256c <_ftoa+0x364>
        break;
 8002556:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002558:	e008      	b.n	800256c <_ftoa+0x364>
      buf[len++] = '0';
 800255a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002560:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002564:	4413      	add	r3, r2
 8002566:	2230      	movs	r2, #48	; 0x30
 8002568:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800256c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800256e:	2b1f      	cmp	r3, #31
 8002570:	d804      	bhi.n	800257c <_ftoa+0x374>
 8002572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002574:	1e5a      	subs	r2, r3, #1
 8002576:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1ee      	bne.n	800255a <_ftoa+0x352>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800257c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800257e:	2b1f      	cmp	r3, #31
 8002580:	d82b      	bhi.n	80025da <_ftoa+0x3d2>
      // add decimal
      buf[len++] = '.';
 8002582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002588:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800258c:	4413      	add	r3, r2
 800258e:	222e      	movs	r2, #46	; 0x2e
 8002590:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002594:	e021      	b.n	80025da <_ftoa+0x3d2>
    buf[len++] = (char)(48 + (whole % 10));
 8002596:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002598:	4b49      	ldr	r3, [pc, #292]	; (80026c0 <_ftoa+0x4b8>)
 800259a:	fb83 1302 	smull	r1, r3, r3, r2
 800259e:	1099      	asrs	r1, r3, #2
 80025a0:	17d3      	asrs	r3, r2, #31
 80025a2:	1ac9      	subs	r1, r1, r3
 80025a4:	460b      	mov	r3, r1
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	1ad1      	subs	r1, r2, r3
 80025ae:	b2ca      	uxtb	r2, r1
 80025b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025b2:	1c59      	adds	r1, r3, #1
 80025b4:	65f9      	str	r1, [r7, #92]	; 0x5c
 80025b6:	3230      	adds	r2, #48	; 0x30
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80025be:	440b      	add	r3, r1
 80025c0:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 80025c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c6:	4a3e      	ldr	r2, [pc, #248]	; (80026c0 <_ftoa+0x4b8>)
 80025c8:	fb82 1203 	smull	r1, r2, r2, r3
 80025cc:	1092      	asrs	r2, r2, #2
 80025ce:	17db      	asrs	r3, r3, #31
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	657b      	str	r3, [r7, #84]	; 0x54
 80025d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <_ftoa+0x3da>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80025da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025dc:	2b1f      	cmp	r3, #31
 80025de:	d9da      	bls.n	8002596 <_ftoa+0x38e>
 80025e0:	e000      	b.n	80025e4 <_ftoa+0x3dc>
      break;
 80025e2:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80025e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d124      	bne.n	8002638 <_ftoa+0x430>
 80025ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d01f      	beq.n	8002638 <_ftoa+0x430>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80025f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d015      	beq.n	800262a <_ftoa+0x422>
 80025fe:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002602:	2b00      	cmp	r3, #0
 8002604:	d104      	bne.n	8002610 <_ftoa+0x408>
 8002606:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002608:	f003 030c 	and.w	r3, r3, #12
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00c      	beq.n	800262a <_ftoa+0x422>
      width--;
 8002610:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002612:	3b01      	subs	r3, #1
 8002614:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002616:	e008      	b.n	800262a <_ftoa+0x422>
      buf[len++] = '0';
 8002618:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800261a:	1c5a      	adds	r2, r3, #1
 800261c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800261e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002622:	4413      	add	r3, r2
 8002624:	2230      	movs	r2, #48	; 0x30
 8002626:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800262a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800262c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800262e:	429a      	cmp	r2, r3
 8002630:	d202      	bcs.n	8002638 <_ftoa+0x430>
 8002632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002634:	2b1f      	cmp	r3, #31
 8002636:	d9ef      	bls.n	8002618 <_ftoa+0x410>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002638:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800263a:	2b1f      	cmp	r3, #31
 800263c:	d82a      	bhi.n	8002694 <_ftoa+0x48c>
    if (negative) {
 800263e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002642:	2b00      	cmp	r3, #0
 8002644:	d009      	beq.n	800265a <_ftoa+0x452>
      buf[len++] = '-';
 8002646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800264c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002650:	4413      	add	r3, r2
 8002652:	222d      	movs	r2, #45	; 0x2d
 8002654:	f803 2c48 	strb.w	r2, [r3, #-72]
 8002658:	e01c      	b.n	8002694 <_ftoa+0x48c>
    }
    else if (flags & FLAGS_PLUS) {
 800265a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d009      	beq.n	8002678 <_ftoa+0x470>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002664:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	65fa      	str	r2, [r7, #92]	; 0x5c
 800266a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800266e:	4413      	add	r3, r2
 8002670:	222b      	movs	r2, #43	; 0x2b
 8002672:	f803 2c48 	strb.w	r2, [r3, #-72]
 8002676:	e00d      	b.n	8002694 <_ftoa+0x48c>
    }
    else if (flags & FLAGS_SPACE) {
 8002678:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d008      	beq.n	8002694 <_ftoa+0x48c>
      buf[len++] = ' ';
 8002682:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002688:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800268c:	4413      	add	r3, r2
 800268e:	2220      	movs	r2, #32
 8002690:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002694:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002696:	9303      	str	r3, [sp, #12]
 8002698:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800269a:	9302      	str	r3, [sp, #8]
 800269c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800269e:	9301      	str	r3, [sp, #4]
 80026a0:	f107 0318 	add.w	r3, r7, #24
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	6939      	ldr	r1, [r7, #16]
 80026ac:	6978      	ldr	r0, [r7, #20]
 80026ae:	f7ff fba7 	bl	8001e00 <_out_rev>
 80026b2:	4603      	mov	r3, r0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3764      	adds	r7, #100	; 0x64
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd90      	pop	{r4, r7, pc}
 80026bc:	cccccccd 	.word	0xcccccccd
 80026c0:	66666667 	.word	0x66666667
 80026c4:	00000000 	.word	0x00000000

080026c8 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80026c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026cc:	b09d      	sub	sp, #116	; 0x74
 80026ce:	af06      	add	r7, sp, #24
 80026d0:	61f8      	str	r0, [r7, #28]
 80026d2:	61b9      	str	r1, [r7, #24]
 80026d4:	617a      	str	r2, [r7, #20]
 80026d6:	613b      	str	r3, [r7, #16]
 80026d8:	ed87 0b02 	vstr	d0, [r7, #8]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 80026dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026e4:	f7fe f998 	bl	8000a18 <__aeabi_dcmpeq>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d014      	beq.n	8002718 <_etoa+0x50>
 80026ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026f2:	4bc3      	ldr	r3, [pc, #780]	; (8002a00 <_etoa+0x338>)
 80026f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026f8:	f7fe f9b6 	bl	8000a68 <__aeabi_dcmpgt>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10a      	bne.n	8002718 <_etoa+0x50>
 8002702:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002706:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800270a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800270e:	f7fe f98d 	bl	8000a2c <__aeabi_dcmplt>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d012      	beq.n	800273e <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002718:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800271c:	9302      	str	r3, [sp, #8]
 800271e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002722:	9301      	str	r3, [sp, #4]
 8002724:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	ed97 0b02 	vldr	d0, [r7, #8]
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	69b9      	ldr	r1, [r7, #24]
 8002734:	69f8      	ldr	r0, [r7, #28]
 8002736:	f7ff fd67 	bl	8002208 <_ftoa>
 800273a:	4603      	mov	r3, r0
 800273c:	e245      	b.n	8002bca <_etoa+0x502>
  }

  // determine the sign
  const bool negative = value < 0;
 800273e:	2301      	movs	r3, #1
 8002740:	461e      	mov	r6, r3
 8002742:	f04f 0200 	mov.w	r2, #0
 8002746:	f04f 0300 	mov.w	r3, #0
 800274a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800274e:	f7fe f96d 	bl	8000a2c <__aeabi_dcmplt>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <_etoa+0x94>
 8002758:	2300      	movs	r3, #0
 800275a:	461e      	mov	r6, r3
 800275c:	f887 604b 	strb.w	r6, [r7, #75]	; 0x4b
  if (negative) {
 8002760:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002764:	2b00      	cmp	r3, #0
 8002766:	d005      	beq.n	8002774 <_etoa+0xac>
    value = -value;
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	60bb      	str	r3, [r7, #8]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002772:	60fb      	str	r3, [r7, #12]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8002774:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800277c:	2b00      	cmp	r3, #0
 800277e:	d102      	bne.n	8002786 <_etoa+0xbe>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002780:	2306      	movs	r3, #6
 8002782:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8002786:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800278a:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800278e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	0d0a      	lsrs	r2, r1, #20
 800279c:	2300      	movs	r3, #0
 800279e:	4613      	mov	r3, r2
 80027a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027a4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80027a8:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 80027aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027b2:	4994      	ldr	r1, [pc, #592]	; (8002a04 <_etoa+0x33c>)
 80027b4:	ea02 0400 	and.w	r4, r2, r0
 80027b8:	ea03 0501 	and.w	r5, r3, r1
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	4b91      	ldr	r3, [pc, #580]	; (8002a08 <_etoa+0x340>)
 80027c2:	ea44 0802 	orr.w	r8, r4, r2
 80027c6:	ea45 0903 	orr.w	r9, r5, r3
 80027ca:	e9c7 8908 	strd	r8, r9, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80027ce:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80027d0:	f7fd fe50 	bl	8000474 <__aeabi_i2d>
 80027d4:	a37e      	add	r3, pc, #504	; (adr r3, 80029d0 <_etoa+0x308>)
 80027d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027da:	f7fd feb5 	bl	8000548 <__aeabi_dmul>
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	4610      	mov	r0, r2
 80027e4:	4619      	mov	r1, r3
 80027e6:	a37c      	add	r3, pc, #496	; (adr r3, 80029d8 <_etoa+0x310>)
 80027e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ec:	f7fd fcf6 	bl	80001dc <__adddf3>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4614      	mov	r4, r2
 80027f6:	461d      	mov	r5, r3
 80027f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80027fc:	f04f 0200 	mov.w	r2, #0
 8002800:	4b82      	ldr	r3, [pc, #520]	; (8002a0c <_etoa+0x344>)
 8002802:	f7fd fce9 	bl	80001d8 <__aeabi_dsub>
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	4610      	mov	r0, r2
 800280c:	4619      	mov	r1, r3
 800280e:	a374      	add	r3, pc, #464	; (adr r3, 80029e0 <_etoa+0x318>)
 8002810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002814:	f7fd fe98 	bl	8000548 <__aeabi_dmul>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	4620      	mov	r0, r4
 800281e:	4629      	mov	r1, r5
 8002820:	f7fd fcdc 	bl	80001dc <__adddf3>
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	4610      	mov	r0, r2
 800282a:	4619      	mov	r1, r3
 800282c:	f7fe f926 	bl	8000a7c <__aeabi_d2iz>
 8002830:	4603      	mov	r3, r0
 8002832:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8002834:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002836:	f7fd fe1d 	bl	8000474 <__aeabi_i2d>
 800283a:	a36b      	add	r3, pc, #428	; (adr r3, 80029e8 <_etoa+0x320>)
 800283c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002840:	f7fd fe82 	bl	8000548 <__aeabi_dmul>
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	4610      	mov	r0, r2
 800284a:	4619      	mov	r1, r3
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	4b6f      	ldr	r3, [pc, #444]	; (8002a10 <_etoa+0x348>)
 8002852:	f7fd fcc3 	bl	80001dc <__adddf3>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	4610      	mov	r0, r2
 800285c:	4619      	mov	r1, r3
 800285e:	f7fe f90d 	bl	8000a7c <__aeabi_d2iz>
 8002862:	4603      	mov	r3, r0
 8002864:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8002866:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002868:	f7fd fe04 	bl	8000474 <__aeabi_i2d>
 800286c:	a360      	add	r3, pc, #384	; (adr r3, 80029f0 <_etoa+0x328>)
 800286e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002872:	f7fd fe69 	bl	8000548 <__aeabi_dmul>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	4614      	mov	r4, r2
 800287c:	461d      	mov	r5, r3
 800287e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002880:	f7fd fdf8 	bl	8000474 <__aeabi_i2d>
 8002884:	a35c      	add	r3, pc, #368	; (adr r3, 80029f8 <_etoa+0x330>)
 8002886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288a:	f7fd fe5d 	bl	8000548 <__aeabi_dmul>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	4620      	mov	r0, r4
 8002894:	4629      	mov	r1, r5
 8002896:	f7fd fc9f 	bl	80001d8 <__aeabi_dsub>
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  const double z2 = z * z;
 80028a2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80028a6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80028aa:	f7fd fe4d 	bl	8000548 <__aeabi_dmul>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 80028b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028b8:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80028bc:	4618      	mov	r0, r3
 80028be:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	f04f 0300 	mov.w	r3, #0
 80028ca:	0503      	lsls	r3, r0, #20
 80028cc:	2200      	movs	r2, #0
 80028ce:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80028d2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80028d6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	f7fd fc7d 	bl	80001dc <__adddf3>
 80028e2:	4602      	mov	r2, r0
 80028e4:	460b      	mov	r3, r1
 80028e6:	4690      	mov	r8, r2
 80028e8:	4699      	mov	r9, r3
 80028ea:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80028ee:	f04f 0000 	mov.w	r0, #0
 80028f2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80028f6:	f7fd fc6f 	bl	80001d8 <__aeabi_dsub>
 80028fa:	4602      	mov	r2, r0
 80028fc:	460b      	mov	r3, r1
 80028fe:	4692      	mov	sl, r2
 8002900:	469b      	mov	fp, r3
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	4b43      	ldr	r3, [pc, #268]	; (8002a14 <_etoa+0x34c>)
 8002908:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800290c:	f7fd ff46 	bl	800079c <__aeabi_ddiv>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4610      	mov	r0, r2
 8002916:	4619      	mov	r1, r3
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	4b3e      	ldr	r3, [pc, #248]	; (8002a18 <_etoa+0x350>)
 800291e:	f7fd fc5d 	bl	80001dc <__adddf3>
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800292a:	f7fd ff37 	bl	800079c <__aeabi_ddiv>
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	4610      	mov	r0, r2
 8002934:	4619      	mov	r1, r3
 8002936:	f04f 0200 	mov.w	r2, #0
 800293a:	4b38      	ldr	r3, [pc, #224]	; (8002a1c <_etoa+0x354>)
 800293c:	f7fd fc4e 	bl	80001dc <__adddf3>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002948:	f7fd ff28 	bl	800079c <__aeabi_ddiv>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4650      	mov	r0, sl
 8002952:	4659      	mov	r1, fp
 8002954:	f7fd fc42 	bl	80001dc <__adddf3>
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	4640      	mov	r0, r8
 800295e:	4649      	mov	r1, r9
 8002960:	f7fd ff1c 	bl	800079c <__aeabi_ddiv>
 8002964:	4602      	mov	r2, r0
 8002966:	460b      	mov	r3, r1
 8002968:	4610      	mov	r0, r2
 800296a:	4619      	mov	r1, r3
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	4b25      	ldr	r3, [pc, #148]	; (8002a08 <_etoa+0x340>)
 8002972:	f7fd fc33 	bl	80001dc <__adddf3>
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
 800297a:	4620      	mov	r0, r4
 800297c:	4629      	mov	r1, r5
 800297e:	f7fd fde3 	bl	8000548 <__aeabi_dmul>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 800298a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800298e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002992:	f7fe f84b 	bl	8000a2c <__aeabi_dcmplt>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00d      	beq.n	80029b8 <_etoa+0x2f0>
    expval--;
 800299c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800299e:	3b01      	subs	r3, #1
 80029a0:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 80029a2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <_etoa+0x350>)
 80029ac:	f7fd fef6 	bl	800079c <__aeabi_ddiv>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 80029b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ba:	2b63      	cmp	r3, #99	; 0x63
 80029bc:	dc30      	bgt.n	8002a20 <_etoa+0x358>
 80029be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c0:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80029c4:	db2c      	blt.n	8002a20 <_etoa+0x358>
 80029c6:	2304      	movs	r3, #4
 80029c8:	e02b      	b.n	8002a22 <_etoa+0x35a>
 80029ca:	bf00      	nop
 80029cc:	f3af 8000 	nop.w
 80029d0:	509f79fb 	.word	0x509f79fb
 80029d4:	3fd34413 	.word	0x3fd34413
 80029d8:	8b60c8b3 	.word	0x8b60c8b3
 80029dc:	3fc68a28 	.word	0x3fc68a28
 80029e0:	636f4361 	.word	0x636f4361
 80029e4:	3fd287a7 	.word	0x3fd287a7
 80029e8:	0979a371 	.word	0x0979a371
 80029ec:	400a934f 	.word	0x400a934f
 80029f0:	bbb55516 	.word	0xbbb55516
 80029f4:	40026bb1 	.word	0x40026bb1
 80029f8:	fefa39ef 	.word	0xfefa39ef
 80029fc:	3fe62e42 	.word	0x3fe62e42
 8002a00:	7fefffff 	.word	0x7fefffff
 8002a04:	000fffff 	.word	0x000fffff
 8002a08:	3ff00000 	.word	0x3ff00000
 8002a0c:	3ff80000 	.word	0x3ff80000
 8002a10:	3fe00000 	.word	0x3fe00000
 8002a14:	402c0000 	.word	0x402c0000
 8002a18:	40240000 	.word	0x40240000
 8002a1c:	40180000 	.word	0x40180000
 8002a20:	2305      	movs	r3, #5
 8002a22:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8002a24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d03d      	beq.n	8002aac <_etoa+0x3e4>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8002a30:	a369      	add	r3, pc, #420	; (adr r3, 8002bd8 <_etoa+0x510>)
 8002a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a3a:	f7fe f80b 	bl	8000a54 <__aeabi_dcmpge>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d024      	beq.n	8002a8e <_etoa+0x3c6>
 8002a44:	a366      	add	r3, pc, #408	; (adr r3, 8002be0 <_etoa+0x518>)
 8002a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a4e:	f7fd ffed 	bl	8000a2c <__aeabi_dcmplt>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d01a      	beq.n	8002a8e <_etoa+0x3c6>
      if ((int)prec > expval) {
 8002a58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	da07      	bge.n	8002a72 <_etoa+0x3aa>
        prec = (unsigned)((int)prec - expval - 1);
 8002a62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a70:	e002      	b.n	8002a78 <_etoa+0x3b0>
      }
      else {
        prec = 0;
 8002a72:	2300      	movs	r3, #0
 8002a74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8002a78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      // no characters in exponent
      minwidth = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	657b      	str	r3, [r7, #84]	; 0x54
 8002a8c:	e00e      	b.n	8002aac <_etoa+0x3e4>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8002a8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <_etoa+0x3e4>
 8002a96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d004      	beq.n	8002aac <_etoa+0x3e4>
        --prec;
 8002aa2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8002aac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 8002ab2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d904      	bls.n	8002ac6 <_etoa+0x3fe>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8002abc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002abe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ac4:	e001      	b.n	8002aca <_etoa+0x402>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8002aca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d004      	beq.n	8002ae0 <_etoa+0x418>
 8002ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <_etoa+0x418>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 8002ae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d009      	beq.n	8002afa <_etoa+0x432>
    value /= conv.F;
 8002ae6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002aea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002aee:	f7fd fe55 	bl	800079c <__aeabi_ddiv>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	e9c7 2302 	strd	r2, r3, [r7, #8]
  }

  // output the floating part
  const size_t start_idx = idx;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8002afe:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d006      	beq.n	8002b14 <_etoa+0x44c>
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	603b      	str	r3, [r7, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002b10:	607b      	str	r3, [r7, #4]
 8002b12:	e003      	b.n	8002b1c <_etoa+0x454>
 8002b14:	ed97 7b02 	vldr	d7, [r7, #8]
 8002b18:	ed87 7b00 	vstr	d7, [r7]
 8002b1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b24:	9302      	str	r3, [sp, #8]
 8002b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b28:	9301      	str	r3, [sp, #4]
 8002b2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	ed97 0b00 	vldr	d0, [r7]
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	69b9      	ldr	r1, [r7, #24]
 8002b3a:	69f8      	ldr	r0, [r7, #28]
 8002b3c:	f7ff fb64 	bl	8002208 <_ftoa>
 8002b40:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 8002b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d03f      	beq.n	8002bc8 <_etoa+0x500>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8002b48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b4c:	f003 0320 	and.w	r3, r3, #32
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <_etoa+0x490>
 8002b54:	2045      	movs	r0, #69	; 0x45
 8002b56:	e000      	b.n	8002b5a <_etoa+0x492>
 8002b58:	2065      	movs	r0, #101	; 0x65
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	1c53      	adds	r3, r2, #1
 8002b5e:	617b      	str	r3, [r7, #20]
 8002b60:	69fc      	ldr	r4, [r7, #28]
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	69b9      	ldr	r1, [r7, #24]
 8002b66:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8002b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	bfb8      	it	lt
 8002b6e:	425b      	neglt	r3, r3
 8002b70:	4618      	mov	r0, r3
 8002b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b74:	0fdb      	lsrs	r3, r3, #31
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002b7a:	3a01      	subs	r2, #1
 8002b7c:	2105      	movs	r1, #5
 8002b7e:	9105      	str	r1, [sp, #20]
 8002b80:	9204      	str	r2, [sp, #16]
 8002b82:	2200      	movs	r2, #0
 8002b84:	9203      	str	r2, [sp, #12]
 8002b86:	220a      	movs	r2, #10
 8002b88:	9202      	str	r2, [sp, #8]
 8002b8a:	9301      	str	r3, [sp, #4]
 8002b8c:	9000      	str	r0, [sp, #0]
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	69b9      	ldr	r1, [r7, #24]
 8002b94:	69f8      	ldr	r0, [r7, #28]
 8002b96:	f7ff fa5f 	bl	8002058 <_ntoa_long>
 8002b9a:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8002b9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00f      	beq.n	8002bc8 <_etoa+0x500>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8002ba8:	e007      	b.n	8002bba <_etoa+0x4f2>
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	1c53      	adds	r3, r2, #1
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	69fc      	ldr	r4, [r7, #28]
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	69b9      	ldr	r1, [r7, #24]
 8002bb6:	2020      	movs	r0, #32
 8002bb8:	47a0      	blx	r4
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d8f0      	bhi.n	8002baa <_etoa+0x4e2>
    }
  }
  return idx;
 8002bc8:	697b      	ldr	r3, [r7, #20]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	375c      	adds	r7, #92	; 0x5c
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bd4:	f3af 8000 	nop.w
 8002bd8:	eb1c432d 	.word	0xeb1c432d
 8002bdc:	3f1a36e2 	.word	0x3f1a36e2
 8002be0:	00000000 	.word	0x00000000
 8002be4:	412e8480 	.word	0x412e8480

08002be8 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8002be8:	b5b0      	push	{r4, r5, r7, lr}
 8002bea:	b0a0      	sub	sp, #128	; 0x80
 8002bec:	af0a      	add	r7, sp, #40	; 0x28
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
 8002bf4:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f040 8494 	bne.w	800352a <_vsnprintf+0x942>
    // use null output function
    out = _out_null;
 8002c02:	4ba0      	ldr	r3, [pc, #640]	; (8002e84 <_vsnprintf+0x29c>)
 8002c04:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 8002c06:	f000 bc90 	b.w	800352a <_vsnprintf+0x942>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b25      	cmp	r3, #37	; 0x25
 8002c10:	d00d      	beq.n	8002c2e <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	7818      	ldrb	r0, [r3, #0]
 8002c16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c18:	1c53      	adds	r3, r2, #1
 8002c1a:	647b      	str	r3, [r7, #68]	; 0x44
 8002c1c:	68fc      	ldr	r4, [r7, #12]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68b9      	ldr	r1, [r7, #8]
 8002c22:	47a0      	blx	r4
      format++;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	3301      	adds	r3, #1
 8002c28:	603b      	str	r3, [r7, #0]
      continue;
 8002c2a:	f000 bc7e 	b.w	800352a <_vsnprintf+0x942>
    }
    else {
      // yes, evaluate it
      format++;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	3301      	adds	r3, #1
 8002c32:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	3b20      	subs	r3, #32
 8002c3e:	2b10      	cmp	r3, #16
 8002c40:	d856      	bhi.n	8002cf0 <_vsnprintf+0x108>
 8002c42:	a201      	add	r2, pc, #4	; (adr r2, 8002c48 <_vsnprintf+0x60>)
 8002c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c48:	08002cc9 	.word	0x08002cc9
 8002c4c:	08002cf1 	.word	0x08002cf1
 8002c50:	08002cf1 	.word	0x08002cf1
 8002c54:	08002cdd 	.word	0x08002cdd
 8002c58:	08002cf1 	.word	0x08002cf1
 8002c5c:	08002cf1 	.word	0x08002cf1
 8002c60:	08002cf1 	.word	0x08002cf1
 8002c64:	08002cf1 	.word	0x08002cf1
 8002c68:	08002cf1 	.word	0x08002cf1
 8002c6c:	08002cf1 	.word	0x08002cf1
 8002c70:	08002cf1 	.word	0x08002cf1
 8002c74:	08002cb5 	.word	0x08002cb5
 8002c78:	08002cf1 	.word	0x08002cf1
 8002c7c:	08002ca1 	.word	0x08002ca1
 8002c80:	08002cf1 	.word	0x08002cf1
 8002c84:	08002cf1 	.word	0x08002cf1
 8002c88:	08002c8d 	.word	0x08002c8d
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8002c8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	657b      	str	r3, [r7, #84]	; 0x54
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	3301      	adds	r3, #1
 8002c98:	603b      	str	r3, [r7, #0]
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c9e:	e02a      	b.n	8002cf6 <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8002ca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ca2:	f043 0302 	orr.w	r3, r3, #2
 8002ca6:	657b      	str	r3, [r7, #84]	; 0x54
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	3301      	adds	r3, #1
 8002cac:	603b      	str	r3, [r7, #0]
 8002cae:	2301      	movs	r3, #1
 8002cb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cb2:	e020      	b.n	8002cf6 <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8002cb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cb6:	f043 0304 	orr.w	r3, r3, #4
 8002cba:	657b      	str	r3, [r7, #84]	; 0x54
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	603b      	str	r3, [r7, #0]
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cc6:	e016      	b.n	8002cf6 <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8002cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cca:	f043 0308 	orr.w	r3, r3, #8
 8002cce:	657b      	str	r3, [r7, #84]	; 0x54
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	603b      	str	r3, [r7, #0]
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cda:	e00c      	b.n	8002cf6 <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8002cdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cde:	f043 0310 	orr.w	r3, r3, #16
 8002ce2:	657b      	str	r3, [r7, #84]	; 0x54
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	603b      	str	r3, [r7, #0]
 8002cea:	2301      	movs	r3, #1
 8002cec:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cee:	e002      	b.n	8002cf6 <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cf4:	bf00      	nop
      }
    } while (n);
 8002cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d19d      	bne.n	8002c38 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff f840 	bl	8001d8a <_is_digit>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <_vsnprintf+0x134>
      width = _atoi(&format);
 8002d10:	463b      	mov	r3, r7
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff f850 	bl	8001db8 <_atoi>
 8002d18:	6538      	str	r0, [r7, #80]	; 0x50
 8002d1a:	e018      	b.n	8002d4e <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b2a      	cmp	r3, #42	; 0x2a
 8002d22:	d114      	bne.n	8002d4e <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 8002d24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d26:	1d1a      	adds	r2, r3, #4
 8002d28:	66ba      	str	r2, [r7, #104]	; 0x68
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 8002d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	da07      	bge.n	8002d44 <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 8002d34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d36:	f043 0302 	orr.w	r3, r3, #2
 8002d3a:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 8002d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3e:	425b      	negs	r3, r3
 8002d40:	653b      	str	r3, [r7, #80]	; 0x50
 8002d42:	e001      	b.n	8002d48 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 8002d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d46:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b2e      	cmp	r3, #46	; 0x2e
 8002d58:	d124      	bne.n	8002da4 <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 8002d5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d60:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	3301      	adds	r3, #1
 8002d66:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff f80c 	bl	8001d8a <_is_digit>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d005      	beq.n	8002d84 <_vsnprintf+0x19c>
        precision = _atoi(&format);
 8002d78:	463b      	mov	r3, r7
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff f81c 	bl	8001db8 <_atoi>
 8002d80:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002d82:	e00f      	b.n	8002da4 <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	2b2a      	cmp	r3, #42	; 0x2a
 8002d8a:	d10b      	bne.n	8002da4 <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 8002d8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d8e:	1d1a      	adds	r2, r3, #4
 8002d90:	66ba      	str	r2, [r7, #104]	; 0x68
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8002d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d98:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	3301      	adds	r3, #1
 8002da2:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	3b68      	subs	r3, #104	; 0x68
 8002daa:	2b12      	cmp	r3, #18
 8002dac:	d866      	bhi.n	8002e7c <_vsnprintf+0x294>
 8002dae:	a201      	add	r2, pc, #4	; (adr r2, 8002db4 <_vsnprintf+0x1cc>)
 8002db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db4:	08002e27 	.word	0x08002e27
 8002db8:	08002e7d 	.word	0x08002e7d
 8002dbc:	08002e5d 	.word	0x08002e5d
 8002dc0:	08002e7d 	.word	0x08002e7d
 8002dc4:	08002e01 	.word	0x08002e01
 8002dc8:	08002e7d 	.word	0x08002e7d
 8002dcc:	08002e7d 	.word	0x08002e7d
 8002dd0:	08002e7d 	.word	0x08002e7d
 8002dd4:	08002e7d 	.word	0x08002e7d
 8002dd8:	08002e7d 	.word	0x08002e7d
 8002ddc:	08002e7d 	.word	0x08002e7d
 8002de0:	08002e7d 	.word	0x08002e7d
 8002de4:	08002e4d 	.word	0x08002e4d
 8002de8:	08002e7d 	.word	0x08002e7d
 8002dec:	08002e7d 	.word	0x08002e7d
 8002df0:	08002e7d 	.word	0x08002e7d
 8002df4:	08002e7d 	.word	0x08002e7d
 8002df8:	08002e7d 	.word	0x08002e7d
 8002dfc:	08002e6d 	.word	0x08002e6d
      case 'l' :
        flags |= FLAGS_LONG;
 8002e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e06:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b6c      	cmp	r3, #108	; 0x6c
 8002e14:	d134      	bne.n	8002e80 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 8002e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e1c:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	3301      	adds	r3, #1
 8002e22:	603b      	str	r3, [r7, #0]
        }
        break;
 8002e24:	e02c      	b.n	8002e80 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 8002e26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e2c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	3301      	adds	r3, #1
 8002e32:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b68      	cmp	r3, #104	; 0x68
 8002e3a:	d125      	bne.n	8002e88 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 8002e3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e42:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	3301      	adds	r3, #1
 8002e48:	603b      	str	r3, [r7, #0]
        }
        break;
 8002e4a:	e01d      	b.n	8002e88 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e52:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	3301      	adds	r3, #1
 8002e58:	603b      	str	r3, [r7, #0]
        break;
 8002e5a:	e016      	b.n	8002e8a <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002e5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e62:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	3301      	adds	r3, #1
 8002e68:	603b      	str	r3, [r7, #0]
        break;
 8002e6a:	e00e      	b.n	8002e8a <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002e6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e72:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	3301      	adds	r3, #1
 8002e78:	603b      	str	r3, [r7, #0]
        break;
 8002e7a:	e006      	b.n	8002e8a <_vsnprintf+0x2a2>
      default :
        break;
 8002e7c:	bf00      	nop
 8002e7e:	e004      	b.n	8002e8a <_vsnprintf+0x2a2>
        break;
 8002e80:	bf00      	nop
 8002e82:	e002      	b.n	8002e8a <_vsnprintf+0x2a2>
 8002e84:	08001d35 	.word	0x08001d35
        break;
 8002e88:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	3b25      	subs	r3, #37	; 0x25
 8002e90:	2b53      	cmp	r3, #83	; 0x53
 8002e92:	f200 833d 	bhi.w	8003510 <_vsnprintf+0x928>
 8002e96:	a201      	add	r2, pc, #4	; (adr r2, 8002e9c <_vsnprintf+0x2b4>)
 8002e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e9c:	080034f9 	.word	0x080034f9
 8002ea0:	08003511 	.word	0x08003511
 8002ea4:	08003511 	.word	0x08003511
 8002ea8:	08003511 	.word	0x08003511
 8002eac:	08003511 	.word	0x08003511
 8002eb0:	08003511 	.word	0x08003511
 8002eb4:	08003511 	.word	0x08003511
 8002eb8:	08003511 	.word	0x08003511
 8002ebc:	08003511 	.word	0x08003511
 8002ec0:	08003511 	.word	0x08003511
 8002ec4:	08003511 	.word	0x08003511
 8002ec8:	08003511 	.word	0x08003511
 8002ecc:	08003511 	.word	0x08003511
 8002ed0:	08003511 	.word	0x08003511
 8002ed4:	08003511 	.word	0x08003511
 8002ed8:	08003511 	.word	0x08003511
 8002edc:	08003511 	.word	0x08003511
 8002ee0:	08003511 	.word	0x08003511
 8002ee4:	08003511 	.word	0x08003511
 8002ee8:	08003511 	.word	0x08003511
 8002eec:	08003511 	.word	0x08003511
 8002ef0:	08003511 	.word	0x08003511
 8002ef4:	08003511 	.word	0x08003511
 8002ef8:	08003511 	.word	0x08003511
 8002efc:	08003511 	.word	0x08003511
 8002f00:	08003511 	.word	0x08003511
 8002f04:	08003511 	.word	0x08003511
 8002f08:	08003511 	.word	0x08003511
 8002f0c:	08003511 	.word	0x08003511
 8002f10:	08003511 	.word	0x08003511
 8002f14:	08003511 	.word	0x08003511
 8002f18:	08003511 	.word	0x08003511
 8002f1c:	080032c7 	.word	0x080032c7
 8002f20:	0800327b 	.word	0x0800327b
 8002f24:	080032c7 	.word	0x080032c7
 8002f28:	08003511 	.word	0x08003511
 8002f2c:	08003511 	.word	0x08003511
 8002f30:	08003511 	.word	0x08003511
 8002f34:	08003511 	.word	0x08003511
 8002f38:	08003511 	.word	0x08003511
 8002f3c:	08003511 	.word	0x08003511
 8002f40:	08003511 	.word	0x08003511
 8002f44:	08003511 	.word	0x08003511
 8002f48:	08003511 	.word	0x08003511
 8002f4c:	08003511 	.word	0x08003511
 8002f50:	08003511 	.word	0x08003511
 8002f54:	08003511 	.word	0x08003511
 8002f58:	08003511 	.word	0x08003511
 8002f5c:	08003511 	.word	0x08003511
 8002f60:	08003511 	.word	0x08003511
 8002f64:	08003511 	.word	0x08003511
 8002f68:	08002fed 	.word	0x08002fed
 8002f6c:	08003511 	.word	0x08003511
 8002f70:	08003511 	.word	0x08003511
 8002f74:	08003511 	.word	0x08003511
 8002f78:	08003511 	.word	0x08003511
 8002f7c:	08003511 	.word	0x08003511
 8002f80:	08003511 	.word	0x08003511
 8002f84:	08003511 	.word	0x08003511
 8002f88:	08003511 	.word	0x08003511
 8002f8c:	08003511 	.word	0x08003511
 8002f90:	08002fed 	.word	0x08002fed
 8002f94:	08003333 	.word	0x08003333
 8002f98:	08002fed 	.word	0x08002fed
 8002f9c:	080032c7 	.word	0x080032c7
 8002fa0:	0800327b 	.word	0x0800327b
 8002fa4:	080032c7 	.word	0x080032c7
 8002fa8:	08003511 	.word	0x08003511
 8002fac:	08002fed 	.word	0x08002fed
 8002fb0:	08003511 	.word	0x08003511
 8002fb4:	08003511 	.word	0x08003511
 8002fb8:	08003511 	.word	0x08003511
 8002fbc:	08003511 	.word	0x08003511
 8002fc0:	08003511 	.word	0x08003511
 8002fc4:	08002fed 	.word	0x08002fed
 8002fc8:	0800346b 	.word	0x0800346b
 8002fcc:	08003511 	.word	0x08003511
 8002fd0:	08003511 	.word	0x08003511
 8002fd4:	080033a7 	.word	0x080033a7
 8002fd8:	08003511 	.word	0x08003511
 8002fdc:	08002fed 	.word	0x08002fed
 8002fe0:	08003511 	.word	0x08003511
 8002fe4:	08003511 	.word	0x08003511
 8002fe8:	08002fed 	.word	0x08002fed
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b78      	cmp	r3, #120	; 0x78
 8002ff2:	d003      	beq.n	8002ffc <_vsnprintf+0x414>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b58      	cmp	r3, #88	; 0x58
 8002ffa:	d102      	bne.n	8003002 <_vsnprintf+0x41a>
          base = 16U;
 8002ffc:	2310      	movs	r3, #16
 8002ffe:	643b      	str	r3, [r7, #64]	; 0x40
 8003000:	e013      	b.n	800302a <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	2b6f      	cmp	r3, #111	; 0x6f
 8003008:	d102      	bne.n	8003010 <_vsnprintf+0x428>
          base =  8U;
 800300a:	2308      	movs	r3, #8
 800300c:	643b      	str	r3, [r7, #64]	; 0x40
 800300e:	e00c      	b.n	800302a <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b62      	cmp	r3, #98	; 0x62
 8003016:	d102      	bne.n	800301e <_vsnprintf+0x436>
          base =  2U;
 8003018:	2302      	movs	r3, #2
 800301a:	643b      	str	r3, [r7, #64]	; 0x40
 800301c:	e005      	b.n	800302a <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 800301e:	230a      	movs	r3, #10
 8003020:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8003022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003024:	f023 0310 	bic.w	r3, r3, #16
 8003028:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	2b58      	cmp	r3, #88	; 0x58
 8003030:	d103      	bne.n	800303a <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 8003032:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003034:	f043 0320 	orr.w	r3, r3, #32
 8003038:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b69      	cmp	r3, #105	; 0x69
 8003040:	d007      	beq.n	8003052 <_vsnprintf+0x46a>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	2b64      	cmp	r3, #100	; 0x64
 8003048:	d003      	beq.n	8003052 <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800304a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800304c:	f023 030c 	bic.w	r3, r3, #12
 8003050:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8003052:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 800305c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800305e:	f023 0301 	bic.w	r3, r3, #1
 8003062:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b69      	cmp	r3, #105	; 0x69
 800306a:	d004      	beq.n	8003076 <_vsnprintf+0x48e>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2b64      	cmp	r3, #100	; 0x64
 8003072:	f040 808e 	bne.w	8003192 <_vsnprintf+0x5aa>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8003076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003078:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800307c:	2b00      	cmp	r3, #0
 800307e:	d02f      	beq.n	80030e0 <_vsnprintf+0x4f8>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8003080:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003082:	3307      	adds	r3, #7
 8003084:	f023 0307 	bic.w	r3, r3, #7
 8003088:	f103 0208 	add.w	r2, r3, #8
 800308c:	66ba      	str	r2, [r7, #104]	; 0x68
 800308e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003092:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003096:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800309a:	2a00      	cmp	r2, #0
 800309c:	f173 0100 	sbcs.w	r1, r3, #0
 80030a0:	da02      	bge.n	80030a8 <_vsnprintf+0x4c0>
 80030a2:	4252      	negs	r2, r2
 80030a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80030a8:	4610      	mov	r0, r2
 80030aa:	4619      	mov	r1, r3
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	0fdb      	lsrs	r3, r3, #31
 80030b0:	b2dc      	uxtb	r4, r3
 80030b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030b4:	461a      	mov	r2, r3
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 80030bc:	9508      	str	r5, [sp, #32]
 80030be:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 80030c0:	9507      	str	r5, [sp, #28]
 80030c2:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 80030c4:	9506      	str	r5, [sp, #24]
 80030c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80030ca:	9402      	str	r4, [sp, #8]
 80030cc:	e9cd 0100 	strd	r0, r1, [sp]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030d4:	68b9      	ldr	r1, [r7, #8]
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f7ff f825 	bl	8002126 <_ntoa_long_long>
 80030dc:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 80030de:	e0c8      	b.n	8003272 <_vsnprintf+0x68a>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80030e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d01e      	beq.n	8003128 <_vsnprintf+0x540>
            const long value = va_arg(va, long);
 80030ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030ec:	1d1a      	adds	r2, r3, #4
 80030ee:	66ba      	str	r2, [r7, #104]	; 0x68
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	bfb8      	it	lt
 80030fa:	425b      	neglt	r3, r3
 80030fc:	4619      	mov	r1, r3
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	0fdb      	lsrs	r3, r3, #31
 8003102:	b2db      	uxtb	r3, r3
 8003104:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003106:	9205      	str	r2, [sp, #20]
 8003108:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800310a:	9204      	str	r2, [sp, #16]
 800310c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800310e:	9203      	str	r2, [sp, #12]
 8003110:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003112:	9202      	str	r2, [sp, #8]
 8003114:	9301      	str	r3, [sp, #4]
 8003116:	9100      	str	r1, [sp, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800311c:	68b9      	ldr	r1, [r7, #8]
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f7fe ff9a 	bl	8002058 <_ntoa_long>
 8003124:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8003126:	e0a4      	b.n	8003272 <_vsnprintf+0x68a>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8003128:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800312a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312e:	2b00      	cmp	r3, #0
 8003130:	d005      	beq.n	800313e <_vsnprintf+0x556>
 8003132:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003134:	1d1a      	adds	r2, r3, #4
 8003136:	66ba      	str	r2, [r7, #104]	; 0x68
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	b2db      	uxtb	r3, r3
 800313c:	e00e      	b.n	800315c <_vsnprintf+0x574>
 800313e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <_vsnprintf+0x56c>
 8003148:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800314a:	1d1a      	adds	r2, r3, #4
 800314c:	66ba      	str	r2, [r7, #104]	; 0x68
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	b21b      	sxth	r3, r3
 8003152:	e003      	b.n	800315c <_vsnprintf+0x574>
 8003154:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003156:	1d1a      	adds	r2, r3, #4
 8003158:	66ba      	str	r2, [r7, #104]	; 0x68
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	2b00      	cmp	r3, #0
 8003162:	bfb8      	it	lt
 8003164:	425b      	neglt	r3, r3
 8003166:	4619      	mov	r1, r3
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	0fdb      	lsrs	r3, r3, #31
 800316c:	b2db      	uxtb	r3, r3
 800316e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003170:	9205      	str	r2, [sp, #20]
 8003172:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003174:	9204      	str	r2, [sp, #16]
 8003176:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003178:	9203      	str	r2, [sp, #12]
 800317a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800317c:	9202      	str	r2, [sp, #8]
 800317e:	9301      	str	r3, [sp, #4]
 8003180:	9100      	str	r1, [sp, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003186:	68b9      	ldr	r1, [r7, #8]
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f7fe ff65 	bl	8002058 <_ntoa_long>
 800318e:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8003190:	e06f      	b.n	8003272 <_vsnprintf+0x68a>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8003192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003194:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003198:	2b00      	cmp	r3, #0
 800319a:	d020      	beq.n	80031de <_vsnprintf+0x5f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800319c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800319e:	3307      	adds	r3, #7
 80031a0:	f023 0307 	bic.w	r3, r3, #7
 80031a4:	f103 0208 	add.w	r2, r3, #8
 80031a8:	66ba      	str	r2, [r7, #104]	; 0x68
 80031aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80031b0:	4608      	mov	r0, r1
 80031b2:	f04f 0100 	mov.w	r1, #0
 80031b6:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 80031b8:	9408      	str	r4, [sp, #32]
 80031ba:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80031bc:	9407      	str	r4, [sp, #28]
 80031be:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 80031c0:	9406      	str	r4, [sp, #24]
 80031c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80031c6:	2100      	movs	r1, #0
 80031c8:	9102      	str	r1, [sp, #8]
 80031ca:	e9cd 2300 	strd	r2, r3, [sp]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031d2:	68b9      	ldr	r1, [r7, #8]
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f7fe ffa6 	bl	8002126 <_ntoa_long_long>
 80031da:	6478      	str	r0, [r7, #68]	; 0x44
 80031dc:	e049      	b.n	8003272 <_vsnprintf+0x68a>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80031de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d016      	beq.n	8003216 <_vsnprintf+0x62e>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80031e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031ea:	1d1a      	adds	r2, r3, #4
 80031ec:	66ba      	str	r2, [r7, #104]	; 0x68
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80031f2:	9205      	str	r2, [sp, #20]
 80031f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80031f6:	9204      	str	r2, [sp, #16]
 80031f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031fa:	9203      	str	r2, [sp, #12]
 80031fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80031fe:	9202      	str	r2, [sp, #8]
 8003200:	2200      	movs	r2, #0
 8003202:	9201      	str	r2, [sp, #4]
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800320a:	68b9      	ldr	r1, [r7, #8]
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f7fe ff23 	bl	8002058 <_ntoa_long>
 8003212:	6478      	str	r0, [r7, #68]	; 0x44
 8003214:	e02d      	b.n	8003272 <_vsnprintf+0x68a>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8003216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800321c:	2b00      	cmp	r3, #0
 800321e:	d005      	beq.n	800322c <_vsnprintf+0x644>
 8003220:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003222:	1d1a      	adds	r2, r3, #4
 8003224:	66ba      	str	r2, [r7, #104]	; 0x68
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	b2db      	uxtb	r3, r3
 800322a:	e00e      	b.n	800324a <_vsnprintf+0x662>
 800322c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800322e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003232:	2b00      	cmp	r3, #0
 8003234:	d005      	beq.n	8003242 <_vsnprintf+0x65a>
 8003236:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003238:	1d1a      	adds	r2, r3, #4
 800323a:	66ba      	str	r2, [r7, #104]	; 0x68
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	b29b      	uxth	r3, r3
 8003240:	e003      	b.n	800324a <_vsnprintf+0x662>
 8003242:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003244:	1d1a      	adds	r2, r3, #4
 8003246:	66ba      	str	r2, [r7, #104]	; 0x68
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800324c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800324e:	9305      	str	r3, [sp, #20]
 8003250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003252:	9304      	str	r3, [sp, #16]
 8003254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003256:	9303      	str	r3, [sp, #12]
 8003258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800325a:	9302      	str	r3, [sp, #8]
 800325c:	2300      	movs	r3, #0
 800325e:	9301      	str	r3, [sp, #4]
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003268:	68b9      	ldr	r1, [r7, #8]
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f7fe fef4 	bl	8002058 <_ntoa_long>
 8003270:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	3301      	adds	r3, #1
 8003276:	603b      	str	r3, [r7, #0]
        break;
 8003278:	e157      	b.n	800352a <_vsnprintf+0x942>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	2b46      	cmp	r3, #70	; 0x46
 8003280:	d103      	bne.n	800328a <_vsnprintf+0x6a2>
 8003282:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003284:	f043 0320 	orr.w	r3, r3, #32
 8003288:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800328a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800328c:	3307      	adds	r3, #7
 800328e:	f023 0307 	bic.w	r3, r3, #7
 8003292:	f103 0208 	add.w	r2, r3, #8
 8003296:	66ba      	str	r2, [r7, #104]	; 0x68
 8003298:	ed93 7b00 	vldr	d7, [r3]
 800329c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800329e:	9302      	str	r3, [sp, #8]
 80032a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032a2:	9301      	str	r3, [sp, #4]
 80032a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	eeb0 0a47 	vmov.f32	s0, s14
 80032ac:	eef0 0a67 	vmov.f32	s1, s15
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032b4:	68b9      	ldr	r1, [r7, #8]
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f7fe ffa6 	bl	8002208 <_ftoa>
 80032bc:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	3301      	adds	r3, #1
 80032c2:	603b      	str	r3, [r7, #0]
        break;
 80032c4:	e131      	b.n	800352a <_vsnprintf+0x942>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2b67      	cmp	r3, #103	; 0x67
 80032cc:	d003      	beq.n	80032d6 <_vsnprintf+0x6ee>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2b47      	cmp	r3, #71	; 0x47
 80032d4:	d103      	bne.n	80032de <_vsnprintf+0x6f6>
 80032d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032dc:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b45      	cmp	r3, #69	; 0x45
 80032e4:	d003      	beq.n	80032ee <_vsnprintf+0x706>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b47      	cmp	r3, #71	; 0x47
 80032ec:	d103      	bne.n	80032f6 <_vsnprintf+0x70e>
 80032ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032f0:	f043 0320 	orr.w	r3, r3, #32
 80032f4:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80032f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032f8:	3307      	adds	r3, #7
 80032fa:	f023 0307 	bic.w	r3, r3, #7
 80032fe:	f103 0208 	add.w	r2, r3, #8
 8003302:	66ba      	str	r2, [r7, #104]	; 0x68
 8003304:	ed93 7b00 	vldr	d7, [r3]
 8003308:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800330a:	9302      	str	r3, [sp, #8]
 800330c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800330e:	9301      	str	r3, [sp, #4]
 8003310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	eeb0 0a47 	vmov.f32	s0, s14
 8003318:	eef0 0a67 	vmov.f32	s1, s15
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003320:	68b9      	ldr	r1, [r7, #8]
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f7ff f9d0 	bl	80026c8 <_etoa>
 8003328:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	3301      	adds	r3, #1
 800332e:	603b      	str	r3, [r7, #0]
        break;
 8003330:	e0fb      	b.n	800352a <_vsnprintf+0x942>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8003332:	2301      	movs	r3, #1
 8003334:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8003336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10e      	bne.n	800335e <_vsnprintf+0x776>
          while (l++ < width) {
 8003340:	e007      	b.n	8003352 <_vsnprintf+0x76a>
            out(' ', buffer, idx++, maxlen);
 8003342:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003344:	1c53      	adds	r3, r2, #1
 8003346:	647b      	str	r3, [r7, #68]	; 0x44
 8003348:	68fc      	ldr	r4, [r7, #12]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68b9      	ldr	r1, [r7, #8]
 800334e:	2020      	movs	r0, #32
 8003350:	47a0      	blx	r4
          while (l++ < width) {
 8003352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003354:	1c5a      	adds	r2, r3, #1
 8003356:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003358:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800335a:	429a      	cmp	r2, r3
 800335c:	d8f1      	bhi.n	8003342 <_vsnprintf+0x75a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800335e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003360:	1d1a      	adds	r2, r3, #4
 8003362:	66ba      	str	r2, [r7, #104]	; 0x68
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	b2d8      	uxtb	r0, r3
 8003368:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800336a:	1c53      	adds	r3, r2, #1
 800336c:	647b      	str	r3, [r7, #68]	; 0x44
 800336e:	68fc      	ldr	r4, [r7, #12]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68b9      	ldr	r1, [r7, #8]
 8003374:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8003376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00e      	beq.n	800339e <_vsnprintf+0x7b6>
          while (l++ < width) {
 8003380:	e007      	b.n	8003392 <_vsnprintf+0x7aa>
            out(' ', buffer, idx++, maxlen);
 8003382:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003384:	1c53      	adds	r3, r2, #1
 8003386:	647b      	str	r3, [r7, #68]	; 0x44
 8003388:	68fc      	ldr	r4, [r7, #12]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68b9      	ldr	r1, [r7, #8]
 800338e:	2020      	movs	r0, #32
 8003390:	47a0      	blx	r4
          while (l++ < width) {
 8003392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003394:	1c5a      	adds	r2, r3, #1
 8003396:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003398:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800339a:	429a      	cmp	r2, r3
 800339c:	d8f1      	bhi.n	8003382 <_vsnprintf+0x79a>
          }
        }
        format++;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	3301      	adds	r3, #1
 80033a2:	603b      	str	r3, [r7, #0]
        break;
 80033a4:	e0c1      	b.n	800352a <_vsnprintf+0x942>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 80033a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033a8:	1d1a      	adds	r2, r3, #4
 80033aa:	66ba      	str	r2, [r7, #104]	; 0x68
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80033b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <_vsnprintf+0x7d2>
 80033b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033b8:	e001      	b.n	80033be <_vsnprintf+0x7d6>
 80033ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033be:	4619      	mov	r1, r3
 80033c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80033c2:	f7fe fcc5 	bl	8001d50 <_strnlen_s>
 80033c6:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 80033c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d005      	beq.n	80033de <_vsnprintf+0x7f6>
          l = (l < precision ? l : precision);
 80033d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033d6:	4293      	cmp	r3, r2
 80033d8:	bf28      	it	cs
 80033da:	4613      	movcs	r3, r2
 80033dc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 80033de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d11a      	bne.n	800341e <_vsnprintf+0x836>
          while (l++ < width) {
 80033e8:	e007      	b.n	80033fa <_vsnprintf+0x812>
            out(' ', buffer, idx++, maxlen);
 80033ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033ec:	1c53      	adds	r3, r2, #1
 80033ee:	647b      	str	r3, [r7, #68]	; 0x44
 80033f0:	68fc      	ldr	r4, [r7, #12]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68b9      	ldr	r1, [r7, #8]
 80033f6:	2020      	movs	r0, #32
 80033f8:	47a0      	blx	r4
          while (l++ < width) {
 80033fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033fc:	1c5a      	adds	r2, r3, #1
 80033fe:	637a      	str	r2, [r7, #52]	; 0x34
 8003400:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003402:	429a      	cmp	r2, r3
 8003404:	d8f1      	bhi.n	80033ea <_vsnprintf+0x802>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003406:	e00a      	b.n	800341e <_vsnprintf+0x836>
          out(*(p++), buffer, idx++, maxlen);
 8003408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	63ba      	str	r2, [r7, #56]	; 0x38
 800340e:	7818      	ldrb	r0, [r3, #0]
 8003410:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003412:	1c53      	adds	r3, r2, #1
 8003414:	647b      	str	r3, [r7, #68]	; 0x44
 8003416:	68fc      	ldr	r4, [r7, #12]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68b9      	ldr	r1, [r7, #8]
 800341c:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800341e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d009      	beq.n	800343a <_vsnprintf+0x852>
 8003426:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0eb      	beq.n	8003408 <_vsnprintf+0x820>
 8003430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003432:	1e5a      	subs	r2, r3, #1
 8003434:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1e6      	bne.n	8003408 <_vsnprintf+0x820>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800343a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00e      	beq.n	8003462 <_vsnprintf+0x87a>
          while (l++ < width) {
 8003444:	e007      	b.n	8003456 <_vsnprintf+0x86e>
            out(' ', buffer, idx++, maxlen);
 8003446:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003448:	1c53      	adds	r3, r2, #1
 800344a:	647b      	str	r3, [r7, #68]	; 0x44
 800344c:	68fc      	ldr	r4, [r7, #12]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68b9      	ldr	r1, [r7, #8]
 8003452:	2020      	movs	r0, #32
 8003454:	47a0      	blx	r4
          while (l++ < width) {
 8003456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003458:	1c5a      	adds	r2, r3, #1
 800345a:	637a      	str	r2, [r7, #52]	; 0x34
 800345c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800345e:	429a      	cmp	r2, r3
 8003460:	d8f1      	bhi.n	8003446 <_vsnprintf+0x85e>
          }
        }
        format++;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	3301      	adds	r3, #1
 8003466:	603b      	str	r3, [r7, #0]
        break;
 8003468:	e05f      	b.n	800352a <_vsnprintf+0x942>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800346a:	2308      	movs	r3, #8
 800346c:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800346e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003470:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8003474:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8003476:	2300      	movs	r3, #0
 8003478:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
 800347c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003480:	2b00      	cmp	r3, #0
 8003482:	d01e      	beq.n	80034c2 <_vsnprintf+0x8da>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8003484:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003486:	1d1a      	adds	r2, r3, #4
 8003488:	66ba      	str	r2, [r7, #104]	; 0x68
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	461a      	mov	r2, r3
 800348e:	f04f 0300 	mov.w	r3, #0
 8003492:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003494:	9108      	str	r1, [sp, #32]
 8003496:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003498:	9107      	str	r1, [sp, #28]
 800349a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800349c:	9106      	str	r1, [sp, #24]
 800349e:	f04f 0010 	mov.w	r0, #16
 80034a2:	f04f 0100 	mov.w	r1, #0
 80034a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80034aa:	2100      	movs	r1, #0
 80034ac:	9102      	str	r1, [sp, #8]
 80034ae:	e9cd 2300 	strd	r2, r3, [sp]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034b6:	68b9      	ldr	r1, [r7, #8]
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f7fe fe34 	bl	8002126 <_ntoa_long_long>
 80034be:	6478      	str	r0, [r7, #68]	; 0x44
 80034c0:	e016      	b.n	80034f0 <_vsnprintf+0x908>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80034c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034c4:	1d1a      	adds	r2, r3, #4
 80034c6:	66ba      	str	r2, [r7, #104]	; 0x68
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	461a      	mov	r2, r3
 80034cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034ce:	9305      	str	r3, [sp, #20]
 80034d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034d2:	9304      	str	r3, [sp, #16]
 80034d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034d6:	9303      	str	r3, [sp, #12]
 80034d8:	2310      	movs	r3, #16
 80034da:	9302      	str	r3, [sp, #8]
 80034dc:	2300      	movs	r3, #0
 80034de:	9301      	str	r3, [sp, #4]
 80034e0:	9200      	str	r2, [sp, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034e6:	68b9      	ldr	r1, [r7, #8]
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f7fe fdb5 	bl	8002058 <_ntoa_long>
 80034ee:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	3301      	adds	r3, #1
 80034f4:	603b      	str	r3, [r7, #0]
        break;
 80034f6:	e018      	b.n	800352a <_vsnprintf+0x942>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 80034f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034fa:	1c53      	adds	r3, r2, #1
 80034fc:	647b      	str	r3, [r7, #68]	; 0x44
 80034fe:	68fc      	ldr	r4, [r7, #12]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68b9      	ldr	r1, [r7, #8]
 8003504:	2025      	movs	r0, #37	; 0x25
 8003506:	47a0      	blx	r4
        format++;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	3301      	adds	r3, #1
 800350c:	603b      	str	r3, [r7, #0]
        break;
 800350e:	e00c      	b.n	800352a <_vsnprintf+0x942>

      default :
        out(*format, buffer, idx++, maxlen);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	7818      	ldrb	r0, [r3, #0]
 8003514:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003516:	1c53      	adds	r3, r2, #1
 8003518:	647b      	str	r3, [r7, #68]	; 0x44
 800351a:	68fc      	ldr	r4, [r7, #12]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68b9      	ldr	r1, [r7, #8]
 8003520:	47a0      	blx	r4
        format++;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	3301      	adds	r3, #1
 8003526:	603b      	str	r3, [r7, #0]
        break;
 8003528:	bf00      	nop
  while (*format)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	f47f ab6b 	bne.w	8002c0a <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8003534:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	429a      	cmp	r2, r3
 800353a:	d302      	bcc.n	8003542 <_vsnprintf+0x95a>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	1e5a      	subs	r2, r3, #1
 8003540:	e000      	b.n	8003544 <_vsnprintf+0x95c>
 8003542:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003544:	68fc      	ldr	r4, [r7, #12]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68b9      	ldr	r1, [r7, #8]
 800354a:	2000      	movs	r0, #0
 800354c:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800354e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8003550:	4618      	mov	r0, r3
 8003552:	3758      	adds	r7, #88	; 0x58
 8003554:	46bd      	mov	sp, r7
 8003556:	bdb0      	pop	{r4, r5, r7, pc}

08003558 <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 8003558:	b40e      	push	{r1, r2, r3}
 800355a:	b580      	push	{r7, lr}
 800355c:	b087      	sub	sp, #28
 800355e:	af02      	add	r7, sp, #8
 8003560:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 8003562:	f107 0320 	add.w	r3, r7, #32
 8003566:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	4805      	ldr	r0, [pc, #20]	; (800358c <sprintf_+0x34>)
 8003576:	f7ff fb37 	bl	8002be8 <_vsnprintf>
 800357a:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800357c:	68fb      	ldr	r3, [r7, #12]
}
 800357e:	4618      	mov	r0, r3
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003588:	b003      	add	sp, #12
 800358a:	4770      	bx	lr
 800358c:	08001d07 	.word	0x08001d07

08003590 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003596:	4b11      	ldr	r3, [pc, #68]	; (80035dc <HAL_MspInit+0x4c>)
 8003598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800359a:	4a10      	ldr	r2, [pc, #64]	; (80035dc <HAL_MspInit+0x4c>)
 800359c:	f043 0301 	orr.w	r3, r3, #1
 80035a0:	6613      	str	r3, [r2, #96]	; 0x60
 80035a2:	4b0e      	ldr	r3, [pc, #56]	; (80035dc <HAL_MspInit+0x4c>)
 80035a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	607b      	str	r3, [r7, #4]
 80035ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035ae:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <HAL_MspInit+0x4c>)
 80035b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b2:	4a0a      	ldr	r2, [pc, #40]	; (80035dc <HAL_MspInit+0x4c>)
 80035b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035b8:	6593      	str	r3, [r2, #88]	; 0x58
 80035ba:	4b08      	ldr	r3, [pc, #32]	; (80035dc <HAL_MspInit+0x4c>)
 80035bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c2:	603b      	str	r3, [r7, #0]
 80035c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80035c6:	2200      	movs	r2, #0
 80035c8:	210f      	movs	r1, #15
 80035ca:	f06f 0001 	mvn.w	r0, #1
 80035ce:	f001 fd23 	bl	8005018 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035d2:	bf00      	nop
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40021000 	.word	0x40021000

080035e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b0ac      	sub	sp, #176	; 0xb0
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	605a      	str	r2, [r3, #4]
 80035f2:	609a      	str	r2, [r3, #8]
 80035f4:	60da      	str	r2, [r3, #12]
 80035f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035f8:	f107 0314 	add.w	r3, r7, #20
 80035fc:	2288      	movs	r2, #136	; 0x88
 80035fe:	2100      	movs	r1, #0
 8003600:	4618      	mov	r0, r3
 8003602:	f007 fea8 	bl	800b356 <memset>
  if(hadc->Instance==ADC1)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a27      	ldr	r2, [pc, #156]	; (80036a8 <HAL_ADC_MspInit+0xc8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d147      	bne.n	80036a0 <HAL_ADC_MspInit+0xc0>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003610:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003614:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003616:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800361a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800361e:	2302      	movs	r3, #2
 8003620:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003622:	2301      	movs	r3, #1
 8003624:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8003626:	2308      	movs	r3, #8
 8003628:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800362a:	2307      	movs	r3, #7
 800362c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800362e:	2302      	movs	r3, #2
 8003630:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003632:	2302      	movs	r3, #2
 8003634:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003636:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800363a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800363c:	f107 0314 	add.w	r3, r7, #20
 8003640:	4618      	mov	r0, r3
 8003642:	f002 fd41 	bl	80060c8 <HAL_RCCEx_PeriphCLKConfig>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800364c:	f7fe fb56 	bl	8001cfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003650:	4b16      	ldr	r3, [pc, #88]	; (80036ac <HAL_ADC_MspInit+0xcc>)
 8003652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003654:	4a15      	ldr	r2, [pc, #84]	; (80036ac <HAL_ADC_MspInit+0xcc>)
 8003656:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800365a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800365c:	4b13      	ldr	r3, [pc, #76]	; (80036ac <HAL_ADC_MspInit+0xcc>)
 800365e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003660:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003664:	613b      	str	r3, [r7, #16]
 8003666:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003668:	4b10      	ldr	r3, [pc, #64]	; (80036ac <HAL_ADC_MspInit+0xcc>)
 800366a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800366c:	4a0f      	ldr	r2, [pc, #60]	; (80036ac <HAL_ADC_MspInit+0xcc>)
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003674:	4b0d      	ldr	r3, [pc, #52]	; (80036ac <HAL_ADC_MspInit+0xcc>)
 8003676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003680:	2301      	movs	r3, #1
 8003682:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003686:	230b      	movs	r3, #11
 8003688:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368c:	2300      	movs	r3, #0
 800368e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003692:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003696:	4619      	mov	r1, r3
 8003698:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800369c:	f001 fce6 	bl	800506c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80036a0:	bf00      	nop
 80036a2:	37b0      	adds	r7, #176	; 0xb0
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	50040000 	.word	0x50040000
 80036ac:	40021000 	.word	0x40021000

080036b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c0:	d10b      	bne.n	80036da <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036c2:	4b09      	ldr	r3, [pc, #36]	; (80036e8 <HAL_TIM_Base_MspInit+0x38>)
 80036c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c6:	4a08      	ldr	r2, [pc, #32]	; (80036e8 <HAL_TIM_Base_MspInit+0x38>)
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	6593      	str	r3, [r2, #88]	; 0x58
 80036ce:	4b06      	ldr	r3, [pc, #24]	; (80036e8 <HAL_TIM_Base_MspInit+0x38>)
 80036d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80036da:	bf00      	nop
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	40021000 	.word	0x40021000

080036ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b088      	sub	sp, #32
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f4:	f107 030c 	add.w	r3, r7, #12
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	605a      	str	r2, [r3, #4]
 80036fe:	609a      	str	r2, [r3, #8]
 8003700:	60da      	str	r2, [r3, #12]
 8003702:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800370c:	d11c      	bne.n	8003748 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800370e:	4b10      	ldr	r3, [pc, #64]	; (8003750 <HAL_TIM_MspPostInit+0x64>)
 8003710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003712:	4a0f      	ldr	r2, [pc, #60]	; (8003750 <HAL_TIM_MspPostInit+0x64>)
 8003714:	f043 0302 	orr.w	r3, r3, #2
 8003718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800371a:	4b0d      	ldr	r3, [pc, #52]	; (8003750 <HAL_TIM_MspPostInit+0x64>)
 800371c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	60bb      	str	r3, [r7, #8]
 8003724:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800372a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800372c:	2302      	movs	r3, #2
 800372e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003730:	2300      	movs	r3, #0
 8003732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003734:	2303      	movs	r3, #3
 8003736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003738:	2301      	movs	r3, #1
 800373a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800373c:	f107 030c 	add.w	r3, r7, #12
 8003740:	4619      	mov	r1, r3
 8003742:	4804      	ldr	r0, [pc, #16]	; (8003754 <HAL_TIM_MspPostInit+0x68>)
 8003744:	f001 fc92 	bl	800506c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003748:	bf00      	nop
 800374a:	3720      	adds	r7, #32
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40021000 	.word	0x40021000
 8003754:	48000400 	.word	0x48000400

08003758 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b08c      	sub	sp, #48	; 0x30
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003760:	2300      	movs	r3, #0
 8003762:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003764:	2300      	movs	r3, #0
 8003766:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8003768:	2200      	movs	r2, #0
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	2019      	movs	r0, #25
 800376e:	f001 fc53 	bl	8005018 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003772:	2019      	movs	r0, #25
 8003774:	f001 fc6c 	bl	8005050 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003778:	4b1e      	ldr	r3, [pc, #120]	; (80037f4 <HAL_InitTick+0x9c>)
 800377a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800377c:	4a1d      	ldr	r2, [pc, #116]	; (80037f4 <HAL_InitTick+0x9c>)
 800377e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003782:	6613      	str	r3, [r2, #96]	; 0x60
 8003784:	4b1b      	ldr	r3, [pc, #108]	; (80037f4 <HAL_InitTick+0x9c>)
 8003786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003790:	f107 0210 	add.w	r2, r7, #16
 8003794:	f107 0314 	add.w	r3, r7, #20
 8003798:	4611      	mov	r1, r2
 800379a:	4618      	mov	r0, r3
 800379c:	f002 fc02 	bl	8005fa4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80037a0:	f002 fbea 	bl	8005f78 <HAL_RCC_GetPCLK2Freq>
 80037a4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80037a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a8:	4a13      	ldr	r2, [pc, #76]	; (80037f8 <HAL_InitTick+0xa0>)
 80037aa:	fba2 2303 	umull	r2, r3, r2, r3
 80037ae:	0c9b      	lsrs	r3, r3, #18
 80037b0:	3b01      	subs	r3, #1
 80037b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80037b4:	4b11      	ldr	r3, [pc, #68]	; (80037fc <HAL_InitTick+0xa4>)
 80037b6:	4a12      	ldr	r2, [pc, #72]	; (8003800 <HAL_InitTick+0xa8>)
 80037b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80037ba:	4b10      	ldr	r3, [pc, #64]	; (80037fc <HAL_InitTick+0xa4>)
 80037bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80037c0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80037c2:	4a0e      	ldr	r2, [pc, #56]	; (80037fc <HAL_InitTick+0xa4>)
 80037c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80037c8:	4b0c      	ldr	r3, [pc, #48]	; (80037fc <HAL_InitTick+0xa4>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037ce:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <HAL_InitTick+0xa4>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80037d4:	4809      	ldr	r0, [pc, #36]	; (80037fc <HAL_InitTick+0xa4>)
 80037d6:	f003 f933 	bl	8006a40 <HAL_TIM_Base_Init>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d104      	bne.n	80037ea <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80037e0:	4806      	ldr	r0, [pc, #24]	; (80037fc <HAL_InitTick+0xa4>)
 80037e2:	f003 f985 	bl	8006af0 <HAL_TIM_Base_Start_IT>
 80037e6:	4603      	mov	r3, r0
 80037e8:	e000      	b.n	80037ec <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3730      	adds	r7, #48	; 0x30
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40021000 	.word	0x40021000
 80037f8:	431bde83 	.word	0x431bde83
 80037fc:	2000112c 	.word	0x2000112c
 8003800:	40012c00 	.word	0x40012c00

08003804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003808:	e7fe      	b.n	8003808 <NMI_Handler+0x4>

0800380a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800380a:	b480      	push	{r7}
 800380c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800380e:	e7fe      	b.n	800380e <HardFault_Handler+0x4>

08003810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003814:	e7fe      	b.n	8003814 <MemManage_Handler+0x4>

08003816 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003816:	b480      	push	{r7}
 8003818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800381a:	e7fe      	b.n	800381a <BusFault_Handler+0x4>

0800381c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003820:	e7fe      	b.n	8003820 <UsageFault_Handler+0x4>

08003822 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003822:	b480      	push	{r7}
 8003824:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003826:	bf00      	nop
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003834:	4802      	ldr	r0, [pc, #8]	; (8003840 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003836:	f003 fbc9 	bl	8006fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800383a:	bf00      	nop
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	2000112c 	.word	0x2000112c

08003844 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	USART_1_IRQHandler();
 8003848:	f7fd fea2 	bl	8001590 <USART_1_IRQHandler>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800384c:	bf00      	nop
 800384e:	bd80      	pop	{r7, pc}

08003850 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART_2_IRQHandler();
 8003854:	f7fd fe3c 	bl	80014d0 <USART_2_IRQHandler>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003858:	bf00      	nop
 800385a:	bd80      	pop	{r7, pc}

0800385c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003868:	2300      	movs	r3, #0
 800386a:	617b      	str	r3, [r7, #20]
 800386c:	e00a      	b.n	8003884 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800386e:	f3af 8000 	nop.w
 8003872:	4601      	mov	r1, r0
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	1c5a      	adds	r2, r3, #1
 8003878:	60ba      	str	r2, [r7, #8]
 800387a:	b2ca      	uxtb	r2, r1
 800387c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	3301      	adds	r3, #1
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	429a      	cmp	r2, r3
 800388a:	dbf0      	blt.n	800386e <_read+0x12>
	}

return len;
 800388c:	687b      	ldr	r3, [r7, #4]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3718      	adds	r7, #24
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b086      	sub	sp, #24
 800389a:	af00      	add	r7, sp, #0
 800389c:	60f8      	str	r0, [r7, #12]
 800389e:	60b9      	str	r1, [r7, #8]
 80038a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038a2:	2300      	movs	r3, #0
 80038a4:	617b      	str	r3, [r7, #20]
 80038a6:	e009      	b.n	80038bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	1c5a      	adds	r2, r3, #1
 80038ac:	60ba      	str	r2, [r7, #8]
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	3301      	adds	r3, #1
 80038ba:	617b      	str	r3, [r7, #20]
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	dbf1      	blt.n	80038a8 <_write+0x12>
	}
	return len;
 80038c4:	687b      	ldr	r3, [r7, #4]
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3718      	adds	r7, #24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <_close>:

int _close(int file)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
	return -1;
 80038d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80038da:	4618      	mov	r0, r3
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <_lseek>:
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b085      	sub	sp, #20
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	60f8      	str	r0, [r7, #12]
 80038ee:	60b9      	str	r1, [r7, #8]
 80038f0:	607a      	str	r2, [r7, #4]
	return 0;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003908:	4a14      	ldr	r2, [pc, #80]	; (800395c <_sbrk+0x5c>)
 800390a:	4b15      	ldr	r3, [pc, #84]	; (8003960 <_sbrk+0x60>)
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003914:	4b13      	ldr	r3, [pc, #76]	; (8003964 <_sbrk+0x64>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d102      	bne.n	8003922 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800391c:	4b11      	ldr	r3, [pc, #68]	; (8003964 <_sbrk+0x64>)
 800391e:	4a12      	ldr	r2, [pc, #72]	; (8003968 <_sbrk+0x68>)
 8003920:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003922:	4b10      	ldr	r3, [pc, #64]	; (8003964 <_sbrk+0x64>)
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4413      	add	r3, r2
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	429a      	cmp	r2, r3
 800392e:	d207      	bcs.n	8003940 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003930:	f007 fb0c 	bl	800af4c <__errno>
 8003934:	4603      	mov	r3, r0
 8003936:	220c      	movs	r2, #12
 8003938:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800393a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800393e:	e009      	b.n	8003954 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003940:	4b08      	ldr	r3, [pc, #32]	; (8003964 <_sbrk+0x64>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003946:	4b07      	ldr	r3, [pc, #28]	; (8003964 <_sbrk+0x64>)
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4413      	add	r3, r2
 800394e:	4a05      	ldr	r2, [pc, #20]	; (8003964 <_sbrk+0x64>)
 8003950:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003952:	68fb      	ldr	r3, [r7, #12]
}
 8003954:	4618      	mov	r0, r3
 8003956:	3718      	adds	r7, #24
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	20018000 	.word	0x20018000
 8003960:	00000400 	.word	0x00000400
 8003964:	20000350 	.word	0x20000350
 8003968:	20001190 	.word	0x20001190

0800396c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003970:	4b15      	ldr	r3, [pc, #84]	; (80039c8 <SystemInit+0x5c>)
 8003972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003976:	4a14      	ldr	r2, [pc, #80]	; (80039c8 <SystemInit+0x5c>)
 8003978:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800397c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003980:	4b12      	ldr	r3, [pc, #72]	; (80039cc <SystemInit+0x60>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a11      	ldr	r2, [pc, #68]	; (80039cc <SystemInit+0x60>)
 8003986:	f043 0301 	orr.w	r3, r3, #1
 800398a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800398c:	4b0f      	ldr	r3, [pc, #60]	; (80039cc <SystemInit+0x60>)
 800398e:	2200      	movs	r2, #0
 8003990:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003992:	4b0e      	ldr	r3, [pc, #56]	; (80039cc <SystemInit+0x60>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a0d      	ldr	r2, [pc, #52]	; (80039cc <SystemInit+0x60>)
 8003998:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800399c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80039a0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80039a2:	4b0a      	ldr	r3, [pc, #40]	; (80039cc <SystemInit+0x60>)
 80039a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80039a8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80039aa:	4b08      	ldr	r3, [pc, #32]	; (80039cc <SystemInit+0x60>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a07      	ldr	r2, [pc, #28]	; (80039cc <SystemInit+0x60>)
 80039b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039b4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80039b6:	4b05      	ldr	r3, [pc, #20]	; (80039cc <SystemInit+0x60>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	619a      	str	r2, [r3, #24]
}
 80039bc:	bf00      	nop
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	e000ed00 	.word	0xe000ed00
 80039cc:	40021000 	.word	0x40021000

080039d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80039d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a08 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80039d4:	f7ff ffca 	bl	800396c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80039d8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80039da:	e003      	b.n	80039e4 <LoopCopyDataInit>

080039dc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80039dc:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80039de:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80039e0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80039e2:	3104      	adds	r1, #4

080039e4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80039e4:	480a      	ldr	r0, [pc, #40]	; (8003a10 <LoopForever+0xa>)
	ldr	r3, =_edata
 80039e6:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <LoopForever+0xe>)
	adds	r2, r0, r1
 80039e8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80039ea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80039ec:	d3f6      	bcc.n	80039dc <CopyDataInit>
	ldr	r2, =_sbss
 80039ee:	4a0a      	ldr	r2, [pc, #40]	; (8003a18 <LoopForever+0x12>)
	b	LoopFillZerobss
 80039f0:	e002      	b.n	80039f8 <LoopFillZerobss>

080039f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80039f2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80039f4:	f842 3b04 	str.w	r3, [r2], #4

080039f8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80039f8:	4b08      	ldr	r3, [pc, #32]	; (8003a1c <LoopForever+0x16>)
	cmp	r2, r3
 80039fa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80039fc:	d3f9      	bcc.n	80039f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80039fe:	f007 fc75 	bl	800b2ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003a02:	f7fd fe25 	bl	8001650 <main>

08003a06 <LoopForever>:

LoopForever:
    b LoopForever
 8003a06:	e7fe      	b.n	8003a06 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003a08:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003a0c:	0800cac8 	.word	0x0800cac8
	ldr	r0, =_sdata
 8003a10:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003a14:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8003a18:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8003a1c:	2000118c 	.word	0x2000118c

08003a20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003a20:	e7fe      	b.n	8003a20 <ADC1_2_IRQHandler>
	...

08003a24 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a2e:	4b0c      	ldr	r3, [pc, #48]	; (8003a60 <HAL_Init+0x3c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a0b      	ldr	r2, [pc, #44]	; (8003a60 <HAL_Init+0x3c>)
 8003a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a38:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a3a:	2003      	movs	r0, #3
 8003a3c:	f001 fae1 	bl	8005002 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a40:	200f      	movs	r0, #15
 8003a42:	f7ff fe89 	bl	8003758 <HAL_InitTick>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d002      	beq.n	8003a52 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	71fb      	strb	r3, [r7, #7]
 8003a50:	e001      	b.n	8003a56 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003a52:	f7ff fd9d 	bl	8003590 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a56:	79fb      	ldrb	r3, [r7, #7]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40022000 	.word	0x40022000

08003a64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a68:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <HAL_IncTick+0x20>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	4b06      	ldr	r3, [pc, #24]	; (8003a88 <HAL_IncTick+0x24>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4413      	add	r3, r2
 8003a74:	4a04      	ldr	r2, [pc, #16]	; (8003a88 <HAL_IncTick+0x24>)
 8003a76:	6013      	str	r3, [r2, #0]
}
 8003a78:	bf00      	nop
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	20000008 	.word	0x20000008
 8003a88:	20001178 	.word	0x20001178

08003a8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8003a90:	4b03      	ldr	r3, [pc, #12]	; (8003aa0 <HAL_GetTick+0x14>)
 8003a92:	681b      	ldr	r3, [r3, #0]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	20001178 	.word	0x20001178

08003aa4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	609a      	str	r2, [r3, #8]
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
 8003ad2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	609a      	str	r2, [r3, #8]
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b087      	sub	sp, #28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
 8003b18:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	3360      	adds	r3, #96	; 0x60
 8003b1e:	461a      	mov	r2, r3
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	4b08      	ldr	r3, [pc, #32]	; (8003b50 <LL_ADC_SetOffset+0x44>)
 8003b2e:	4013      	ands	r3, r2
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003b36:	683a      	ldr	r2, [r7, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003b44:	bf00      	nop
 8003b46:	371c      	adds	r7, #28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	03fff000 	.word	0x03fff000

08003b54 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	3360      	adds	r3, #96	; 0x60
 8003b62:	461a      	mov	r2, r3
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	3360      	adds	r3, #96	; 0x60
 8003b90:	461a      	mov	r2, r3
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4413      	add	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003baa:	bf00      	nop
 8003bac:	371c      	adds	r7, #28
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e000      	b.n	8003bd0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	3330      	adds	r3, #48	; 0x30
 8003bec:	461a      	mov	r2, r3
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	0a1b      	lsrs	r3, r3, #8
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	f003 030c 	and.w	r3, r3, #12
 8003bf8:	4413      	add	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	f003 031f 	and.w	r3, r3, #31
 8003c06:	211f      	movs	r1, #31
 8003c08:	fa01 f303 	lsl.w	r3, r1, r3
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	401a      	ands	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	0e9b      	lsrs	r3, r3, #26
 8003c14:	f003 011f 	and.w	r1, r3, #31
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	f003 031f 	and.w	r3, r3, #31
 8003c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c22:	431a      	orrs	r2, r3
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003c28:	bf00      	nop
 8003c2a:	371c      	adds	r7, #28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	3314      	adds	r3, #20
 8003c44:	461a      	mov	r2, r3
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	0e5b      	lsrs	r3, r3, #25
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	f003 0304 	and.w	r3, r3, #4
 8003c50:	4413      	add	r3, r2
 8003c52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	0d1b      	lsrs	r3, r3, #20
 8003c5c:	f003 031f 	and.w	r3, r3, #31
 8003c60:	2107      	movs	r1, #7
 8003c62:	fa01 f303 	lsl.w	r3, r1, r3
 8003c66:	43db      	mvns	r3, r3
 8003c68:	401a      	ands	r2, r3
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	0d1b      	lsrs	r3, r3, #20
 8003c6e:	f003 031f 	and.w	r3, r3, #31
 8003c72:	6879      	ldr	r1, [r7, #4]
 8003c74:	fa01 f303 	lsl.w	r3, r1, r3
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003c7e:	bf00      	nop
 8003c80:	371c      	adds	r7, #28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
	...

08003c8c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ca4:	43db      	mvns	r3, r3
 8003ca6:	401a      	ands	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f003 0318 	and.w	r3, r3, #24
 8003cae:	4908      	ldr	r1, [pc, #32]	; (8003cd0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003cb0:	40d9      	lsrs	r1, r3
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	400b      	ands	r3, r1
 8003cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003cc2:	bf00      	nop
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	0007ffff 	.word	0x0007ffff

08003cd4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 031f 	and.w	r3, r3, #31
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003d1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6093      	str	r3, [r2, #8]
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d44:	d101      	bne.n	8003d4a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003d46:	2301      	movs	r3, #1
 8003d48:	e000      	b.n	8003d4c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003d68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d6c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d94:	d101      	bne.n	8003d9a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003d96:	2301      	movs	r3, #1
 8003d98:	e000      	b.n	8003d9c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003db8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003dbc:	f043 0201 	orr.w	r2, r3, #1
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d101      	bne.n	8003de8 <LL_ADC_IsEnabled+0x18>
 8003de4:	2301      	movs	r3, #1
 8003de6:	e000      	b.n	8003dea <LL_ADC_IsEnabled+0x1a>
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b083      	sub	sp, #12
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e06:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e0a:	f043 0204 	orr.w	r2, r3, #4
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 0304 	and.w	r3, r3, #4
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	d101      	bne.n	8003e36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e32:	2301      	movs	r3, #1
 8003e34:	e000      	b.n	8003e38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f003 0308 	and.w	r3, r3, #8
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d101      	bne.n	8003e5c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e000      	b.n	8003e5e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
	...

08003e6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e6c:	b590      	push	{r4, r7, lr}
 8003e6e:	b089      	sub	sp, #36	; 0x24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e74:	2300      	movs	r3, #0
 8003e76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e136      	b.n	80040f4 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d109      	bne.n	8003ea8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7ff fba3 	bl	80035e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7ff ff3f 	bl	8003d30 <LL_ADC_IsDeepPowerDownEnabled>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d004      	beq.n	8003ec2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff ff25 	bl	8003d0c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff ff5a 	bl	8003d80 <LL_ADC_IsInternalRegulatorEnabled>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d115      	bne.n	8003efe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7ff ff3e 	bl	8003d58 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003edc:	4b87      	ldr	r3, [pc, #540]	; (80040fc <HAL_ADC_Init+0x290>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	099b      	lsrs	r3, r3, #6
 8003ee2:	4a87      	ldr	r2, [pc, #540]	; (8004100 <HAL_ADC_Init+0x294>)
 8003ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee8:	099b      	lsrs	r3, r3, #6
 8003eea:	3301      	adds	r3, #1
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ef0:	e002      	b.n	8003ef8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1f9      	bne.n	8003ef2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7ff ff3c 	bl	8003d80 <LL_ADC_IsInternalRegulatorEnabled>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10d      	bne.n	8003f2a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f12:	f043 0210 	orr.w	r2, r3, #16
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1e:	f043 0201 	orr.w	r2, r3, #1
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff ff75 	bl	8003e1e <LL_ADC_REG_IsConversionOngoing>
 8003f34:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3a:	f003 0310 	and.w	r3, r3, #16
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f040 80cf 	bne.w	80040e2 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f040 80cb 	bne.w	80040e2 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f50:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003f54:	f043 0202 	orr.w	r2, r3, #2
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff ff35 	bl	8003dd0 <LL_ADC_IsEnabled>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d115      	bne.n	8003f98 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f6c:	4865      	ldr	r0, [pc, #404]	; (8004104 <HAL_ADC_Init+0x298>)
 8003f6e:	f7ff ff2f 	bl	8003dd0 <LL_ADC_IsEnabled>
 8003f72:	4604      	mov	r4, r0
 8003f74:	4864      	ldr	r0, [pc, #400]	; (8004108 <HAL_ADC_Init+0x29c>)
 8003f76:	f7ff ff2b 	bl	8003dd0 <LL_ADC_IsEnabled>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	431c      	orrs	r4, r3
 8003f7e:	4863      	ldr	r0, [pc, #396]	; (800410c <HAL_ADC_Init+0x2a0>)
 8003f80:	f7ff ff26 	bl	8003dd0 <LL_ADC_IsEnabled>
 8003f84:	4603      	mov	r3, r0
 8003f86:	4323      	orrs	r3, r4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d105      	bne.n	8003f98 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	4619      	mov	r1, r3
 8003f92:	485f      	ldr	r0, [pc, #380]	; (8004110 <HAL_ADC_Init+0x2a4>)
 8003f94:	f7ff fd86 	bl	8003aa4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	7e5b      	ldrb	r3, [r3, #25]
 8003f9c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003fa2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003fa8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003fae:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fb6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d106      	bne.n	8003fd4 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	045b      	lsls	r3, r3, #17
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d009      	beq.n	8003ff0 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	4b47      	ldr	r3, [pc, #284]	; (8004114 <HAL_ADC_Init+0x2a8>)
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6812      	ldr	r2, [r2, #0]
 8003ffe:	69b9      	ldr	r1, [r7, #24]
 8004000:	430b      	orrs	r3, r1
 8004002:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4618      	mov	r0, r3
 800400a:	f7ff ff08 	bl	8003e1e <LL_ADC_REG_IsConversionOngoing>
 800400e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4618      	mov	r0, r3
 8004016:	f7ff ff15 	bl	8003e44 <LL_ADC_INJ_IsConversionOngoing>
 800401a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d13d      	bne.n	800409e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d13a      	bne.n	800409e <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800402c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004034:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004036:	4313      	orrs	r3, r2
 8004038:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004044:	f023 0302 	bic.w	r3, r3, #2
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6812      	ldr	r2, [r2, #0]
 800404c:	69b9      	ldr	r1, [r7, #24]
 800404e:	430b      	orrs	r3, r1
 8004050:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004058:	2b01      	cmp	r3, #1
 800405a:	d118      	bne.n	800408e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004066:	f023 0304 	bic.w	r3, r3, #4
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004072:	4311      	orrs	r1, r2
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004078:	4311      	orrs	r1, r2
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800407e:	430a      	orrs	r2, r1
 8004080:	431a      	orrs	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f042 0201 	orr.w	r2, r2, #1
 800408a:	611a      	str	r2, [r3, #16]
 800408c:	e007      	b.n	800409e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	691a      	ldr	r2, [r3, #16]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 0201 	bic.w	r2, r2, #1
 800409c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d10c      	bne.n	80040c0 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ac:	f023 010f 	bic.w	r1, r3, #15
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	1e5a      	subs	r2, r3, #1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	631a      	str	r2, [r3, #48]	; 0x30
 80040be:	e007      	b.n	80040d0 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f022 020f 	bic.w	r2, r2, #15
 80040ce:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d4:	f023 0303 	bic.w	r3, r3, #3
 80040d8:	f043 0201 	orr.w	r2, r3, #1
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	655a      	str	r2, [r3, #84]	; 0x54
 80040e0:	e007      	b.n	80040f2 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e6:	f043 0210 	orr.w	r2, r3, #16
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80040f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3724      	adds	r7, #36	; 0x24
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd90      	pop	{r4, r7, pc}
 80040fc:	20000000 	.word	0x20000000
 8004100:	053e2d63 	.word	0x053e2d63
 8004104:	50040000 	.word	0x50040000
 8004108:	50040100 	.word	0x50040100
 800410c:	50040200 	.word	0x50040200
 8004110:	50040300 	.word	0x50040300
 8004114:	fff0c007 	.word	0xfff0c007

08004118 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004120:	4857      	ldr	r0, [pc, #348]	; (8004280 <HAL_ADC_Start+0x168>)
 8004122:	f7ff fdd7 	bl	8003cd4 <LL_ADC_GetMultimode>
 8004126:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4618      	mov	r0, r3
 800412e:	f7ff fe76 	bl	8003e1e <LL_ADC_REG_IsConversionOngoing>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	f040 809c 	bne.w	8004272 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004140:	2b01      	cmp	r3, #1
 8004142:	d101      	bne.n	8004148 <HAL_ADC_Start+0x30>
 8004144:	2302      	movs	r3, #2
 8004146:	e097      	b.n	8004278 <HAL_ADC_Start+0x160>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 fd71 	bl	8004c38 <ADC_Enable>
 8004156:	4603      	mov	r3, r0
 8004158:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800415a:	7dfb      	ldrb	r3, [r7, #23]
 800415c:	2b00      	cmp	r3, #0
 800415e:	f040 8083 	bne.w	8004268 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004166:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800416a:	f023 0301 	bic.w	r3, r3, #1
 800416e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a42      	ldr	r2, [pc, #264]	; (8004284 <HAL_ADC_Start+0x16c>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d002      	beq.n	8004186 <HAL_ADC_Start+0x6e>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	e000      	b.n	8004188 <HAL_ADC_Start+0x70>
 8004186:	4b40      	ldr	r3, [pc, #256]	; (8004288 <HAL_ADC_Start+0x170>)
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6812      	ldr	r2, [r2, #0]
 800418c:	4293      	cmp	r3, r2
 800418e:	d002      	beq.n	8004196 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d105      	bne.n	80041a2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ae:	d106      	bne.n	80041be <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b4:	f023 0206 	bic.w	r2, r3, #6
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	659a      	str	r2, [r3, #88]	; 0x58
 80041bc:	e002      	b.n	80041c4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	221c      	movs	r2, #28
 80041ca:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a2a      	ldr	r2, [pc, #168]	; (8004284 <HAL_ADC_Start+0x16c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d002      	beq.n	80041e4 <HAL_ADC_Start+0xcc>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	e000      	b.n	80041e6 <HAL_ADC_Start+0xce>
 80041e4:	4b28      	ldr	r3, [pc, #160]	; (8004288 <HAL_ADC_Start+0x170>)
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6812      	ldr	r2, [r2, #0]
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d008      	beq.n	8004200 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d005      	beq.n	8004200 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	2b05      	cmp	r3, #5
 80041f8:	d002      	beq.n	8004200 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	2b09      	cmp	r3, #9
 80041fe:	d114      	bne.n	800422a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d007      	beq.n	800421e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004212:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004216:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4618      	mov	r0, r3
 8004224:	f7ff fde7 	bl	8003df6 <LL_ADC_REG_StartConversion>
 8004228:	e025      	b.n	8004276 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a12      	ldr	r2, [pc, #72]	; (8004284 <HAL_ADC_Start+0x16c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d002      	beq.n	8004246 <HAL_ADC_Start+0x12e>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	e000      	b.n	8004248 <HAL_ADC_Start+0x130>
 8004246:	4b10      	ldr	r3, [pc, #64]	; (8004288 <HAL_ADC_Start+0x170>)
 8004248:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00f      	beq.n	8004276 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800425e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	655a      	str	r2, [r3, #84]	; 0x54
 8004266:	e006      	b.n	8004276 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004270:	e001      	b.n	8004276 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004272:	2302      	movs	r3, #2
 8004274:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004276:	7dfb      	ldrb	r3, [r7, #23]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3718      	adds	r7, #24
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	50040300 	.word	0x50040300
 8004284:	50040100 	.word	0x50040100
 8004288:	50040000 	.word	0x50040000

0800428c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b088      	sub	sp, #32
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004296:	4866      	ldr	r0, [pc, #408]	; (8004430 <HAL_ADC_PollForConversion+0x1a4>)
 8004298:	f7ff fd1c 	bl	8003cd4 <LL_ADC_GetMultimode>
 800429c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	2b08      	cmp	r3, #8
 80042a4:	d102      	bne.n	80042ac <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80042a6:	2308      	movs	r3, #8
 80042a8:	61fb      	str	r3, [r7, #28]
 80042aa:	e02a      	b.n	8004302 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d005      	beq.n	80042be <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2b05      	cmp	r3, #5
 80042b6:	d002      	beq.n	80042be <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	2b09      	cmp	r3, #9
 80042bc:	d111      	bne.n	80042e2 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d007      	beq.n	80042dc <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d0:	f043 0220 	orr.w	r2, r3, #32
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e0a4      	b.n	8004426 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80042dc:	2304      	movs	r3, #4
 80042de:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80042e0:	e00f      	b.n	8004302 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80042e2:	4853      	ldr	r0, [pc, #332]	; (8004430 <HAL_ADC_PollForConversion+0x1a4>)
 80042e4:	f7ff fd04 	bl	8003cf0 <LL_ADC_GetMultiDMATransfer>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d007      	beq.n	80042fe <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f2:	f043 0220 	orr.w	r2, r3, #32
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e093      	b.n	8004426 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80042fe:	2304      	movs	r3, #4
 8004300:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004302:	f7ff fbc3 	bl	8003a8c <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004308:	e021      	b.n	800434e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004310:	d01d      	beq.n	800434e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004312:	f7ff fbbb 	bl	8003a8c <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	429a      	cmp	r2, r3
 8004320:	d302      	bcc.n	8004328 <HAL_ADC_PollForConversion+0x9c>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d112      	bne.n	800434e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	4013      	ands	r3, r2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10b      	bne.n	800434e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433a:	f043 0204 	orr.w	r2, r3, #4
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e06b      	b.n	8004426 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	4013      	ands	r3, r2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0d6      	beq.n	800430a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004360:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff fc22 	bl	8003bb6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d01c      	beq.n	80043b2 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	7e5b      	ldrb	r3, [r3, #25]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d118      	bne.n	80043b2 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0308 	and.w	r3, r3, #8
 800438a:	2b08      	cmp	r3, #8
 800438c:	d111      	bne.n	80043b2 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004392:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d105      	bne.n	80043b2 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043aa:	f043 0201 	orr.w	r2, r3, #1
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a1f      	ldr	r2, [pc, #124]	; (8004434 <HAL_ADC_PollForConversion+0x1a8>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d002      	beq.n	80043c2 <HAL_ADC_PollForConversion+0x136>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	e000      	b.n	80043c4 <HAL_ADC_PollForConversion+0x138>
 80043c2:	4b1d      	ldr	r3, [pc, #116]	; (8004438 <HAL_ADC_PollForConversion+0x1ac>)
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6812      	ldr	r2, [r2, #0]
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d008      	beq.n	80043de <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d005      	beq.n	80043de <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2b05      	cmp	r3, #5
 80043d6:	d002      	beq.n	80043de <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	2b09      	cmp	r3, #9
 80043dc:	d104      	bne.n	80043e8 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	61bb      	str	r3, [r7, #24]
 80043e6:	e00c      	b.n	8004402 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a11      	ldr	r2, [pc, #68]	; (8004434 <HAL_ADC_PollForConversion+0x1a8>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d002      	beq.n	80043f8 <HAL_ADC_PollForConversion+0x16c>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	e000      	b.n	80043fa <HAL_ADC_PollForConversion+0x16e>
 80043f8:	4b0f      	ldr	r3, [pc, #60]	; (8004438 <HAL_ADC_PollForConversion+0x1ac>)
 80043fa:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	2b08      	cmp	r3, #8
 8004406:	d104      	bne.n	8004412 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2208      	movs	r2, #8
 800440e:	601a      	str	r2, [r3, #0]
 8004410:	e008      	b.n	8004424 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d103      	bne.n	8004424 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	220c      	movs	r2, #12
 8004422:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3720      	adds	r7, #32
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	50040300 	.word	0x50040300
 8004434:	50040100 	.word	0x50040100
 8004438:	50040000 	.word	0x50040000

0800443c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800444a:	4618      	mov	r0, r3
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
	...

08004458 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b0b6      	sub	sp, #216	; 0xd8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004468:	2300      	movs	r3, #0
 800446a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004472:	2b01      	cmp	r3, #1
 8004474:	d101      	bne.n	800447a <HAL_ADC_ConfigChannel+0x22>
 8004476:	2302      	movs	r3, #2
 8004478:	e3c7      	b.n	8004c0a <HAL_ADC_ConfigChannel+0x7b2>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4618      	mov	r0, r3
 8004488:	f7ff fcc9 	bl	8003e1e <LL_ADC_REG_IsConversionOngoing>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	f040 83a8 	bne.w	8004be4 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2b05      	cmp	r3, #5
 800449a:	d824      	bhi.n	80044e6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	3b02      	subs	r3, #2
 80044a2:	2b03      	cmp	r3, #3
 80044a4:	d81b      	bhi.n	80044de <HAL_ADC_ConfigChannel+0x86>
 80044a6:	a201      	add	r2, pc, #4	; (adr r2, 80044ac <HAL_ADC_ConfigChannel+0x54>)
 80044a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ac:	080044bd 	.word	0x080044bd
 80044b0:	080044c5 	.word	0x080044c5
 80044b4:	080044cd 	.word	0x080044cd
 80044b8:	080044d5 	.word	0x080044d5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	220c      	movs	r2, #12
 80044c0:	605a      	str	r2, [r3, #4]
          break;
 80044c2:	e011      	b.n	80044e8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	2212      	movs	r2, #18
 80044c8:	605a      	str	r2, [r3, #4]
          break;
 80044ca:	e00d      	b.n	80044e8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	2218      	movs	r2, #24
 80044d0:	605a      	str	r2, [r3, #4]
          break;
 80044d2:	e009      	b.n	80044e8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044da:	605a      	str	r2, [r3, #4]
          break;
 80044dc:	e004      	b.n	80044e8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2206      	movs	r2, #6
 80044e2:	605a      	str	r2, [r3, #4]
          break;
 80044e4:	e000      	b.n	80044e8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80044e6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6818      	ldr	r0, [r3, #0]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	6859      	ldr	r1, [r3, #4]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	461a      	mov	r2, r3
 80044f6:	f7ff fb71 	bl	8003bdc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4618      	mov	r0, r3
 8004500:	f7ff fc8d 	bl	8003e1e <LL_ADC_REG_IsConversionOngoing>
 8004504:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff fc99 	bl	8003e44 <LL_ADC_INJ_IsConversionOngoing>
 8004512:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004516:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800451a:	2b00      	cmp	r3, #0
 800451c:	f040 81a6 	bne.w	800486c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004520:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004524:	2b00      	cmp	r3, #0
 8004526:	f040 81a1 	bne.w	800486c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6818      	ldr	r0, [r3, #0]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	6819      	ldr	r1, [r3, #0]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	461a      	mov	r2, r3
 8004538:	f7ff fb7c 	bl	8003c34 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	695a      	ldr	r2, [r3, #20]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	08db      	lsrs	r3, r3, #3
 8004548:	f003 0303 	and.w	r3, r3, #3
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	fa02 f303 	lsl.w	r3, r2, r3
 8004552:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	2b04      	cmp	r3, #4
 800455c:	d00a      	beq.n	8004574 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6818      	ldr	r0, [r3, #0]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	6919      	ldr	r1, [r3, #16]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800456e:	f7ff facd 	bl	8003b0c <LL_ADC_SetOffset>
 8004572:	e17b      	b.n	800486c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2100      	movs	r1, #0
 800457a:	4618      	mov	r0, r3
 800457c:	f7ff faea 	bl	8003b54 <LL_ADC_GetOffsetChannel>
 8004580:	4603      	mov	r3, r0
 8004582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10a      	bne.n	80045a0 <HAL_ADC_ConfigChannel+0x148>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2100      	movs	r1, #0
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff fadf 	bl	8003b54 <LL_ADC_GetOffsetChannel>
 8004596:	4603      	mov	r3, r0
 8004598:	0e9b      	lsrs	r3, r3, #26
 800459a:	f003 021f 	and.w	r2, r3, #31
 800459e:	e01e      	b.n	80045de <HAL_ADC_ConfigChannel+0x186>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2100      	movs	r1, #0
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7ff fad4 	bl	8003b54 <LL_ADC_GetOffsetChannel>
 80045ac:	4603      	mov	r3, r0
 80045ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80045b6:	fa93 f3a3 	rbit	r3, r3
 80045ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80045be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80045c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80045c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80045ce:	2320      	movs	r3, #32
 80045d0:	e004      	b.n	80045dc <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80045d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80045d6:	fab3 f383 	clz	r3, r3
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d105      	bne.n	80045f6 <HAL_ADC_ConfigChannel+0x19e>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	0e9b      	lsrs	r3, r3, #26
 80045f0:	f003 031f 	and.w	r3, r3, #31
 80045f4:	e018      	b.n	8004628 <HAL_ADC_ConfigChannel+0x1d0>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004602:	fa93 f3a3 	rbit	r3, r3
 8004606:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800460a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800460e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004612:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800461a:	2320      	movs	r3, #32
 800461c:	e004      	b.n	8004628 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800461e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004622:	fab3 f383 	clz	r3, r3
 8004626:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004628:	429a      	cmp	r2, r3
 800462a:	d106      	bne.n	800463a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2200      	movs	r2, #0
 8004632:	2100      	movs	r1, #0
 8004634:	4618      	mov	r0, r3
 8004636:	f7ff faa3 	bl	8003b80 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2101      	movs	r1, #1
 8004640:	4618      	mov	r0, r3
 8004642:	f7ff fa87 	bl	8003b54 <LL_ADC_GetOffsetChannel>
 8004646:	4603      	mov	r3, r0
 8004648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10a      	bne.n	8004666 <HAL_ADC_ConfigChannel+0x20e>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2101      	movs	r1, #1
 8004656:	4618      	mov	r0, r3
 8004658:	f7ff fa7c 	bl	8003b54 <LL_ADC_GetOffsetChannel>
 800465c:	4603      	mov	r3, r0
 800465e:	0e9b      	lsrs	r3, r3, #26
 8004660:	f003 021f 	and.w	r2, r3, #31
 8004664:	e01e      	b.n	80046a4 <HAL_ADC_ConfigChannel+0x24c>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2101      	movs	r1, #1
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff fa71 	bl	8003b54 <LL_ADC_GetOffsetChannel>
 8004672:	4603      	mov	r3, r0
 8004674:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004678:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800467c:	fa93 f3a3 	rbit	r3, r3
 8004680:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004684:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004688:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800468c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004694:	2320      	movs	r3, #32
 8004696:	e004      	b.n	80046a2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8004698:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800469c:	fab3 f383 	clz	r3, r3
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d105      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x264>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	0e9b      	lsrs	r3, r3, #26
 80046b6:	f003 031f 	and.w	r3, r3, #31
 80046ba:	e018      	b.n	80046ee <HAL_ADC_ConfigChannel+0x296>
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046c8:	fa93 f3a3 	rbit	r3, r3
 80046cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80046d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80046d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80046d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80046e0:	2320      	movs	r3, #32
 80046e2:	e004      	b.n	80046ee <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80046e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046e8:	fab3 f383 	clz	r3, r3
 80046ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d106      	bne.n	8004700 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2200      	movs	r2, #0
 80046f8:	2101      	movs	r1, #1
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7ff fa40 	bl	8003b80 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2102      	movs	r1, #2
 8004706:	4618      	mov	r0, r3
 8004708:	f7ff fa24 	bl	8003b54 <LL_ADC_GetOffsetChannel>
 800470c:	4603      	mov	r3, r0
 800470e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10a      	bne.n	800472c <HAL_ADC_ConfigChannel+0x2d4>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2102      	movs	r1, #2
 800471c:	4618      	mov	r0, r3
 800471e:	f7ff fa19 	bl	8003b54 <LL_ADC_GetOffsetChannel>
 8004722:	4603      	mov	r3, r0
 8004724:	0e9b      	lsrs	r3, r3, #26
 8004726:	f003 021f 	and.w	r2, r3, #31
 800472a:	e01e      	b.n	800476a <HAL_ADC_ConfigChannel+0x312>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2102      	movs	r1, #2
 8004732:	4618      	mov	r0, r3
 8004734:	f7ff fa0e 	bl	8003b54 <LL_ADC_GetOffsetChannel>
 8004738:	4603      	mov	r3, r0
 800473a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800473e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004742:	fa93 f3a3 	rbit	r3, r3
 8004746:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800474a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800474e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004752:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800475a:	2320      	movs	r3, #32
 800475c:	e004      	b.n	8004768 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800475e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004762:	fab3 f383 	clz	r3, r3
 8004766:	b2db      	uxtb	r3, r3
 8004768:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004772:	2b00      	cmp	r3, #0
 8004774:	d105      	bne.n	8004782 <HAL_ADC_ConfigChannel+0x32a>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	0e9b      	lsrs	r3, r3, #26
 800477c:	f003 031f 	and.w	r3, r3, #31
 8004780:	e016      	b.n	80047b0 <HAL_ADC_ConfigChannel+0x358>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800478e:	fa93 f3a3 	rbit	r3, r3
 8004792:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004794:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004796:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800479a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80047a2:	2320      	movs	r3, #32
 80047a4:	e004      	b.n	80047b0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80047a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047aa:	fab3 f383 	clz	r3, r3
 80047ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d106      	bne.n	80047c2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2200      	movs	r2, #0
 80047ba:	2102      	movs	r1, #2
 80047bc:	4618      	mov	r0, r3
 80047be:	f7ff f9df 	bl	8003b80 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2103      	movs	r1, #3
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff f9c3 	bl	8003b54 <LL_ADC_GetOffsetChannel>
 80047ce:	4603      	mov	r3, r0
 80047d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10a      	bne.n	80047ee <HAL_ADC_ConfigChannel+0x396>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2103      	movs	r1, #3
 80047de:	4618      	mov	r0, r3
 80047e0:	f7ff f9b8 	bl	8003b54 <LL_ADC_GetOffsetChannel>
 80047e4:	4603      	mov	r3, r0
 80047e6:	0e9b      	lsrs	r3, r3, #26
 80047e8:	f003 021f 	and.w	r2, r3, #31
 80047ec:	e017      	b.n	800481e <HAL_ADC_ConfigChannel+0x3c6>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2103      	movs	r1, #3
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7ff f9ad 	bl	8003b54 <LL_ADC_GetOffsetChannel>
 80047fa:	4603      	mov	r3, r0
 80047fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004800:	fa93 f3a3 	rbit	r3, r3
 8004804:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004806:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004808:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800480a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004810:	2320      	movs	r3, #32
 8004812:	e003      	b.n	800481c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004814:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004816:	fab3 f383 	clz	r3, r3
 800481a:	b2db      	uxtb	r3, r3
 800481c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004826:	2b00      	cmp	r3, #0
 8004828:	d105      	bne.n	8004836 <HAL_ADC_ConfigChannel+0x3de>
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	0e9b      	lsrs	r3, r3, #26
 8004830:	f003 031f 	and.w	r3, r3, #31
 8004834:	e011      	b.n	800485a <HAL_ADC_ConfigChannel+0x402>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800483e:	fa93 f3a3 	rbit	r3, r3
 8004842:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004844:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004846:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800484e:	2320      	movs	r3, #32
 8004850:	e003      	b.n	800485a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8004852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004854:	fab3 f383 	clz	r3, r3
 8004858:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800485a:	429a      	cmp	r2, r3
 800485c:	d106      	bne.n	800486c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2200      	movs	r2, #0
 8004864:	2103      	movs	r1, #3
 8004866:	4618      	mov	r0, r3
 8004868:	f7ff f98a 	bl	8003b80 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4618      	mov	r0, r3
 8004872:	f7ff faad 	bl	8003dd0 <LL_ADC_IsEnabled>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	f040 813f 	bne.w	8004afc <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6818      	ldr	r0, [r3, #0]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	6819      	ldr	r1, [r3, #0]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	461a      	mov	r2, r3
 800488c:	f7ff f9fe 	bl	8003c8c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	4a8e      	ldr	r2, [pc, #568]	; (8004ad0 <HAL_ADC_ConfigChannel+0x678>)
 8004896:	4293      	cmp	r3, r2
 8004898:	f040 8130 	bne.w	8004afc <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10b      	bne.n	80048c4 <HAL_ADC_ConfigChannel+0x46c>
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	0e9b      	lsrs	r3, r3, #26
 80048b2:	3301      	adds	r3, #1
 80048b4:	f003 031f 	and.w	r3, r3, #31
 80048b8:	2b09      	cmp	r3, #9
 80048ba:	bf94      	ite	ls
 80048bc:	2301      	movls	r3, #1
 80048be:	2300      	movhi	r3, #0
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	e019      	b.n	80048f8 <HAL_ADC_ConfigChannel+0x4a0>
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048cc:	fa93 f3a3 	rbit	r3, r3
 80048d0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80048d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048d4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80048d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80048dc:	2320      	movs	r3, #32
 80048de:	e003      	b.n	80048e8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80048e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048e2:	fab3 f383 	clz	r3, r3
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	3301      	adds	r3, #1
 80048ea:	f003 031f 	and.w	r3, r3, #31
 80048ee:	2b09      	cmp	r3, #9
 80048f0:	bf94      	ite	ls
 80048f2:	2301      	movls	r3, #1
 80048f4:	2300      	movhi	r3, #0
 80048f6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d079      	beq.n	80049f0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004904:	2b00      	cmp	r3, #0
 8004906:	d107      	bne.n	8004918 <HAL_ADC_ConfigChannel+0x4c0>
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	0e9b      	lsrs	r3, r3, #26
 800490e:	3301      	adds	r3, #1
 8004910:	069b      	lsls	r3, r3, #26
 8004912:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004916:	e015      	b.n	8004944 <HAL_ADC_ConfigChannel+0x4ec>
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004920:	fa93 f3a3 	rbit	r3, r3
 8004924:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004928:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800492a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004930:	2320      	movs	r3, #32
 8004932:	e003      	b.n	800493c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004936:	fab3 f383 	clz	r3, r3
 800493a:	b2db      	uxtb	r3, r3
 800493c:	3301      	adds	r3, #1
 800493e:	069b      	lsls	r3, r3, #26
 8004940:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800494c:	2b00      	cmp	r3, #0
 800494e:	d109      	bne.n	8004964 <HAL_ADC_ConfigChannel+0x50c>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	0e9b      	lsrs	r3, r3, #26
 8004956:	3301      	adds	r3, #1
 8004958:	f003 031f 	and.w	r3, r3, #31
 800495c:	2101      	movs	r1, #1
 800495e:	fa01 f303 	lsl.w	r3, r1, r3
 8004962:	e017      	b.n	8004994 <HAL_ADC_ConfigChannel+0x53c>
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800496a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800496c:	fa93 f3a3 	rbit	r3, r3
 8004970:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004974:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800497c:	2320      	movs	r3, #32
 800497e:	e003      	b.n	8004988 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004982:	fab3 f383 	clz	r3, r3
 8004986:	b2db      	uxtb	r3, r3
 8004988:	3301      	adds	r3, #1
 800498a:	f003 031f 	and.w	r3, r3, #31
 800498e:	2101      	movs	r1, #1
 8004990:	fa01 f303 	lsl.w	r3, r1, r3
 8004994:	ea42 0103 	orr.w	r1, r2, r3
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10a      	bne.n	80049ba <HAL_ADC_ConfigChannel+0x562>
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	0e9b      	lsrs	r3, r3, #26
 80049aa:	3301      	adds	r3, #1
 80049ac:	f003 021f 	and.w	r2, r3, #31
 80049b0:	4613      	mov	r3, r2
 80049b2:	005b      	lsls	r3, r3, #1
 80049b4:	4413      	add	r3, r2
 80049b6:	051b      	lsls	r3, r3, #20
 80049b8:	e018      	b.n	80049ec <HAL_ADC_ConfigChannel+0x594>
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c2:	fa93 f3a3 	rbit	r3, r3
 80049c6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80049c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80049cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80049d2:	2320      	movs	r3, #32
 80049d4:	e003      	b.n	80049de <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80049d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049d8:	fab3 f383 	clz	r3, r3
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	3301      	adds	r3, #1
 80049e0:	f003 021f 	and.w	r2, r3, #31
 80049e4:	4613      	mov	r3, r2
 80049e6:	005b      	lsls	r3, r3, #1
 80049e8:	4413      	add	r3, r2
 80049ea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049ec:	430b      	orrs	r3, r1
 80049ee:	e080      	b.n	8004af2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d107      	bne.n	8004a0c <HAL_ADC_ConfigChannel+0x5b4>
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	0e9b      	lsrs	r3, r3, #26
 8004a02:	3301      	adds	r3, #1
 8004a04:	069b      	lsls	r3, r3, #26
 8004a06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a0a:	e015      	b.n	8004a38 <HAL_ADC_ConfigChannel+0x5e0>
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a14:	fa93 f3a3 	rbit	r3, r3
 8004a18:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004a24:	2320      	movs	r3, #32
 8004a26:	e003      	b.n	8004a30 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8004a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2a:	fab3 f383 	clz	r3, r3
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	3301      	adds	r3, #1
 8004a32:	069b      	lsls	r3, r3, #26
 8004a34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d109      	bne.n	8004a58 <HAL_ADC_ConfigChannel+0x600>
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	0e9b      	lsrs	r3, r3, #26
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	f003 031f 	and.w	r3, r3, #31
 8004a50:	2101      	movs	r1, #1
 8004a52:	fa01 f303 	lsl.w	r3, r1, r3
 8004a56:	e017      	b.n	8004a88 <HAL_ADC_ConfigChannel+0x630>
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5e:	6a3b      	ldr	r3, [r7, #32]
 8004a60:	fa93 f3a3 	rbit	r3, r3
 8004a64:	61fb      	str	r3, [r7, #28]
  return result;
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004a70:	2320      	movs	r3, #32
 8004a72:	e003      	b.n	8004a7c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	fab3 f383 	clz	r3, r3
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	f003 031f 	and.w	r3, r3, #31
 8004a82:	2101      	movs	r1, #1
 8004a84:	fa01 f303 	lsl.w	r3, r1, r3
 8004a88:	ea42 0103 	orr.w	r1, r2, r3
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10d      	bne.n	8004ab4 <HAL_ADC_ConfigChannel+0x65c>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	0e9b      	lsrs	r3, r3, #26
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	f003 021f 	and.w	r2, r3, #31
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	4413      	add	r3, r2
 8004aaa:	3b1e      	subs	r3, #30
 8004aac:	051b      	lsls	r3, r3, #20
 8004aae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ab2:	e01d      	b.n	8004af0 <HAL_ADC_ConfigChannel+0x698>
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	fa93 f3a3 	rbit	r3, r3
 8004ac0:	613b      	str	r3, [r7, #16]
  return result;
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d103      	bne.n	8004ad4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004acc:	2320      	movs	r3, #32
 8004ace:	e005      	b.n	8004adc <HAL_ADC_ConfigChannel+0x684>
 8004ad0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	fab3 f383 	clz	r3, r3
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	3301      	adds	r3, #1
 8004ade:	f003 021f 	and.w	r2, r3, #31
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	4413      	add	r3, r2
 8004ae8:	3b1e      	subs	r3, #30
 8004aea:	051b      	lsls	r3, r3, #20
 8004aec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004af0:	430b      	orrs	r3, r1
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	6892      	ldr	r2, [r2, #8]
 8004af6:	4619      	mov	r1, r3
 8004af8:	f7ff f89c 	bl	8003c34 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	4b44      	ldr	r3, [pc, #272]	; (8004c14 <HAL_ADC_ConfigChannel+0x7bc>)
 8004b02:	4013      	ands	r3, r2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d07a      	beq.n	8004bfe <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b08:	4843      	ldr	r0, [pc, #268]	; (8004c18 <HAL_ADC_ConfigChannel+0x7c0>)
 8004b0a:	f7fe fff1 	bl	8003af0 <LL_ADC_GetCommonPathInternalCh>
 8004b0e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a41      	ldr	r2, [pc, #260]	; (8004c1c <HAL_ADC_ConfigChannel+0x7c4>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d12c      	bne.n	8004b76 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004b1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d126      	bne.n	8004b76 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a3c      	ldr	r2, [pc, #240]	; (8004c20 <HAL_ADC_ConfigChannel+0x7c8>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d004      	beq.n	8004b3c <HAL_ADC_ConfigChannel+0x6e4>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a3b      	ldr	r2, [pc, #236]	; (8004c24 <HAL_ADC_ConfigChannel+0x7cc>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d15d      	bne.n	8004bf8 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b44:	4619      	mov	r1, r3
 8004b46:	4834      	ldr	r0, [pc, #208]	; (8004c18 <HAL_ADC_ConfigChannel+0x7c0>)
 8004b48:	f7fe ffbf 	bl	8003aca <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b4c:	4b36      	ldr	r3, [pc, #216]	; (8004c28 <HAL_ADC_ConfigChannel+0x7d0>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	099b      	lsrs	r3, r3, #6
 8004b52:	4a36      	ldr	r2, [pc, #216]	; (8004c2c <HAL_ADC_ConfigChannel+0x7d4>)
 8004b54:	fba2 2303 	umull	r2, r3, r2, r3
 8004b58:	099b      	lsrs	r3, r3, #6
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	4413      	add	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004b66:	e002      	b.n	8004b6e <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1f9      	bne.n	8004b68 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b74:	e040      	b.n	8004bf8 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a2d      	ldr	r2, [pc, #180]	; (8004c30 <HAL_ADC_ConfigChannel+0x7d8>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d118      	bne.n	8004bb2 <HAL_ADC_ConfigChannel+0x75a>
 8004b80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d112      	bne.n	8004bb2 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a23      	ldr	r2, [pc, #140]	; (8004c20 <HAL_ADC_ConfigChannel+0x7c8>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d004      	beq.n	8004ba0 <HAL_ADC_ConfigChannel+0x748>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a22      	ldr	r2, [pc, #136]	; (8004c24 <HAL_ADC_ConfigChannel+0x7cc>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d12d      	bne.n	8004bfc <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ba0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ba4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ba8:	4619      	mov	r1, r3
 8004baa:	481b      	ldr	r0, [pc, #108]	; (8004c18 <HAL_ADC_ConfigChannel+0x7c0>)
 8004bac:	f7fe ff8d 	bl	8003aca <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004bb0:	e024      	b.n	8004bfc <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a1f      	ldr	r2, [pc, #124]	; (8004c34 <HAL_ADC_ConfigChannel+0x7dc>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d120      	bne.n	8004bfe <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004bbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004bc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d11a      	bne.n	8004bfe <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a14      	ldr	r2, [pc, #80]	; (8004c20 <HAL_ADC_ConfigChannel+0x7c8>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d115      	bne.n	8004bfe <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004bd2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004bd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004bda:	4619      	mov	r1, r3
 8004bdc:	480e      	ldr	r0, [pc, #56]	; (8004c18 <HAL_ADC_ConfigChannel+0x7c0>)
 8004bde:	f7fe ff74 	bl	8003aca <LL_ADC_SetCommonPathInternalCh>
 8004be2:	e00c      	b.n	8004bfe <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be8:	f043 0220 	orr.w	r2, r3, #32
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004bf6:	e002      	b.n	8004bfe <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004bf8:	bf00      	nop
 8004bfa:	e000      	b.n	8004bfe <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004bfc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004c06:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	37d8      	adds	r7, #216	; 0xd8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	80080000 	.word	0x80080000
 8004c18:	50040300 	.word	0x50040300
 8004c1c:	c7520000 	.word	0xc7520000
 8004c20:	50040000 	.word	0x50040000
 8004c24:	50040200 	.word	0x50040200
 8004c28:	20000000 	.word	0x20000000
 8004c2c:	053e2d63 	.word	0x053e2d63
 8004c30:	cb840000 	.word	0xcb840000
 8004c34:	80000001 	.word	0x80000001

08004c38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7ff f8c3 	bl	8003dd0 <LL_ADC_IsEnabled>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d14d      	bne.n	8004cec <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	4b28      	ldr	r3, [pc, #160]	; (8004cf8 <ADC_Enable+0xc0>)
 8004c58:	4013      	ands	r3, r2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00d      	beq.n	8004c7a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c62:	f043 0210 	orr.w	r2, r3, #16
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c6e:	f043 0201 	orr.w	r2, r3, #1
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e039      	b.n	8004cee <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7ff f892 	bl	8003da8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004c84:	f7fe ff02 	bl	8003a8c <HAL_GetTick>
 8004c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c8a:	e028      	b.n	8004cde <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7ff f89d 	bl	8003dd0 <LL_ADC_IsEnabled>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d104      	bne.n	8004ca6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7ff f881 	bl	8003da8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004ca6:	f7fe fef1 	bl	8003a8c <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d914      	bls.n	8004cde <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d00d      	beq.n	8004cde <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc6:	f043 0210 	orr.w	r2, r3, #16
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd2:	f043 0201 	orr.w	r2, r3, #1
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e007      	b.n	8004cee <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d1cf      	bne.n	8004c8c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	8000003f 	.word	0x8000003f

08004cfc <LL_ADC_IsEnabled>:
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d101      	bne.n	8004d14 <LL_ADC_IsEnabled+0x18>
 8004d10:	2301      	movs	r3, #1
 8004d12:	e000      	b.n	8004d16 <LL_ADC_IsEnabled+0x1a>
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <LL_ADC_REG_IsConversionOngoing>:
{
 8004d22:	b480      	push	{r7}
 8004d24:	b083      	sub	sp, #12
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f003 0304 	and.w	r3, r3, #4
 8004d32:	2b04      	cmp	r3, #4
 8004d34:	d101      	bne.n	8004d3a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004d36:	2301      	movs	r3, #1
 8004d38:	e000      	b.n	8004d3c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004d48:	b590      	push	{r4, r7, lr}
 8004d4a:	b09f      	sub	sp, #124	; 0x7c
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d52:	2300      	movs	r3, #0
 8004d54:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d101      	bne.n	8004d66 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004d62:	2302      	movs	r3, #2
 8004d64:	e093      	b.n	8004e8e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004d6e:	2300      	movs	r3, #0
 8004d70:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004d72:	2300      	movs	r3, #0
 8004d74:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a47      	ldr	r2, [pc, #284]	; (8004e98 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d102      	bne.n	8004d86 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004d80:	4b46      	ldr	r3, [pc, #280]	; (8004e9c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004d82:	60bb      	str	r3, [r7, #8]
 8004d84:	e001      	b.n	8004d8a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004d86:	2300      	movs	r3, #0
 8004d88:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10b      	bne.n	8004da8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d94:	f043 0220 	orr.w	r2, r3, #32
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e072      	b.n	8004e8e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7ff ffb9 	bl	8004d22 <LL_ADC_REG_IsConversionOngoing>
 8004db0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7ff ffb3 	bl	8004d22 <LL_ADC_REG_IsConversionOngoing>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d154      	bne.n	8004e6c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004dc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d151      	bne.n	8004e6c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004dc8:	4b35      	ldr	r3, [pc, #212]	; (8004ea0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004dca:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d02c      	beq.n	8004e2e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	6859      	ldr	r1, [r3, #4]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004de6:	035b      	lsls	r3, r3, #13
 8004de8:	430b      	orrs	r3, r1
 8004dea:	431a      	orrs	r2, r3
 8004dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004df0:	4829      	ldr	r0, [pc, #164]	; (8004e98 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004df2:	f7ff ff83 	bl	8004cfc <LL_ADC_IsEnabled>
 8004df6:	4604      	mov	r4, r0
 8004df8:	4828      	ldr	r0, [pc, #160]	; (8004e9c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004dfa:	f7ff ff7f 	bl	8004cfc <LL_ADC_IsEnabled>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	431c      	orrs	r4, r3
 8004e02:	4828      	ldr	r0, [pc, #160]	; (8004ea4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004e04:	f7ff ff7a 	bl	8004cfc <LL_ADC_IsEnabled>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	4323      	orrs	r3, r4
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d137      	bne.n	8004e80 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004e18:	f023 030f 	bic.w	r3, r3, #15
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	6811      	ldr	r1, [r2, #0]
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	6892      	ldr	r2, [r2, #8]
 8004e24:	430a      	orrs	r2, r1
 8004e26:	431a      	orrs	r2, r3
 8004e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e2a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e2c:	e028      	b.n	8004e80 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e38:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e3a:	4817      	ldr	r0, [pc, #92]	; (8004e98 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004e3c:	f7ff ff5e 	bl	8004cfc <LL_ADC_IsEnabled>
 8004e40:	4604      	mov	r4, r0
 8004e42:	4816      	ldr	r0, [pc, #88]	; (8004e9c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004e44:	f7ff ff5a 	bl	8004cfc <LL_ADC_IsEnabled>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	431c      	orrs	r4, r3
 8004e4c:	4815      	ldr	r0, [pc, #84]	; (8004ea4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004e4e:	f7ff ff55 	bl	8004cfc <LL_ADC_IsEnabled>
 8004e52:	4603      	mov	r3, r0
 8004e54:	4323      	orrs	r3, r4
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d112      	bne.n	8004e80 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004e62:	f023 030f 	bic.w	r3, r3, #15
 8004e66:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e68:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e6a:	e009      	b.n	8004e80 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e70:	f043 0220 	orr.w	r2, r3, #32
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004e7e:	e000      	b.n	8004e82 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e80:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004e8a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	377c      	adds	r7, #124	; 0x7c
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd90      	pop	{r4, r7, pc}
 8004e96:	bf00      	nop
 8004e98:	50040000 	.word	0x50040000
 8004e9c:	50040100 	.word	0x50040100
 8004ea0:	50040300 	.word	0x50040300
 8004ea4:	50040200 	.word	0x50040200

08004ea8 <__NVIC_SetPriorityGrouping>:
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f003 0307 	and.w	r3, r3, #7
 8004eb6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004eb8:	4b0c      	ldr	r3, [pc, #48]	; (8004eec <__NVIC_SetPriorityGrouping+0x44>)
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ed0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004eda:	4a04      	ldr	r2, [pc, #16]	; (8004eec <__NVIC_SetPriorityGrouping+0x44>)
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	60d3      	str	r3, [r2, #12]
}
 8004ee0:	bf00      	nop
 8004ee2:	3714      	adds	r7, #20
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr
 8004eec:	e000ed00 	.word	0xe000ed00

08004ef0 <__NVIC_GetPriorityGrouping>:
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ef4:	4b04      	ldr	r3, [pc, #16]	; (8004f08 <__NVIC_GetPriorityGrouping+0x18>)
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	0a1b      	lsrs	r3, r3, #8
 8004efa:	f003 0307 	and.w	r3, r3, #7
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	e000ed00 	.word	0xe000ed00

08004f0c <__NVIC_EnableIRQ>:
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	4603      	mov	r3, r0
 8004f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	db0b      	blt.n	8004f36 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f1e:	79fb      	ldrb	r3, [r7, #7]
 8004f20:	f003 021f 	and.w	r2, r3, #31
 8004f24:	4907      	ldr	r1, [pc, #28]	; (8004f44 <__NVIC_EnableIRQ+0x38>)
 8004f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f2a:	095b      	lsrs	r3, r3, #5
 8004f2c:	2001      	movs	r0, #1
 8004f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8004f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004f36:	bf00      	nop
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	e000e100 	.word	0xe000e100

08004f48 <__NVIC_SetPriority>:
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	4603      	mov	r3, r0
 8004f50:	6039      	str	r1, [r7, #0]
 8004f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	db0a      	blt.n	8004f72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	b2da      	uxtb	r2, r3
 8004f60:	490c      	ldr	r1, [pc, #48]	; (8004f94 <__NVIC_SetPriority+0x4c>)
 8004f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f66:	0112      	lsls	r2, r2, #4
 8004f68:	b2d2      	uxtb	r2, r2
 8004f6a:	440b      	add	r3, r1
 8004f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004f70:	e00a      	b.n	8004f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	b2da      	uxtb	r2, r3
 8004f76:	4908      	ldr	r1, [pc, #32]	; (8004f98 <__NVIC_SetPriority+0x50>)
 8004f78:	79fb      	ldrb	r3, [r7, #7]
 8004f7a:	f003 030f 	and.w	r3, r3, #15
 8004f7e:	3b04      	subs	r3, #4
 8004f80:	0112      	lsls	r2, r2, #4
 8004f82:	b2d2      	uxtb	r2, r2
 8004f84:	440b      	add	r3, r1
 8004f86:	761a      	strb	r2, [r3, #24]
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr
 8004f94:	e000e100 	.word	0xe000e100
 8004f98:	e000ed00 	.word	0xe000ed00

08004f9c <NVIC_EncodePriority>:
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b089      	sub	sp, #36	; 0x24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f003 0307 	and.w	r3, r3, #7
 8004fae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	f1c3 0307 	rsb	r3, r3, #7
 8004fb6:	2b04      	cmp	r3, #4
 8004fb8:	bf28      	it	cs
 8004fba:	2304      	movcs	r3, #4
 8004fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	3304      	adds	r3, #4
 8004fc2:	2b06      	cmp	r3, #6
 8004fc4:	d902      	bls.n	8004fcc <NVIC_EncodePriority+0x30>
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	3b03      	subs	r3, #3
 8004fca:	e000      	b.n	8004fce <NVIC_EncodePriority+0x32>
 8004fcc:	2300      	movs	r3, #0
 8004fce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fda:	43da      	mvns	r2, r3
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	401a      	ands	r2, r3
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004fe4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	fa01 f303 	lsl.w	r3, r1, r3
 8004fee:	43d9      	mvns	r1, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ff4:	4313      	orrs	r3, r2
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3724      	adds	r7, #36	; 0x24
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b082      	sub	sp, #8
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7ff ff4c 	bl	8004ea8 <__NVIC_SetPriorityGrouping>
}
 8005010:	bf00      	nop
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af00      	add	r7, sp, #0
 800501e:	4603      	mov	r3, r0
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
 8005024:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005026:	2300      	movs	r3, #0
 8005028:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800502a:	f7ff ff61 	bl	8004ef0 <__NVIC_GetPriorityGrouping>
 800502e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	68b9      	ldr	r1, [r7, #8]
 8005034:	6978      	ldr	r0, [r7, #20]
 8005036:	f7ff ffb1 	bl	8004f9c <NVIC_EncodePriority>
 800503a:	4602      	mov	r2, r0
 800503c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005040:	4611      	mov	r1, r2
 8005042:	4618      	mov	r0, r3
 8005044:	f7ff ff80 	bl	8004f48 <__NVIC_SetPriority>
}
 8005048:	bf00      	nop
 800504a:	3718      	adds	r7, #24
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	4603      	mov	r3, r0
 8005058:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800505a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800505e:	4618      	mov	r0, r3
 8005060:	f7ff ff54 	bl	8004f0c <__NVIC_EnableIRQ>
}
 8005064:	bf00      	nop
 8005066:	3708      	adds	r7, #8
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800506c:	b480      	push	{r7}
 800506e:	b087      	sub	sp, #28
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005076:	2300      	movs	r3, #0
 8005078:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800507a:	e17f      	b.n	800537c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	2101      	movs	r1, #1
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	fa01 f303 	lsl.w	r3, r1, r3
 8005088:	4013      	ands	r3, r2
 800508a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2b00      	cmp	r3, #0
 8005090:	f000 8171 	beq.w	8005376 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d00b      	beq.n	80050b4 <HAL_GPIO_Init+0x48>
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d007      	beq.n	80050b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80050a8:	2b11      	cmp	r3, #17
 80050aa:	d003      	beq.n	80050b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	2b12      	cmp	r3, #18
 80050b2:	d130      	bne.n	8005116 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	2203      	movs	r2, #3
 80050c0:	fa02 f303 	lsl.w	r3, r2, r3
 80050c4:	43db      	mvns	r3, r3
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	4013      	ands	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	fa02 f303 	lsl.w	r3, r2, r3
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	4313      	orrs	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80050ea:	2201      	movs	r2, #1
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	fa02 f303 	lsl.w	r3, r2, r3
 80050f2:	43db      	mvns	r3, r3
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	4013      	ands	r3, r2
 80050f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	091b      	lsrs	r3, r3, #4
 8005100:	f003 0201 	and.w	r2, r3, #1
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	fa02 f303 	lsl.w	r3, r2, r3
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	4313      	orrs	r3, r2
 800510e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f003 0303 	and.w	r3, r3, #3
 800511e:	2b03      	cmp	r3, #3
 8005120:	d118      	bne.n	8005154 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005126:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005128:	2201      	movs	r2, #1
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	fa02 f303 	lsl.w	r3, r2, r3
 8005130:	43db      	mvns	r3, r3
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	4013      	ands	r3, r2
 8005136:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	08db      	lsrs	r3, r3, #3
 800513e:	f003 0201 	and.w	r2, r3, #1
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	fa02 f303 	lsl.w	r3, r2, r3
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	4313      	orrs	r3, r2
 800514c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	2203      	movs	r2, #3
 8005160:	fa02 f303 	lsl.w	r3, r2, r3
 8005164:	43db      	mvns	r3, r3
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	4013      	ands	r3, r2
 800516a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	fa02 f303 	lsl.w	r3, r2, r3
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	4313      	orrs	r3, r2
 800517c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	2b02      	cmp	r3, #2
 800518a:	d003      	beq.n	8005194 <HAL_GPIO_Init+0x128>
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	2b12      	cmp	r3, #18
 8005192:	d123      	bne.n	80051dc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	08da      	lsrs	r2, r3, #3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	3208      	adds	r2, #8
 800519c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f003 0307 	and.w	r3, r3, #7
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	220f      	movs	r2, #15
 80051ac:	fa02 f303 	lsl.w	r3, r2, r3
 80051b0:	43db      	mvns	r3, r3
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	4013      	ands	r3, r2
 80051b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	691a      	ldr	r2, [r3, #16]
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f003 0307 	and.w	r3, r3, #7
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	fa02 f303 	lsl.w	r3, r2, r3
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	08da      	lsrs	r2, r3, #3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	3208      	adds	r2, #8
 80051d6:	6939      	ldr	r1, [r7, #16]
 80051d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	2203      	movs	r2, #3
 80051e8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ec:	43db      	mvns	r3, r3
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	4013      	ands	r3, r2
 80051f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f003 0203 	and.w	r2, r3, #3
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	fa02 f303 	lsl.w	r3, r2, r3
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	4313      	orrs	r3, r2
 8005208:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 80ac 	beq.w	8005376 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800521e:	4b5f      	ldr	r3, [pc, #380]	; (800539c <HAL_GPIO_Init+0x330>)
 8005220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005222:	4a5e      	ldr	r2, [pc, #376]	; (800539c <HAL_GPIO_Init+0x330>)
 8005224:	f043 0301 	orr.w	r3, r3, #1
 8005228:	6613      	str	r3, [r2, #96]	; 0x60
 800522a:	4b5c      	ldr	r3, [pc, #368]	; (800539c <HAL_GPIO_Init+0x330>)
 800522c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	60bb      	str	r3, [r7, #8]
 8005234:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005236:	4a5a      	ldr	r2, [pc, #360]	; (80053a0 <HAL_GPIO_Init+0x334>)
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	089b      	lsrs	r3, r3, #2
 800523c:	3302      	adds	r3, #2
 800523e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005242:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f003 0303 	and.w	r3, r3, #3
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	220f      	movs	r2, #15
 800524e:	fa02 f303 	lsl.w	r3, r2, r3
 8005252:	43db      	mvns	r3, r3
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	4013      	ands	r3, r2
 8005258:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005260:	d025      	beq.n	80052ae <HAL_GPIO_Init+0x242>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a4f      	ldr	r2, [pc, #316]	; (80053a4 <HAL_GPIO_Init+0x338>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d01f      	beq.n	80052aa <HAL_GPIO_Init+0x23e>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a4e      	ldr	r2, [pc, #312]	; (80053a8 <HAL_GPIO_Init+0x33c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d019      	beq.n	80052a6 <HAL_GPIO_Init+0x23a>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a4d      	ldr	r2, [pc, #308]	; (80053ac <HAL_GPIO_Init+0x340>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d013      	beq.n	80052a2 <HAL_GPIO_Init+0x236>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a4c      	ldr	r2, [pc, #304]	; (80053b0 <HAL_GPIO_Init+0x344>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d00d      	beq.n	800529e <HAL_GPIO_Init+0x232>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a4b      	ldr	r2, [pc, #300]	; (80053b4 <HAL_GPIO_Init+0x348>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d007      	beq.n	800529a <HAL_GPIO_Init+0x22e>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a4a      	ldr	r2, [pc, #296]	; (80053b8 <HAL_GPIO_Init+0x34c>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d101      	bne.n	8005296 <HAL_GPIO_Init+0x22a>
 8005292:	2306      	movs	r3, #6
 8005294:	e00c      	b.n	80052b0 <HAL_GPIO_Init+0x244>
 8005296:	2307      	movs	r3, #7
 8005298:	e00a      	b.n	80052b0 <HAL_GPIO_Init+0x244>
 800529a:	2305      	movs	r3, #5
 800529c:	e008      	b.n	80052b0 <HAL_GPIO_Init+0x244>
 800529e:	2304      	movs	r3, #4
 80052a0:	e006      	b.n	80052b0 <HAL_GPIO_Init+0x244>
 80052a2:	2303      	movs	r3, #3
 80052a4:	e004      	b.n	80052b0 <HAL_GPIO_Init+0x244>
 80052a6:	2302      	movs	r3, #2
 80052a8:	e002      	b.n	80052b0 <HAL_GPIO_Init+0x244>
 80052aa:	2301      	movs	r3, #1
 80052ac:	e000      	b.n	80052b0 <HAL_GPIO_Init+0x244>
 80052ae:	2300      	movs	r3, #0
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	f002 0203 	and.w	r2, r2, #3
 80052b6:	0092      	lsls	r2, r2, #2
 80052b8:	4093      	lsls	r3, r2
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	4313      	orrs	r3, r2
 80052be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80052c0:	4937      	ldr	r1, [pc, #220]	; (80053a0 <HAL_GPIO_Init+0x334>)
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	089b      	lsrs	r3, r3, #2
 80052c6:	3302      	adds	r3, #2
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80052ce:	4b3b      	ldr	r3, [pc, #236]	; (80053bc <HAL_GPIO_Init+0x350>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	43db      	mvns	r3, r3
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	4013      	ands	r3, r2
 80052dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80052f2:	4a32      	ldr	r2, [pc, #200]	; (80053bc <HAL_GPIO_Init+0x350>)
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80052f8:	4b30      	ldr	r3, [pc, #192]	; (80053bc <HAL_GPIO_Init+0x350>)
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	43db      	mvns	r3, r3
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	4013      	ands	r3, r2
 8005306:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d003      	beq.n	800531c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	4313      	orrs	r3, r2
 800531a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800531c:	4a27      	ldr	r2, [pc, #156]	; (80053bc <HAL_GPIO_Init+0x350>)
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005322:	4b26      	ldr	r3, [pc, #152]	; (80053bc <HAL_GPIO_Init+0x350>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	43db      	mvns	r3, r3
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	4013      	ands	r3, r2
 8005330:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4313      	orrs	r3, r2
 8005344:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005346:	4a1d      	ldr	r2, [pc, #116]	; (80053bc <HAL_GPIO_Init+0x350>)
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800534c:	4b1b      	ldr	r3, [pc, #108]	; (80053bc <HAL_GPIO_Init+0x350>)
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	43db      	mvns	r3, r3
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	4013      	ands	r3, r2
 800535a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d003      	beq.n	8005370 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4313      	orrs	r3, r2
 800536e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005370:	4a12      	ldr	r2, [pc, #72]	; (80053bc <HAL_GPIO_Init+0x350>)
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	3301      	adds	r3, #1
 800537a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	fa22 f303 	lsr.w	r3, r2, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	f47f ae78 	bne.w	800507c <HAL_GPIO_Init+0x10>
  }
}
 800538c:	bf00      	nop
 800538e:	bf00      	nop
 8005390:	371c      	adds	r7, #28
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	40021000 	.word	0x40021000
 80053a0:	40010000 	.word	0x40010000
 80053a4:	48000400 	.word	0x48000400
 80053a8:	48000800 	.word	0x48000800
 80053ac:	48000c00 	.word	0x48000c00
 80053b0:	48001000 	.word	0x48001000
 80053b4:	48001400 	.word	0x48001400
 80053b8:	48001800 	.word	0x48001800
 80053bc:	40010400 	.word	0x40010400

080053c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	460b      	mov	r3, r1
 80053ca:	807b      	strh	r3, [r7, #2]
 80053cc:	4613      	mov	r3, r2
 80053ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053d0:	787b      	ldrb	r3, [r7, #1]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80053d6:	887a      	ldrh	r2, [r7, #2]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80053dc:	e002      	b.n	80053e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80053de:	887a      	ldrh	r2, [r7, #2]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80053f0:	b480      	push	{r7}
 80053f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80053f4:	4b04      	ldr	r3, [pc, #16]	; (8005408 <HAL_PWREx_GetVoltageRange+0x18>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	40007000 	.word	0x40007000

0800540c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800541a:	d130      	bne.n	800547e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800541c:	4b23      	ldr	r3, [pc, #140]	; (80054ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005428:	d038      	beq.n	800549c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800542a:	4b20      	ldr	r3, [pc, #128]	; (80054ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005432:	4a1e      	ldr	r2, [pc, #120]	; (80054ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005434:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005438:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800543a:	4b1d      	ldr	r3, [pc, #116]	; (80054b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2232      	movs	r2, #50	; 0x32
 8005440:	fb02 f303 	mul.w	r3, r2, r3
 8005444:	4a1b      	ldr	r2, [pc, #108]	; (80054b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005446:	fba2 2303 	umull	r2, r3, r2, r3
 800544a:	0c9b      	lsrs	r3, r3, #18
 800544c:	3301      	adds	r3, #1
 800544e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005450:	e002      	b.n	8005458 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	3b01      	subs	r3, #1
 8005456:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005458:	4b14      	ldr	r3, [pc, #80]	; (80054ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800545a:	695b      	ldr	r3, [r3, #20]
 800545c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005464:	d102      	bne.n	800546c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1f2      	bne.n	8005452 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800546c:	4b0f      	ldr	r3, [pc, #60]	; (80054ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005478:	d110      	bne.n	800549c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e00f      	b.n	800549e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800547e:	4b0b      	ldr	r3, [pc, #44]	; (80054ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800548a:	d007      	beq.n	800549c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800548c:	4b07      	ldr	r3, [pc, #28]	; (80054ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005494:	4a05      	ldr	r2, [pc, #20]	; (80054ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005496:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800549a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	40007000 	.word	0x40007000
 80054b0:	20000000 	.word	0x20000000
 80054b4:	431bde83 	.word	0x431bde83

080054b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b088      	sub	sp, #32
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e3d4      	b.n	8005c74 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054ca:	4ba1      	ldr	r3, [pc, #644]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f003 030c 	and.w	r3, r3, #12
 80054d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054d4:	4b9e      	ldr	r3, [pc, #632]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f003 0303 	and.w	r3, r3, #3
 80054dc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0310 	and.w	r3, r3, #16
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f000 80e4 	beq.w	80056b4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d007      	beq.n	8005502 <HAL_RCC_OscConfig+0x4a>
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	2b0c      	cmp	r3, #12
 80054f6:	f040 808b 	bne.w	8005610 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	f040 8087 	bne.w	8005610 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005502:	4b93      	ldr	r3, [pc, #588]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d005      	beq.n	800551a <HAL_RCC_OscConfig+0x62>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e3ac      	b.n	8005c74 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1a      	ldr	r2, [r3, #32]
 800551e:	4b8c      	ldr	r3, [pc, #560]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0308 	and.w	r3, r3, #8
 8005526:	2b00      	cmp	r3, #0
 8005528:	d004      	beq.n	8005534 <HAL_RCC_OscConfig+0x7c>
 800552a:	4b89      	ldr	r3, [pc, #548]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005532:	e005      	b.n	8005540 <HAL_RCC_OscConfig+0x88>
 8005534:	4b86      	ldr	r3, [pc, #536]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 8005536:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800553a:	091b      	lsrs	r3, r3, #4
 800553c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005540:	4293      	cmp	r3, r2
 8005542:	d223      	bcs.n	800558c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	4618      	mov	r0, r3
 800554a:	f000 fd5d 	bl	8006008 <RCC_SetFlashLatencyFromMSIRange>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d001      	beq.n	8005558 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e38d      	b.n	8005c74 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005558:	4b7d      	ldr	r3, [pc, #500]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a7c      	ldr	r2, [pc, #496]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 800555e:	f043 0308 	orr.w	r3, r3, #8
 8005562:	6013      	str	r3, [r2, #0]
 8005564:	4b7a      	ldr	r3, [pc, #488]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	4977      	ldr	r1, [pc, #476]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 8005572:	4313      	orrs	r3, r2
 8005574:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005576:	4b76      	ldr	r3, [pc, #472]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	021b      	lsls	r3, r3, #8
 8005584:	4972      	ldr	r1, [pc, #456]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 8005586:	4313      	orrs	r3, r2
 8005588:	604b      	str	r3, [r1, #4]
 800558a:	e025      	b.n	80055d8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800558c:	4b70      	ldr	r3, [pc, #448]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a6f      	ldr	r2, [pc, #444]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 8005592:	f043 0308 	orr.w	r3, r3, #8
 8005596:	6013      	str	r3, [r2, #0]
 8005598:	4b6d      	ldr	r3, [pc, #436]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	496a      	ldr	r1, [pc, #424]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055aa:	4b69      	ldr	r3, [pc, #420]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	021b      	lsls	r3, r3, #8
 80055b8:	4965      	ldr	r1, [pc, #404]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d109      	bne.n	80055d8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a1b      	ldr	r3, [r3, #32]
 80055c8:	4618      	mov	r0, r3
 80055ca:	f000 fd1d 	bl	8006008 <RCC_SetFlashLatencyFromMSIRange>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d001      	beq.n	80055d8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e34d      	b.n	8005c74 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80055d8:	f000 fc36 	bl	8005e48 <HAL_RCC_GetSysClockFreq>
 80055dc:	4602      	mov	r2, r0
 80055de:	4b5c      	ldr	r3, [pc, #368]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	091b      	lsrs	r3, r3, #4
 80055e4:	f003 030f 	and.w	r3, r3, #15
 80055e8:	495a      	ldr	r1, [pc, #360]	; (8005754 <HAL_RCC_OscConfig+0x29c>)
 80055ea:	5ccb      	ldrb	r3, [r1, r3]
 80055ec:	f003 031f 	and.w	r3, r3, #31
 80055f0:	fa22 f303 	lsr.w	r3, r2, r3
 80055f4:	4a58      	ldr	r2, [pc, #352]	; (8005758 <HAL_RCC_OscConfig+0x2a0>)
 80055f6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80055f8:	4b58      	ldr	r3, [pc, #352]	; (800575c <HAL_RCC_OscConfig+0x2a4>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7fe f8ab 	bl	8003758 <HAL_InitTick>
 8005602:	4603      	mov	r3, r0
 8005604:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005606:	7bfb      	ldrb	r3, [r7, #15]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d052      	beq.n	80056b2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800560c:	7bfb      	ldrb	r3, [r7, #15]
 800560e:	e331      	b.n	8005c74 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d032      	beq.n	800567e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005618:	4b4d      	ldr	r3, [pc, #308]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a4c      	ldr	r2, [pc, #304]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 800561e:	f043 0301 	orr.w	r3, r3, #1
 8005622:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005624:	f7fe fa32 	bl	8003a8c <HAL_GetTick>
 8005628:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800562a:	e008      	b.n	800563e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800562c:	f7fe fa2e 	bl	8003a8c <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b02      	cmp	r3, #2
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e31a      	b.n	8005c74 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800563e:	4b44      	ldr	r3, [pc, #272]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d0f0      	beq.n	800562c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800564a:	4b41      	ldr	r3, [pc, #260]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a40      	ldr	r2, [pc, #256]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 8005650:	f043 0308 	orr.w	r3, r3, #8
 8005654:	6013      	str	r3, [r2, #0]
 8005656:	4b3e      	ldr	r3, [pc, #248]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	493b      	ldr	r1, [pc, #236]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 8005664:	4313      	orrs	r3, r2
 8005666:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005668:	4b39      	ldr	r3, [pc, #228]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	021b      	lsls	r3, r3, #8
 8005676:	4936      	ldr	r1, [pc, #216]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 8005678:	4313      	orrs	r3, r2
 800567a:	604b      	str	r3, [r1, #4]
 800567c:	e01a      	b.n	80056b4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800567e:	4b34      	ldr	r3, [pc, #208]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a33      	ldr	r2, [pc, #204]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 8005684:	f023 0301 	bic.w	r3, r3, #1
 8005688:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800568a:	f7fe f9ff 	bl	8003a8c <HAL_GetTick>
 800568e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005690:	e008      	b.n	80056a4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005692:	f7fe f9fb 	bl	8003a8c <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	2b02      	cmp	r3, #2
 800569e:	d901      	bls.n	80056a4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e2e7      	b.n	8005c74 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80056a4:	4b2a      	ldr	r3, [pc, #168]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0302 	and.w	r3, r3, #2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1f0      	bne.n	8005692 <HAL_RCC_OscConfig+0x1da>
 80056b0:	e000      	b.n	80056b4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80056b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d074      	beq.n	80057aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	2b08      	cmp	r3, #8
 80056c4:	d005      	beq.n	80056d2 <HAL_RCC_OscConfig+0x21a>
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	2b0c      	cmp	r3, #12
 80056ca:	d10e      	bne.n	80056ea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	2b03      	cmp	r3, #3
 80056d0:	d10b      	bne.n	80056ea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056d2:	4b1f      	ldr	r3, [pc, #124]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d064      	beq.n	80057a8 <HAL_RCC_OscConfig+0x2f0>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d160      	bne.n	80057a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e2c4      	b.n	8005c74 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056f2:	d106      	bne.n	8005702 <HAL_RCC_OscConfig+0x24a>
 80056f4:	4b16      	ldr	r3, [pc, #88]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a15      	ldr	r2, [pc, #84]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 80056fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056fe:	6013      	str	r3, [r2, #0]
 8005700:	e01d      	b.n	800573e <HAL_RCC_OscConfig+0x286>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800570a:	d10c      	bne.n	8005726 <HAL_RCC_OscConfig+0x26e>
 800570c:	4b10      	ldr	r3, [pc, #64]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a0f      	ldr	r2, [pc, #60]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 8005712:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005716:	6013      	str	r3, [r2, #0]
 8005718:	4b0d      	ldr	r3, [pc, #52]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a0c      	ldr	r2, [pc, #48]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 800571e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005722:	6013      	str	r3, [r2, #0]
 8005724:	e00b      	b.n	800573e <HAL_RCC_OscConfig+0x286>
 8005726:	4b0a      	ldr	r3, [pc, #40]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a09      	ldr	r2, [pc, #36]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 800572c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	4b07      	ldr	r3, [pc, #28]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a06      	ldr	r2, [pc, #24]	; (8005750 <HAL_RCC_OscConfig+0x298>)
 8005738:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800573c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d01c      	beq.n	8005780 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005746:	f7fe f9a1 	bl	8003a8c <HAL_GetTick>
 800574a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800574c:	e011      	b.n	8005772 <HAL_RCC_OscConfig+0x2ba>
 800574e:	bf00      	nop
 8005750:	40021000 	.word	0x40021000
 8005754:	0800c830 	.word	0x0800c830
 8005758:	20000000 	.word	0x20000000
 800575c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005760:	f7fe f994 	bl	8003a8c <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b64      	cmp	r3, #100	; 0x64
 800576c:	d901      	bls.n	8005772 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e280      	b.n	8005c74 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005772:	4baf      	ldr	r3, [pc, #700]	; (8005a30 <HAL_RCC_OscConfig+0x578>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d0f0      	beq.n	8005760 <HAL_RCC_OscConfig+0x2a8>
 800577e:	e014      	b.n	80057aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005780:	f7fe f984 	bl	8003a8c <HAL_GetTick>
 8005784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005786:	e008      	b.n	800579a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005788:	f7fe f980 	bl	8003a8c <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b64      	cmp	r3, #100	; 0x64
 8005794:	d901      	bls.n	800579a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e26c      	b.n	8005c74 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800579a:	4ba5      	ldr	r3, [pc, #660]	; (8005a30 <HAL_RCC_OscConfig+0x578>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1f0      	bne.n	8005788 <HAL_RCC_OscConfig+0x2d0>
 80057a6:	e000      	b.n	80057aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d060      	beq.n	8005878 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	2b04      	cmp	r3, #4
 80057ba:	d005      	beq.n	80057c8 <HAL_RCC_OscConfig+0x310>
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	2b0c      	cmp	r3, #12
 80057c0:	d119      	bne.n	80057f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d116      	bne.n	80057f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057c8:	4b99      	ldr	r3, [pc, #612]	; (8005a30 <HAL_RCC_OscConfig+0x578>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d005      	beq.n	80057e0 <HAL_RCC_OscConfig+0x328>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d101      	bne.n	80057e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e249      	b.n	8005c74 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057e0:	4b93      	ldr	r3, [pc, #588]	; (8005a30 <HAL_RCC_OscConfig+0x578>)
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	061b      	lsls	r3, r3, #24
 80057ee:	4990      	ldr	r1, [pc, #576]	; (8005a30 <HAL_RCC_OscConfig+0x578>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057f4:	e040      	b.n	8005878 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d023      	beq.n	8005846 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057fe:	4b8c      	ldr	r3, [pc, #560]	; (8005a30 <HAL_RCC_OscConfig+0x578>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a8b      	ldr	r2, [pc, #556]	; (8005a30 <HAL_RCC_OscConfig+0x578>)
 8005804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800580a:	f7fe f93f 	bl	8003a8c <HAL_GetTick>
 800580e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005810:	e008      	b.n	8005824 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005812:	f7fe f93b 	bl	8003a8c <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b02      	cmp	r3, #2
 800581e:	d901      	bls.n	8005824 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e227      	b.n	8005c74 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005824:	4b82      	ldr	r3, [pc, #520]	; (8005a30 <HAL_RCC_OscConfig+0x578>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0f0      	beq.n	8005812 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005830:	4b7f      	ldr	r3, [pc, #508]	; (8005a30 <HAL_RCC_OscConfig+0x578>)
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	061b      	lsls	r3, r3, #24
 800583e:	497c      	ldr	r1, [pc, #496]	; (8005a30 <HAL_RCC_OscConfig+0x578>)
 8005840:	4313      	orrs	r3, r2
 8005842:	604b      	str	r3, [r1, #4]
 8005844:	e018      	b.n	8005878 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005846:	4b7a      	ldr	r3, [pc, #488]	; (8005a30 <HAL_RCC_OscConfig+0x578>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a79      	ldr	r2, [pc, #484]	; (8005a30 <HAL_RCC_OscConfig+0x578>)
 800584c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005850:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005852:	f7fe f91b 	bl	8003a8c <HAL_GetTick>
 8005856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005858:	e008      	b.n	800586c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800585a:	f7fe f917 	bl	8003a8c <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b02      	cmp	r3, #2
 8005866:	d901      	bls.n	800586c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e203      	b.n	8005c74 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800586c:	4b70      	ldr	r3, [pc, #448]	; (8005a30 <HAL_RCC_OscConfig+0x578>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1f0      	bne.n	800585a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0308 	and.w	r3, r3, #8
 8005880:	2b00      	cmp	r3, #0
 8005882:	d03c      	beq.n	80058fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	695b      	ldr	r3, [r3, #20]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d01c      	beq.n	80058c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800588c:	4b68      	ldr	r3, [pc, #416]	; (8005a30 <HAL_RCC_OscConfig+0x578>)
 800588e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005892:	4a67      	ldr	r2, [pc, #412]	; (8005a30 <HAL_RCC_OscConfig+0x578>)
 8005894:	f043 0301 	orr.w	r3, r3, #1
 8005898:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800589c:	f7fe f8f6 	bl	8003a8c <HAL_GetTick>
 80058a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058a2:	e008      	b.n	80058b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058a4:	f7fe f8f2 	bl	8003a8c <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e1de      	b.n	8005c74 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058b6:	4b5e      	ldr	r3, [pc, #376]	; (8005a30 <HAL_RCC_OscConfig+0x578>)
 80058b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0ef      	beq.n	80058a4 <HAL_RCC_OscConfig+0x3ec>
 80058c4:	e01b      	b.n	80058fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058c6:	4b5a      	ldr	r3, [pc, #360]	; (8005a30 <HAL_RCC_OscConfig+0x578>)
 80058c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058cc:	4a58      	ldr	r2, [pc, #352]	; (8005a30 <HAL_RCC_OscConfig+0x578>)
 80058ce:	f023 0301 	bic.w	r3, r3, #1
 80058d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058d6:	f7fe f8d9 	bl	8003a8c <HAL_GetTick>
 80058da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058dc:	e008      	b.n	80058f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058de:	f7fe f8d5 	bl	8003a8c <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d901      	bls.n	80058f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e1c1      	b.n	8005c74 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058f0:	4b4f      	ldr	r3, [pc, #316]	; (8005a30 <HAL_RCC_OscConfig+0x578>)
 80058f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1ef      	bne.n	80058de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0304 	and.w	r3, r3, #4
 8005906:	2b00      	cmp	r3, #0
 8005908:	f000 80a6 	beq.w	8005a58 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800590c:	2300      	movs	r3, #0
 800590e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005910:	4b47      	ldr	r3, [pc, #284]	; (8005a30 <HAL_RCC_OscConfig+0x578>)
 8005912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10d      	bne.n	8005938 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800591c:	4b44      	ldr	r3, [pc, #272]	; (8005a30 <HAL_RCC_OscConfig+0x578>)
 800591e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005920:	4a43      	ldr	r2, [pc, #268]	; (8005a30 <HAL_RCC_OscConfig+0x578>)
 8005922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005926:	6593      	str	r3, [r2, #88]	; 0x58
 8005928:	4b41      	ldr	r3, [pc, #260]	; (8005a30 <HAL_RCC_OscConfig+0x578>)
 800592a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800592c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005930:	60bb      	str	r3, [r7, #8]
 8005932:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005934:	2301      	movs	r3, #1
 8005936:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005938:	4b3e      	ldr	r3, [pc, #248]	; (8005a34 <HAL_RCC_OscConfig+0x57c>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005940:	2b00      	cmp	r3, #0
 8005942:	d118      	bne.n	8005976 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005944:	4b3b      	ldr	r3, [pc, #236]	; (8005a34 <HAL_RCC_OscConfig+0x57c>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a3a      	ldr	r2, [pc, #232]	; (8005a34 <HAL_RCC_OscConfig+0x57c>)
 800594a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800594e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005950:	f7fe f89c 	bl	8003a8c <HAL_GetTick>
 8005954:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005956:	e008      	b.n	800596a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005958:	f7fe f898 	bl	8003a8c <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	2b02      	cmp	r3, #2
 8005964:	d901      	bls.n	800596a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e184      	b.n	8005c74 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800596a:	4b32      	ldr	r3, [pc, #200]	; (8005a34 <HAL_RCC_OscConfig+0x57c>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0f0      	beq.n	8005958 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d108      	bne.n	8005990 <HAL_RCC_OscConfig+0x4d8>
 800597e:	4b2c      	ldr	r3, [pc, #176]	; (8005a30 <HAL_RCC_OscConfig+0x578>)
 8005980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005984:	4a2a      	ldr	r2, [pc, #168]	; (8005a30 <HAL_RCC_OscConfig+0x578>)
 8005986:	f043 0301 	orr.w	r3, r3, #1
 800598a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800598e:	e024      	b.n	80059da <HAL_RCC_OscConfig+0x522>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	2b05      	cmp	r3, #5
 8005996:	d110      	bne.n	80059ba <HAL_RCC_OscConfig+0x502>
 8005998:	4b25      	ldr	r3, [pc, #148]	; (8005a30 <HAL_RCC_OscConfig+0x578>)
 800599a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800599e:	4a24      	ldr	r2, [pc, #144]	; (8005a30 <HAL_RCC_OscConfig+0x578>)
 80059a0:	f043 0304 	orr.w	r3, r3, #4
 80059a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059a8:	4b21      	ldr	r3, [pc, #132]	; (8005a30 <HAL_RCC_OscConfig+0x578>)
 80059aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ae:	4a20      	ldr	r2, [pc, #128]	; (8005a30 <HAL_RCC_OscConfig+0x578>)
 80059b0:	f043 0301 	orr.w	r3, r3, #1
 80059b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059b8:	e00f      	b.n	80059da <HAL_RCC_OscConfig+0x522>
 80059ba:	4b1d      	ldr	r3, [pc, #116]	; (8005a30 <HAL_RCC_OscConfig+0x578>)
 80059bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059c0:	4a1b      	ldr	r2, [pc, #108]	; (8005a30 <HAL_RCC_OscConfig+0x578>)
 80059c2:	f023 0301 	bic.w	r3, r3, #1
 80059c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059ca:	4b19      	ldr	r3, [pc, #100]	; (8005a30 <HAL_RCC_OscConfig+0x578>)
 80059cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d0:	4a17      	ldr	r2, [pc, #92]	; (8005a30 <HAL_RCC_OscConfig+0x578>)
 80059d2:	f023 0304 	bic.w	r3, r3, #4
 80059d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d016      	beq.n	8005a10 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e2:	f7fe f853 	bl	8003a8c <HAL_GetTick>
 80059e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059e8:	e00a      	b.n	8005a00 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059ea:	f7fe f84f 	bl	8003a8c <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d901      	bls.n	8005a00 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e139      	b.n	8005c74 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a00:	4b0b      	ldr	r3, [pc, #44]	; (8005a30 <HAL_RCC_OscConfig+0x578>)
 8005a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d0ed      	beq.n	80059ea <HAL_RCC_OscConfig+0x532>
 8005a0e:	e01a      	b.n	8005a46 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a10:	f7fe f83c 	bl	8003a8c <HAL_GetTick>
 8005a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a16:	e00f      	b.n	8005a38 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a18:	f7fe f838 	bl	8003a8c <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d906      	bls.n	8005a38 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e122      	b.n	8005c74 <HAL_RCC_OscConfig+0x7bc>
 8005a2e:	bf00      	nop
 8005a30:	40021000 	.word	0x40021000
 8005a34:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a38:	4b90      	ldr	r3, [pc, #576]	; (8005c7c <HAL_RCC_OscConfig+0x7c4>)
 8005a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1e8      	bne.n	8005a18 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a46:	7ffb      	ldrb	r3, [r7, #31]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d105      	bne.n	8005a58 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a4c:	4b8b      	ldr	r3, [pc, #556]	; (8005c7c <HAL_RCC_OscConfig+0x7c4>)
 8005a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a50:	4a8a      	ldr	r2, [pc, #552]	; (8005c7c <HAL_RCC_OscConfig+0x7c4>)
 8005a52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a56:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f000 8108 	beq.w	8005c72 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	f040 80d0 	bne.w	8005c0c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005a6c:	4b83      	ldr	r3, [pc, #524]	; (8005c7c <HAL_RCC_OscConfig+0x7c4>)
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	f003 0203 	and.w	r2, r3, #3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d130      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d127      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d11f      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005aac:	2a07      	cmp	r2, #7
 8005aae:	bf14      	ite	ne
 8005ab0:	2201      	movne	r2, #1
 8005ab2:	2200      	moveq	r2, #0
 8005ab4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d113      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac4:	085b      	lsrs	r3, r3, #1
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d109      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad8:	085b      	lsrs	r3, r3, #1
 8005ada:	3b01      	subs	r3, #1
 8005adc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d06e      	beq.n	8005bc0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	2b0c      	cmp	r3, #12
 8005ae6:	d069      	beq.n	8005bbc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005ae8:	4b64      	ldr	r3, [pc, #400]	; (8005c7c <HAL_RCC_OscConfig+0x7c4>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d105      	bne.n	8005b00 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005af4:	4b61      	ldr	r3, [pc, #388]	; (8005c7c <HAL_RCC_OscConfig+0x7c4>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d001      	beq.n	8005b04 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e0b7      	b.n	8005c74 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005b04:	4b5d      	ldr	r3, [pc, #372]	; (8005c7c <HAL_RCC_OscConfig+0x7c4>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a5c      	ldr	r2, [pc, #368]	; (8005c7c <HAL_RCC_OscConfig+0x7c4>)
 8005b0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b0e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b10:	f7fd ffbc 	bl	8003a8c <HAL_GetTick>
 8005b14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b16:	e008      	b.n	8005b2a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b18:	f7fd ffb8 	bl	8003a8c <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e0a4      	b.n	8005c74 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b2a:	4b54      	ldr	r3, [pc, #336]	; (8005c7c <HAL_RCC_OscConfig+0x7c4>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1f0      	bne.n	8005b18 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b36:	4b51      	ldr	r3, [pc, #324]	; (8005c7c <HAL_RCC_OscConfig+0x7c4>)
 8005b38:	68da      	ldr	r2, [r3, #12]
 8005b3a:	4b51      	ldr	r3, [pc, #324]	; (8005c80 <HAL_RCC_OscConfig+0x7c8>)
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005b46:	3a01      	subs	r2, #1
 8005b48:	0112      	lsls	r2, r2, #4
 8005b4a:	4311      	orrs	r1, r2
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b50:	0212      	lsls	r2, r2, #8
 8005b52:	4311      	orrs	r1, r2
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005b58:	0852      	lsrs	r2, r2, #1
 8005b5a:	3a01      	subs	r2, #1
 8005b5c:	0552      	lsls	r2, r2, #21
 8005b5e:	4311      	orrs	r1, r2
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005b64:	0852      	lsrs	r2, r2, #1
 8005b66:	3a01      	subs	r2, #1
 8005b68:	0652      	lsls	r2, r2, #25
 8005b6a:	4311      	orrs	r1, r2
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b70:	0912      	lsrs	r2, r2, #4
 8005b72:	0452      	lsls	r2, r2, #17
 8005b74:	430a      	orrs	r2, r1
 8005b76:	4941      	ldr	r1, [pc, #260]	; (8005c7c <HAL_RCC_OscConfig+0x7c4>)
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005b7c:	4b3f      	ldr	r3, [pc, #252]	; (8005c7c <HAL_RCC_OscConfig+0x7c4>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a3e      	ldr	r2, [pc, #248]	; (8005c7c <HAL_RCC_OscConfig+0x7c4>)
 8005b82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b88:	4b3c      	ldr	r3, [pc, #240]	; (8005c7c <HAL_RCC_OscConfig+0x7c4>)
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	4a3b      	ldr	r2, [pc, #236]	; (8005c7c <HAL_RCC_OscConfig+0x7c4>)
 8005b8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b94:	f7fd ff7a 	bl	8003a8c <HAL_GetTick>
 8005b98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b9a:	e008      	b.n	8005bae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b9c:	f7fd ff76 	bl	8003a8c <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e062      	b.n	8005c74 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bae:	4b33      	ldr	r3, [pc, #204]	; (8005c7c <HAL_RCC_OscConfig+0x7c4>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d0f0      	beq.n	8005b9c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005bba:	e05a      	b.n	8005c72 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e059      	b.n	8005c74 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bc0:	4b2e      	ldr	r3, [pc, #184]	; (8005c7c <HAL_RCC_OscConfig+0x7c4>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d152      	bne.n	8005c72 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005bcc:	4b2b      	ldr	r3, [pc, #172]	; (8005c7c <HAL_RCC_OscConfig+0x7c4>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a2a      	ldr	r2, [pc, #168]	; (8005c7c <HAL_RCC_OscConfig+0x7c4>)
 8005bd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bd6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005bd8:	4b28      	ldr	r3, [pc, #160]	; (8005c7c <HAL_RCC_OscConfig+0x7c4>)
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	4a27      	ldr	r2, [pc, #156]	; (8005c7c <HAL_RCC_OscConfig+0x7c4>)
 8005bde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005be2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005be4:	f7fd ff52 	bl	8003a8c <HAL_GetTick>
 8005be8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bea:	e008      	b.n	8005bfe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bec:	f7fd ff4e 	bl	8003a8c <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e03a      	b.n	8005c74 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bfe:	4b1f      	ldr	r3, [pc, #124]	; (8005c7c <HAL_RCC_OscConfig+0x7c4>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d0f0      	beq.n	8005bec <HAL_RCC_OscConfig+0x734>
 8005c0a:	e032      	b.n	8005c72 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	2b0c      	cmp	r3, #12
 8005c10:	d02d      	beq.n	8005c6e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c12:	4b1a      	ldr	r3, [pc, #104]	; (8005c7c <HAL_RCC_OscConfig+0x7c4>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a19      	ldr	r2, [pc, #100]	; (8005c7c <HAL_RCC_OscConfig+0x7c4>)
 8005c18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c1c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005c1e:	4b17      	ldr	r3, [pc, #92]	; (8005c7c <HAL_RCC_OscConfig+0x7c4>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d105      	bne.n	8005c36 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005c2a:	4b14      	ldr	r3, [pc, #80]	; (8005c7c <HAL_RCC_OscConfig+0x7c4>)
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	4a13      	ldr	r2, [pc, #76]	; (8005c7c <HAL_RCC_OscConfig+0x7c4>)
 8005c30:	f023 0303 	bic.w	r3, r3, #3
 8005c34:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005c36:	4b11      	ldr	r3, [pc, #68]	; (8005c7c <HAL_RCC_OscConfig+0x7c4>)
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	4a10      	ldr	r2, [pc, #64]	; (8005c7c <HAL_RCC_OscConfig+0x7c4>)
 8005c3c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c44:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c46:	f7fd ff21 	bl	8003a8c <HAL_GetTick>
 8005c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c4c:	e008      	b.n	8005c60 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c4e:	f7fd ff1d 	bl	8003a8c <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d901      	bls.n	8005c60 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e009      	b.n	8005c74 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c60:	4b06      	ldr	r3, [pc, #24]	; (8005c7c <HAL_RCC_OscConfig+0x7c4>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1f0      	bne.n	8005c4e <HAL_RCC_OscConfig+0x796>
 8005c6c:	e001      	b.n	8005c72 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e000      	b.n	8005c74 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3720      	adds	r7, #32
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	40021000 	.word	0x40021000
 8005c80:	f99d808c 	.word	0xf99d808c

08005c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d101      	bne.n	8005c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e0c8      	b.n	8005e2a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c98:	4b66      	ldr	r3, [pc, #408]	; (8005e34 <HAL_RCC_ClockConfig+0x1b0>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0307 	and.w	r3, r3, #7
 8005ca0:	683a      	ldr	r2, [r7, #0]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d910      	bls.n	8005cc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ca6:	4b63      	ldr	r3, [pc, #396]	; (8005e34 <HAL_RCC_ClockConfig+0x1b0>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f023 0207 	bic.w	r2, r3, #7
 8005cae:	4961      	ldr	r1, [pc, #388]	; (8005e34 <HAL_RCC_ClockConfig+0x1b0>)
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cb6:	4b5f      	ldr	r3, [pc, #380]	; (8005e34 <HAL_RCC_ClockConfig+0x1b0>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0307 	and.w	r3, r3, #7
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d001      	beq.n	8005cc8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e0b0      	b.n	8005e2a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d04c      	beq.n	8005d6e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	2b03      	cmp	r3, #3
 8005cda:	d107      	bne.n	8005cec <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cdc:	4b56      	ldr	r3, [pc, #344]	; (8005e38 <HAL_RCC_ClockConfig+0x1b4>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d121      	bne.n	8005d2c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e09e      	b.n	8005e2a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d107      	bne.n	8005d04 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005cf4:	4b50      	ldr	r3, [pc, #320]	; (8005e38 <HAL_RCC_ClockConfig+0x1b4>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d115      	bne.n	8005d2c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e092      	b.n	8005e2a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d107      	bne.n	8005d1c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d0c:	4b4a      	ldr	r3, [pc, #296]	; (8005e38 <HAL_RCC_ClockConfig+0x1b4>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0302 	and.w	r3, r3, #2
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d109      	bne.n	8005d2c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e086      	b.n	8005e2a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d1c:	4b46      	ldr	r3, [pc, #280]	; (8005e38 <HAL_RCC_ClockConfig+0x1b4>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e07e      	b.n	8005e2a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d2c:	4b42      	ldr	r3, [pc, #264]	; (8005e38 <HAL_RCC_ClockConfig+0x1b4>)
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f023 0203 	bic.w	r2, r3, #3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	493f      	ldr	r1, [pc, #252]	; (8005e38 <HAL_RCC_ClockConfig+0x1b4>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d3e:	f7fd fea5 	bl	8003a8c <HAL_GetTick>
 8005d42:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d44:	e00a      	b.n	8005d5c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d46:	f7fd fea1 	bl	8003a8c <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d901      	bls.n	8005d5c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e066      	b.n	8005e2a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d5c:	4b36      	ldr	r3, [pc, #216]	; (8005e38 <HAL_RCC_ClockConfig+0x1b4>)
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f003 020c 	and.w	r2, r3, #12
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d1eb      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d008      	beq.n	8005d8c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d7a:	4b2f      	ldr	r3, [pc, #188]	; (8005e38 <HAL_RCC_ClockConfig+0x1b4>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	492c      	ldr	r1, [pc, #176]	; (8005e38 <HAL_RCC_ClockConfig+0x1b4>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d8c:	4b29      	ldr	r3, [pc, #164]	; (8005e34 <HAL_RCC_ClockConfig+0x1b0>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0307 	and.w	r3, r3, #7
 8005d94:	683a      	ldr	r2, [r7, #0]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d210      	bcs.n	8005dbc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d9a:	4b26      	ldr	r3, [pc, #152]	; (8005e34 <HAL_RCC_ClockConfig+0x1b0>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f023 0207 	bic.w	r2, r3, #7
 8005da2:	4924      	ldr	r1, [pc, #144]	; (8005e34 <HAL_RCC_ClockConfig+0x1b0>)
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005daa:	4b22      	ldr	r3, [pc, #136]	; (8005e34 <HAL_RCC_ClockConfig+0x1b0>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0307 	and.w	r3, r3, #7
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d001      	beq.n	8005dbc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e036      	b.n	8005e2a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0304 	and.w	r3, r3, #4
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d008      	beq.n	8005dda <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dc8:	4b1b      	ldr	r3, [pc, #108]	; (8005e38 <HAL_RCC_ClockConfig+0x1b4>)
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	4918      	ldr	r1, [pc, #96]	; (8005e38 <HAL_RCC_ClockConfig+0x1b4>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0308 	and.w	r3, r3, #8
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d009      	beq.n	8005dfa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005de6:	4b14      	ldr	r3, [pc, #80]	; (8005e38 <HAL_RCC_ClockConfig+0x1b4>)
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	00db      	lsls	r3, r3, #3
 8005df4:	4910      	ldr	r1, [pc, #64]	; (8005e38 <HAL_RCC_ClockConfig+0x1b4>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005dfa:	f000 f825 	bl	8005e48 <HAL_RCC_GetSysClockFreq>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	4b0d      	ldr	r3, [pc, #52]	; (8005e38 <HAL_RCC_ClockConfig+0x1b4>)
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	091b      	lsrs	r3, r3, #4
 8005e06:	f003 030f 	and.w	r3, r3, #15
 8005e0a:	490c      	ldr	r1, [pc, #48]	; (8005e3c <HAL_RCC_ClockConfig+0x1b8>)
 8005e0c:	5ccb      	ldrb	r3, [r1, r3]
 8005e0e:	f003 031f 	and.w	r3, r3, #31
 8005e12:	fa22 f303 	lsr.w	r3, r2, r3
 8005e16:	4a0a      	ldr	r2, [pc, #40]	; (8005e40 <HAL_RCC_ClockConfig+0x1bc>)
 8005e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005e1a:	4b0a      	ldr	r3, [pc, #40]	; (8005e44 <HAL_RCC_ClockConfig+0x1c0>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7fd fc9a 	bl	8003758 <HAL_InitTick>
 8005e24:	4603      	mov	r3, r0
 8005e26:	72fb      	strb	r3, [r7, #11]

  return status;
 8005e28:	7afb      	ldrb	r3, [r7, #11]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	40022000 	.word	0x40022000
 8005e38:	40021000 	.word	0x40021000
 8005e3c:	0800c830 	.word	0x0800c830
 8005e40:	20000000 	.word	0x20000000
 8005e44:	20000004 	.word	0x20000004

08005e48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b089      	sub	sp, #36	; 0x24
 8005e4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	61fb      	str	r3, [r7, #28]
 8005e52:	2300      	movs	r3, #0
 8005e54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e56:	4b3e      	ldr	r3, [pc, #248]	; (8005f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f003 030c 	and.w	r3, r3, #12
 8005e5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e60:	4b3b      	ldr	r3, [pc, #236]	; (8005f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f003 0303 	and.w	r3, r3, #3
 8005e68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d005      	beq.n	8005e7c <HAL_RCC_GetSysClockFreq+0x34>
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	2b0c      	cmp	r3, #12
 8005e74:	d121      	bne.n	8005eba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d11e      	bne.n	8005eba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005e7c:	4b34      	ldr	r3, [pc, #208]	; (8005f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0308 	and.w	r3, r3, #8
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d107      	bne.n	8005e98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005e88:	4b31      	ldr	r3, [pc, #196]	; (8005f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e8e:	0a1b      	lsrs	r3, r3, #8
 8005e90:	f003 030f 	and.w	r3, r3, #15
 8005e94:	61fb      	str	r3, [r7, #28]
 8005e96:	e005      	b.n	8005ea4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005e98:	4b2d      	ldr	r3, [pc, #180]	; (8005f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	091b      	lsrs	r3, r3, #4
 8005e9e:	f003 030f 	and.w	r3, r3, #15
 8005ea2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005ea4:	4a2b      	ldr	r2, [pc, #172]	; (8005f54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d10d      	bne.n	8005ed0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005eb8:	e00a      	b.n	8005ed0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	d102      	bne.n	8005ec6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ec0:	4b25      	ldr	r3, [pc, #148]	; (8005f58 <HAL_RCC_GetSysClockFreq+0x110>)
 8005ec2:	61bb      	str	r3, [r7, #24]
 8005ec4:	e004      	b.n	8005ed0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	2b08      	cmp	r3, #8
 8005eca:	d101      	bne.n	8005ed0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ecc:	4b23      	ldr	r3, [pc, #140]	; (8005f5c <HAL_RCC_GetSysClockFreq+0x114>)
 8005ece:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	2b0c      	cmp	r3, #12
 8005ed4:	d134      	bne.n	8005f40 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ed6:	4b1e      	ldr	r3, [pc, #120]	; (8005f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	f003 0303 	and.w	r3, r3, #3
 8005ede:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d003      	beq.n	8005eee <HAL_RCC_GetSysClockFreq+0xa6>
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	2b03      	cmp	r3, #3
 8005eea:	d003      	beq.n	8005ef4 <HAL_RCC_GetSysClockFreq+0xac>
 8005eec:	e005      	b.n	8005efa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005eee:	4b1a      	ldr	r3, [pc, #104]	; (8005f58 <HAL_RCC_GetSysClockFreq+0x110>)
 8005ef0:	617b      	str	r3, [r7, #20]
      break;
 8005ef2:	e005      	b.n	8005f00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005ef4:	4b19      	ldr	r3, [pc, #100]	; (8005f5c <HAL_RCC_GetSysClockFreq+0x114>)
 8005ef6:	617b      	str	r3, [r7, #20]
      break;
 8005ef8:	e002      	b.n	8005f00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	617b      	str	r3, [r7, #20]
      break;
 8005efe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f00:	4b13      	ldr	r3, [pc, #76]	; (8005f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	091b      	lsrs	r3, r3, #4
 8005f06:	f003 0307 	and.w	r3, r3, #7
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005f0e:	4b10      	ldr	r3, [pc, #64]	; (8005f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	0a1b      	lsrs	r3, r3, #8
 8005f14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	fb02 f203 	mul.w	r2, r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f24:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f26:	4b0a      	ldr	r3, [pc, #40]	; (8005f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	0e5b      	lsrs	r3, r3, #25
 8005f2c:	f003 0303 	and.w	r3, r3, #3
 8005f30:	3301      	adds	r3, #1
 8005f32:	005b      	lsls	r3, r3, #1
 8005f34:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f3e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005f40:	69bb      	ldr	r3, [r7, #24]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3724      	adds	r7, #36	; 0x24
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	40021000 	.word	0x40021000
 8005f54:	0800c848 	.word	0x0800c848
 8005f58:	00f42400 	.word	0x00f42400
 8005f5c:	007a1200 	.word	0x007a1200

08005f60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f60:	b480      	push	{r7}
 8005f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f64:	4b03      	ldr	r3, [pc, #12]	; (8005f74 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f66:	681b      	ldr	r3, [r3, #0]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	20000000 	.word	0x20000000

08005f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005f7c:	f7ff fff0 	bl	8005f60 <HAL_RCC_GetHCLKFreq>
 8005f80:	4602      	mov	r2, r0
 8005f82:	4b06      	ldr	r3, [pc, #24]	; (8005f9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	0adb      	lsrs	r3, r3, #11
 8005f88:	f003 0307 	and.w	r3, r3, #7
 8005f8c:	4904      	ldr	r1, [pc, #16]	; (8005fa0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f8e:	5ccb      	ldrb	r3, [r1, r3]
 8005f90:	f003 031f 	and.w	r3, r3, #31
 8005f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	40021000 	.word	0x40021000
 8005fa0:	0800c840 	.word	0x0800c840

08005fa4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	220f      	movs	r2, #15
 8005fb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005fb4:	4b12      	ldr	r3, [pc, #72]	; (8006000 <HAL_RCC_GetClockConfig+0x5c>)
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	f003 0203 	and.w	r2, r3, #3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005fc0:	4b0f      	ldr	r3, [pc, #60]	; (8006000 <HAL_RCC_GetClockConfig+0x5c>)
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005fcc:	4b0c      	ldr	r3, [pc, #48]	; (8006000 <HAL_RCC_GetClockConfig+0x5c>)
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005fd8:	4b09      	ldr	r3, [pc, #36]	; (8006000 <HAL_RCC_GetClockConfig+0x5c>)
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	08db      	lsrs	r3, r3, #3
 8005fde:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005fe6:	4b07      	ldr	r3, [pc, #28]	; (8006004 <HAL_RCC_GetClockConfig+0x60>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0207 	and.w	r2, r3, #7
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	601a      	str	r2, [r3, #0]
}
 8005ff2:	bf00      	nop
 8005ff4:	370c      	adds	r7, #12
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	40021000 	.word	0x40021000
 8006004:	40022000 	.word	0x40022000

08006008 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006010:	2300      	movs	r3, #0
 8006012:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006014:	4b2a      	ldr	r3, [pc, #168]	; (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d003      	beq.n	8006028 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006020:	f7ff f9e6 	bl	80053f0 <HAL_PWREx_GetVoltageRange>
 8006024:	6178      	str	r0, [r7, #20]
 8006026:	e014      	b.n	8006052 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006028:	4b25      	ldr	r3, [pc, #148]	; (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800602a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800602c:	4a24      	ldr	r2, [pc, #144]	; (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800602e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006032:	6593      	str	r3, [r2, #88]	; 0x58
 8006034:	4b22      	ldr	r3, [pc, #136]	; (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800603c:	60fb      	str	r3, [r7, #12]
 800603e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006040:	f7ff f9d6 	bl	80053f0 <HAL_PWREx_GetVoltageRange>
 8006044:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006046:	4b1e      	ldr	r3, [pc, #120]	; (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800604a:	4a1d      	ldr	r2, [pc, #116]	; (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800604c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006050:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006058:	d10b      	bne.n	8006072 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b80      	cmp	r3, #128	; 0x80
 800605e:	d919      	bls.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2ba0      	cmp	r3, #160	; 0xa0
 8006064:	d902      	bls.n	800606c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006066:	2302      	movs	r3, #2
 8006068:	613b      	str	r3, [r7, #16]
 800606a:	e013      	b.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800606c:	2301      	movs	r3, #1
 800606e:	613b      	str	r3, [r7, #16]
 8006070:	e010      	b.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b80      	cmp	r3, #128	; 0x80
 8006076:	d902      	bls.n	800607e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006078:	2303      	movs	r3, #3
 800607a:	613b      	str	r3, [r7, #16]
 800607c:	e00a      	b.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b80      	cmp	r3, #128	; 0x80
 8006082:	d102      	bne.n	800608a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006084:	2302      	movs	r3, #2
 8006086:	613b      	str	r3, [r7, #16]
 8006088:	e004      	b.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b70      	cmp	r3, #112	; 0x70
 800608e:	d101      	bne.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006090:	2301      	movs	r3, #1
 8006092:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006094:	4b0b      	ldr	r3, [pc, #44]	; (80060c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f023 0207 	bic.w	r2, r3, #7
 800609c:	4909      	ldr	r1, [pc, #36]	; (80060c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80060a4:	4b07      	ldr	r3, [pc, #28]	; (80060c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0307 	and.w	r3, r3, #7
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d001      	beq.n	80060b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e000      	b.n	80060b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3718      	adds	r7, #24
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	40021000 	.word	0x40021000
 80060c4:	40022000 	.word	0x40022000

080060c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80060d0:	2300      	movs	r3, #0
 80060d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80060d4:	2300      	movs	r3, #0
 80060d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d041      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80060ec:	d02a      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80060ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80060f2:	d824      	bhi.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80060f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060f8:	d008      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x44>
 80060fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060fe:	d81e      	bhi.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00a      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006104:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006108:	d010      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800610a:	e018      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800610c:	4b86      	ldr	r3, [pc, #536]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	4a85      	ldr	r2, [pc, #532]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006116:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006118:	e015      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	3304      	adds	r3, #4
 800611e:	2100      	movs	r1, #0
 8006120:	4618      	mov	r0, r3
 8006122:	f000 fabb 	bl	800669c <RCCEx_PLLSAI1_Config>
 8006126:	4603      	mov	r3, r0
 8006128:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800612a:	e00c      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	3320      	adds	r3, #32
 8006130:	2100      	movs	r1, #0
 8006132:	4618      	mov	r0, r3
 8006134:	f000 fba6 	bl	8006884 <RCCEx_PLLSAI2_Config>
 8006138:	4603      	mov	r3, r0
 800613a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800613c:	e003      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	74fb      	strb	r3, [r7, #19]
      break;
 8006142:	e000      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006144:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006146:	7cfb      	ldrb	r3, [r7, #19]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10b      	bne.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800614c:	4b76      	ldr	r3, [pc, #472]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800614e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006152:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800615a:	4973      	ldr	r1, [pc, #460]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800615c:	4313      	orrs	r3, r2
 800615e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006162:	e001      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006164:	7cfb      	ldrb	r3, [r7, #19]
 8006166:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d041      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006178:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800617c:	d02a      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800617e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006182:	d824      	bhi.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006184:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006188:	d008      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800618a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800618e:	d81e      	bhi.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00a      	beq.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006198:	d010      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800619a:	e018      	b.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800619c:	4b62      	ldr	r3, [pc, #392]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	4a61      	ldr	r2, [pc, #388]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061a6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061a8:	e015      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	3304      	adds	r3, #4
 80061ae:	2100      	movs	r1, #0
 80061b0:	4618      	mov	r0, r3
 80061b2:	f000 fa73 	bl	800669c <RCCEx_PLLSAI1_Config>
 80061b6:	4603      	mov	r3, r0
 80061b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061ba:	e00c      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	3320      	adds	r3, #32
 80061c0:	2100      	movs	r1, #0
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 fb5e 	bl	8006884 <RCCEx_PLLSAI2_Config>
 80061c8:	4603      	mov	r3, r0
 80061ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061cc:	e003      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	74fb      	strb	r3, [r7, #19]
      break;
 80061d2:	e000      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80061d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061d6:	7cfb      	ldrb	r3, [r7, #19]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10b      	bne.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80061dc:	4b52      	ldr	r3, [pc, #328]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061ea:	494f      	ldr	r1, [pc, #316]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80061f2:	e001      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f4:	7cfb      	ldrb	r3, [r7, #19]
 80061f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 80a0 	beq.w	8006346 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006206:	2300      	movs	r3, #0
 8006208:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800620a:	4b47      	ldr	r3, [pc, #284]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800620c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800620e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006216:	2301      	movs	r3, #1
 8006218:	e000      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800621a:	2300      	movs	r3, #0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00d      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006220:	4b41      	ldr	r3, [pc, #260]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006224:	4a40      	ldr	r2, [pc, #256]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800622a:	6593      	str	r3, [r2, #88]	; 0x58
 800622c:	4b3e      	ldr	r3, [pc, #248]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800622e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006234:	60bb      	str	r3, [r7, #8]
 8006236:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006238:	2301      	movs	r3, #1
 800623a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800623c:	4b3b      	ldr	r3, [pc, #236]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a3a      	ldr	r2, [pc, #232]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006246:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006248:	f7fd fc20 	bl	8003a8c <HAL_GetTick>
 800624c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800624e:	e009      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006250:	f7fd fc1c 	bl	8003a8c <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	2b02      	cmp	r3, #2
 800625c:	d902      	bls.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	74fb      	strb	r3, [r7, #19]
        break;
 8006262:	e005      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006264:	4b31      	ldr	r3, [pc, #196]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800626c:	2b00      	cmp	r3, #0
 800626e:	d0ef      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006270:	7cfb      	ldrb	r3, [r7, #19]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d15c      	bne.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006276:	4b2c      	ldr	r3, [pc, #176]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800627c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006280:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d01f      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	429a      	cmp	r2, r3
 8006292:	d019      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006294:	4b24      	ldr	r3, [pc, #144]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800629a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800629e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062a0:	4b21      	ldr	r3, [pc, #132]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a6:	4a20      	ldr	r2, [pc, #128]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062b0:	4b1d      	ldr	r3, [pc, #116]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b6:	4a1c      	ldr	r2, [pc, #112]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80062c0:	4a19      	ldr	r2, [pc, #100]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d016      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d2:	f7fd fbdb 	bl	8003a8c <HAL_GetTick>
 80062d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062d8:	e00b      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062da:	f7fd fbd7 	bl	8003a8c <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d902      	bls.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	74fb      	strb	r3, [r7, #19]
            break;
 80062f0:	e006      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062f2:	4b0d      	ldr	r3, [pc, #52]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f8:	f003 0302 	and.w	r3, r3, #2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d0ec      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006300:	7cfb      	ldrb	r3, [r7, #19]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10c      	bne.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006306:	4b08      	ldr	r3, [pc, #32]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006316:	4904      	ldr	r1, [pc, #16]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006318:	4313      	orrs	r3, r2
 800631a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800631e:	e009      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006320:	7cfb      	ldrb	r3, [r7, #19]
 8006322:	74bb      	strb	r3, [r7, #18]
 8006324:	e006      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006326:	bf00      	nop
 8006328:	40021000 	.word	0x40021000
 800632c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006330:	7cfb      	ldrb	r3, [r7, #19]
 8006332:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006334:	7c7b      	ldrb	r3, [r7, #17]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d105      	bne.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800633a:	4b9e      	ldr	r3, [pc, #632]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800633c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800633e:	4a9d      	ldr	r2, [pc, #628]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006344:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00a      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006352:	4b98      	ldr	r3, [pc, #608]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006358:	f023 0203 	bic.w	r2, r3, #3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006360:	4994      	ldr	r1, [pc, #592]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006362:	4313      	orrs	r3, r2
 8006364:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0302 	and.w	r3, r3, #2
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00a      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006374:	4b8f      	ldr	r3, [pc, #572]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800637a:	f023 020c 	bic.w	r2, r3, #12
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006382:	498c      	ldr	r1, [pc, #560]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006384:	4313      	orrs	r3, r2
 8006386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0304 	and.w	r3, r3, #4
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00a      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006396:	4b87      	ldr	r3, [pc, #540]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800639c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a4:	4983      	ldr	r1, [pc, #524]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0308 	and.w	r3, r3, #8
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00a      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063b8:	4b7e      	ldr	r3, [pc, #504]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c6:	497b      	ldr	r1, [pc, #492]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063c8:	4313      	orrs	r3, r2
 80063ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0310 	and.w	r3, r3, #16
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00a      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80063da:	4b76      	ldr	r3, [pc, #472]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063e8:	4972      	ldr	r1, [pc, #456]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0320 	and.w	r3, r3, #32
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00a      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063fc:	4b6d      	ldr	r3, [pc, #436]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006402:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800640a:	496a      	ldr	r1, [pc, #424]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800640c:	4313      	orrs	r3, r2
 800640e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00a      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800641e:	4b65      	ldr	r3, [pc, #404]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006424:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800642c:	4961      	ldr	r1, [pc, #388]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800642e:	4313      	orrs	r3, r2
 8006430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00a      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006440:	4b5c      	ldr	r3, [pc, #368]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006446:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800644e:	4959      	ldr	r1, [pc, #356]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006450:	4313      	orrs	r3, r2
 8006452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00a      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006462:	4b54      	ldr	r3, [pc, #336]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006468:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006470:	4950      	ldr	r1, [pc, #320]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006472:	4313      	orrs	r3, r2
 8006474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00a      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006484:	4b4b      	ldr	r3, [pc, #300]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800648a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006492:	4948      	ldr	r1, [pc, #288]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006494:	4313      	orrs	r3, r2
 8006496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00a      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80064a6:	4b43      	ldr	r3, [pc, #268]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b4:	493f      	ldr	r1, [pc, #252]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d028      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064c8:	4b3a      	ldr	r3, [pc, #232]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064d6:	4937      	ldr	r1, [pc, #220]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064e6:	d106      	bne.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064e8:	4b32      	ldr	r3, [pc, #200]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	4a31      	ldr	r2, [pc, #196]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064f2:	60d3      	str	r3, [r2, #12]
 80064f4:	e011      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064fe:	d10c      	bne.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	3304      	adds	r3, #4
 8006504:	2101      	movs	r1, #1
 8006506:	4618      	mov	r0, r3
 8006508:	f000 f8c8 	bl	800669c <RCCEx_PLLSAI1_Config>
 800650c:	4603      	mov	r3, r0
 800650e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006510:	7cfb      	ldrb	r3, [r7, #19]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d001      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006516:	7cfb      	ldrb	r3, [r7, #19]
 8006518:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d028      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006526:	4b23      	ldr	r3, [pc, #140]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800652c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006534:	491f      	ldr	r1, [pc, #124]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006536:	4313      	orrs	r3, r2
 8006538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006540:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006544:	d106      	bne.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006546:	4b1b      	ldr	r3, [pc, #108]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	4a1a      	ldr	r2, [pc, #104]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800654c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006550:	60d3      	str	r3, [r2, #12]
 8006552:	e011      	b.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006558:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800655c:	d10c      	bne.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	3304      	adds	r3, #4
 8006562:	2101      	movs	r1, #1
 8006564:	4618      	mov	r0, r3
 8006566:	f000 f899 	bl	800669c <RCCEx_PLLSAI1_Config>
 800656a:	4603      	mov	r3, r0
 800656c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800656e:	7cfb      	ldrb	r3, [r7, #19]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d001      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006574:	7cfb      	ldrb	r3, [r7, #19]
 8006576:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d02b      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006584:	4b0b      	ldr	r3, [pc, #44]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800658a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006592:	4908      	ldr	r1, [pc, #32]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006594:	4313      	orrs	r3, r2
 8006596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800659e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065a2:	d109      	bne.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065a4:	4b03      	ldr	r3, [pc, #12]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	4a02      	ldr	r2, [pc, #8]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065ae:	60d3      	str	r3, [r2, #12]
 80065b0:	e014      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80065b2:	bf00      	nop
 80065b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065c0:	d10c      	bne.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	3304      	adds	r3, #4
 80065c6:	2101      	movs	r1, #1
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 f867 	bl	800669c <RCCEx_PLLSAI1_Config>
 80065ce:	4603      	mov	r3, r0
 80065d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80065d2:	7cfb      	ldrb	r3, [r7, #19]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d001      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80065d8:	7cfb      	ldrb	r3, [r7, #19]
 80065da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d02f      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80065e8:	4b2b      	ldr	r3, [pc, #172]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80065ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065f6:	4928      	ldr	r1, [pc, #160]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006602:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006606:	d10d      	bne.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	3304      	adds	r3, #4
 800660c:	2102      	movs	r1, #2
 800660e:	4618      	mov	r0, r3
 8006610:	f000 f844 	bl	800669c <RCCEx_PLLSAI1_Config>
 8006614:	4603      	mov	r3, r0
 8006616:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006618:	7cfb      	ldrb	r3, [r7, #19]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d014      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800661e:	7cfb      	ldrb	r3, [r7, #19]
 8006620:	74bb      	strb	r3, [r7, #18]
 8006622:	e011      	b.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006628:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800662c:	d10c      	bne.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	3320      	adds	r3, #32
 8006632:	2102      	movs	r1, #2
 8006634:	4618      	mov	r0, r3
 8006636:	f000 f925 	bl	8006884 <RCCEx_PLLSAI2_Config>
 800663a:	4603      	mov	r3, r0
 800663c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800663e:	7cfb      	ldrb	r3, [r7, #19]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d001      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006644:	7cfb      	ldrb	r3, [r7, #19]
 8006646:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00a      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006654:	4b10      	ldr	r3, [pc, #64]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800665a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006662:	490d      	ldr	r1, [pc, #52]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006664:	4313      	orrs	r3, r2
 8006666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00b      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006676:	4b08      	ldr	r3, [pc, #32]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800667c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006686:	4904      	ldr	r1, [pc, #16]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006688:	4313      	orrs	r3, r2
 800668a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800668e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3718      	adds	r7, #24
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	40021000 	.word	0x40021000

0800669c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80066aa:	4b75      	ldr	r3, [pc, #468]	; (8006880 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	f003 0303 	and.w	r3, r3, #3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d018      	beq.n	80066e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80066b6:	4b72      	ldr	r3, [pc, #456]	; (8006880 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f003 0203 	and.w	r2, r3, #3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d10d      	bne.n	80066e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
       ||
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d009      	beq.n	80066e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80066ce:	4b6c      	ldr	r3, [pc, #432]	; (8006880 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	091b      	lsrs	r3, r3, #4
 80066d4:	f003 0307 	and.w	r3, r3, #7
 80066d8:	1c5a      	adds	r2, r3, #1
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	685b      	ldr	r3, [r3, #4]
       ||
 80066de:	429a      	cmp	r2, r3
 80066e0:	d047      	beq.n	8006772 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	73fb      	strb	r3, [r7, #15]
 80066e6:	e044      	b.n	8006772 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2b03      	cmp	r3, #3
 80066ee:	d018      	beq.n	8006722 <RCCEx_PLLSAI1_Config+0x86>
 80066f0:	2b03      	cmp	r3, #3
 80066f2:	d825      	bhi.n	8006740 <RCCEx_PLLSAI1_Config+0xa4>
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d002      	beq.n	80066fe <RCCEx_PLLSAI1_Config+0x62>
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d009      	beq.n	8006710 <RCCEx_PLLSAI1_Config+0x74>
 80066fc:	e020      	b.n	8006740 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80066fe:	4b60      	ldr	r3, [pc, #384]	; (8006880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	2b00      	cmp	r3, #0
 8006708:	d11d      	bne.n	8006746 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800670e:	e01a      	b.n	8006746 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006710:	4b5b      	ldr	r3, [pc, #364]	; (8006880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006718:	2b00      	cmp	r3, #0
 800671a:	d116      	bne.n	800674a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006720:	e013      	b.n	800674a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006722:	4b57      	ldr	r3, [pc, #348]	; (8006880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d10f      	bne.n	800674e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800672e:	4b54      	ldr	r3, [pc, #336]	; (8006880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d109      	bne.n	800674e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800673e:	e006      	b.n	800674e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	73fb      	strb	r3, [r7, #15]
      break;
 8006744:	e004      	b.n	8006750 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006746:	bf00      	nop
 8006748:	e002      	b.n	8006750 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800674a:	bf00      	nop
 800674c:	e000      	b.n	8006750 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800674e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006750:	7bfb      	ldrb	r3, [r7, #15]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d10d      	bne.n	8006772 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006756:	4b4a      	ldr	r3, [pc, #296]	; (8006880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6819      	ldr	r1, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	3b01      	subs	r3, #1
 8006768:	011b      	lsls	r3, r3, #4
 800676a:	430b      	orrs	r3, r1
 800676c:	4944      	ldr	r1, [pc, #272]	; (8006880 <RCCEx_PLLSAI1_Config+0x1e4>)
 800676e:	4313      	orrs	r3, r2
 8006770:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006772:	7bfb      	ldrb	r3, [r7, #15]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d17d      	bne.n	8006874 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006778:	4b41      	ldr	r3, [pc, #260]	; (8006880 <RCCEx_PLLSAI1_Config+0x1e4>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a40      	ldr	r2, [pc, #256]	; (8006880 <RCCEx_PLLSAI1_Config+0x1e4>)
 800677e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006782:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006784:	f7fd f982 	bl	8003a8c <HAL_GetTick>
 8006788:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800678a:	e009      	b.n	80067a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800678c:	f7fd f97e 	bl	8003a8c <HAL_GetTick>
 8006790:	4602      	mov	r2, r0
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	2b02      	cmp	r3, #2
 8006798:	d902      	bls.n	80067a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	73fb      	strb	r3, [r7, #15]
        break;
 800679e:	e005      	b.n	80067ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80067a0:	4b37      	ldr	r3, [pc, #220]	; (8006880 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1ef      	bne.n	800678c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d160      	bne.n	8006874 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d111      	bne.n	80067dc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80067b8:	4b31      	ldr	r3, [pc, #196]	; (8006880 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80067c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	6892      	ldr	r2, [r2, #8]
 80067c8:	0211      	lsls	r1, r2, #8
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	68d2      	ldr	r2, [r2, #12]
 80067ce:	0912      	lsrs	r2, r2, #4
 80067d0:	0452      	lsls	r2, r2, #17
 80067d2:	430a      	orrs	r2, r1
 80067d4:	492a      	ldr	r1, [pc, #168]	; (8006880 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067d6:	4313      	orrs	r3, r2
 80067d8:	610b      	str	r3, [r1, #16]
 80067da:	e027      	b.n	800682c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d112      	bne.n	8006808 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80067e2:	4b27      	ldr	r3, [pc, #156]	; (8006880 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80067ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	6892      	ldr	r2, [r2, #8]
 80067f2:	0211      	lsls	r1, r2, #8
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	6912      	ldr	r2, [r2, #16]
 80067f8:	0852      	lsrs	r2, r2, #1
 80067fa:	3a01      	subs	r2, #1
 80067fc:	0552      	lsls	r2, r2, #21
 80067fe:	430a      	orrs	r2, r1
 8006800:	491f      	ldr	r1, [pc, #124]	; (8006880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006802:	4313      	orrs	r3, r2
 8006804:	610b      	str	r3, [r1, #16]
 8006806:	e011      	b.n	800682c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006808:	4b1d      	ldr	r3, [pc, #116]	; (8006880 <RCCEx_PLLSAI1_Config+0x1e4>)
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006810:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	6892      	ldr	r2, [r2, #8]
 8006818:	0211      	lsls	r1, r2, #8
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	6952      	ldr	r2, [r2, #20]
 800681e:	0852      	lsrs	r2, r2, #1
 8006820:	3a01      	subs	r2, #1
 8006822:	0652      	lsls	r2, r2, #25
 8006824:	430a      	orrs	r2, r1
 8006826:	4916      	ldr	r1, [pc, #88]	; (8006880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006828:	4313      	orrs	r3, r2
 800682a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800682c:	4b14      	ldr	r3, [pc, #80]	; (8006880 <RCCEx_PLLSAI1_Config+0x1e4>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a13      	ldr	r2, [pc, #76]	; (8006880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006832:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006836:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006838:	f7fd f928 	bl	8003a8c <HAL_GetTick>
 800683c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800683e:	e009      	b.n	8006854 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006840:	f7fd f924 	bl	8003a8c <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	2b02      	cmp	r3, #2
 800684c:	d902      	bls.n	8006854 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	73fb      	strb	r3, [r7, #15]
          break;
 8006852:	e005      	b.n	8006860 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006854:	4b0a      	ldr	r3, [pc, #40]	; (8006880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800685c:	2b00      	cmp	r3, #0
 800685e:	d0ef      	beq.n	8006840 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006860:	7bfb      	ldrb	r3, [r7, #15]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d106      	bne.n	8006874 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006866:	4b06      	ldr	r3, [pc, #24]	; (8006880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006868:	691a      	ldr	r2, [r3, #16]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	699b      	ldr	r3, [r3, #24]
 800686e:	4904      	ldr	r1, [pc, #16]	; (8006880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006870:	4313      	orrs	r3, r2
 8006872:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006874:	7bfb      	ldrb	r3, [r7, #15]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	40021000 	.word	0x40021000

08006884 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800688e:	2300      	movs	r3, #0
 8006890:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006892:	4b6a      	ldr	r3, [pc, #424]	; (8006a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	f003 0303 	and.w	r3, r3, #3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d018      	beq.n	80068d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800689e:	4b67      	ldr	r3, [pc, #412]	; (8006a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	f003 0203 	and.w	r2, r3, #3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d10d      	bne.n	80068ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
       ||
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d009      	beq.n	80068ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80068b6:	4b61      	ldr	r3, [pc, #388]	; (8006a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	091b      	lsrs	r3, r3, #4
 80068bc:	f003 0307 	and.w	r3, r3, #7
 80068c0:	1c5a      	adds	r2, r3, #1
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	685b      	ldr	r3, [r3, #4]
       ||
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d047      	beq.n	800695a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	73fb      	strb	r3, [r7, #15]
 80068ce:	e044      	b.n	800695a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b03      	cmp	r3, #3
 80068d6:	d018      	beq.n	800690a <RCCEx_PLLSAI2_Config+0x86>
 80068d8:	2b03      	cmp	r3, #3
 80068da:	d825      	bhi.n	8006928 <RCCEx_PLLSAI2_Config+0xa4>
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d002      	beq.n	80068e6 <RCCEx_PLLSAI2_Config+0x62>
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d009      	beq.n	80068f8 <RCCEx_PLLSAI2_Config+0x74>
 80068e4:	e020      	b.n	8006928 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80068e6:	4b55      	ldr	r3, [pc, #340]	; (8006a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0302 	and.w	r3, r3, #2
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d11d      	bne.n	800692e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068f6:	e01a      	b.n	800692e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80068f8:	4b50      	ldr	r3, [pc, #320]	; (8006a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006900:	2b00      	cmp	r3, #0
 8006902:	d116      	bne.n	8006932 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006908:	e013      	b.n	8006932 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800690a:	4b4c      	ldr	r3, [pc, #304]	; (8006a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d10f      	bne.n	8006936 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006916:	4b49      	ldr	r3, [pc, #292]	; (8006a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d109      	bne.n	8006936 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006926:	e006      	b.n	8006936 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	73fb      	strb	r3, [r7, #15]
      break;
 800692c:	e004      	b.n	8006938 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800692e:	bf00      	nop
 8006930:	e002      	b.n	8006938 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006932:	bf00      	nop
 8006934:	e000      	b.n	8006938 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006936:	bf00      	nop
    }

    if(status == HAL_OK)
 8006938:	7bfb      	ldrb	r3, [r7, #15]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10d      	bne.n	800695a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800693e:	4b3f      	ldr	r3, [pc, #252]	; (8006a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6819      	ldr	r1, [r3, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	3b01      	subs	r3, #1
 8006950:	011b      	lsls	r3, r3, #4
 8006952:	430b      	orrs	r3, r1
 8006954:	4939      	ldr	r1, [pc, #228]	; (8006a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006956:	4313      	orrs	r3, r2
 8006958:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800695a:	7bfb      	ldrb	r3, [r7, #15]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d167      	bne.n	8006a30 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006960:	4b36      	ldr	r3, [pc, #216]	; (8006a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a35      	ldr	r2, [pc, #212]	; (8006a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006966:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800696a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800696c:	f7fd f88e 	bl	8003a8c <HAL_GetTick>
 8006970:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006972:	e009      	b.n	8006988 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006974:	f7fd f88a 	bl	8003a8c <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	2b02      	cmp	r3, #2
 8006980:	d902      	bls.n	8006988 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	73fb      	strb	r3, [r7, #15]
        break;
 8006986:	e005      	b.n	8006994 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006988:	4b2c      	ldr	r3, [pc, #176]	; (8006a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1ef      	bne.n	8006974 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006994:	7bfb      	ldrb	r3, [r7, #15]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d14a      	bne.n	8006a30 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d111      	bne.n	80069c4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80069a0:	4b26      	ldr	r3, [pc, #152]	; (8006a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80069a2:	695b      	ldr	r3, [r3, #20]
 80069a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80069a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	6892      	ldr	r2, [r2, #8]
 80069b0:	0211      	lsls	r1, r2, #8
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	68d2      	ldr	r2, [r2, #12]
 80069b6:	0912      	lsrs	r2, r2, #4
 80069b8:	0452      	lsls	r2, r2, #17
 80069ba:	430a      	orrs	r2, r1
 80069bc:	491f      	ldr	r1, [pc, #124]	; (8006a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80069be:	4313      	orrs	r3, r2
 80069c0:	614b      	str	r3, [r1, #20]
 80069c2:	e011      	b.n	80069e8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80069c4:	4b1d      	ldr	r3, [pc, #116]	; (8006a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80069c6:	695b      	ldr	r3, [r3, #20]
 80069c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80069cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	6892      	ldr	r2, [r2, #8]
 80069d4:	0211      	lsls	r1, r2, #8
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	6912      	ldr	r2, [r2, #16]
 80069da:	0852      	lsrs	r2, r2, #1
 80069dc:	3a01      	subs	r2, #1
 80069de:	0652      	lsls	r2, r2, #25
 80069e0:	430a      	orrs	r2, r1
 80069e2:	4916      	ldr	r1, [pc, #88]	; (8006a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80069e4:	4313      	orrs	r3, r2
 80069e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80069e8:	4b14      	ldr	r3, [pc, #80]	; (8006a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a13      	ldr	r2, [pc, #76]	; (8006a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80069ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069f4:	f7fd f84a 	bl	8003a8c <HAL_GetTick>
 80069f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80069fa:	e009      	b.n	8006a10 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80069fc:	f7fd f846 	bl	8003a8c <HAL_GetTick>
 8006a00:	4602      	mov	r2, r0
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d902      	bls.n	8006a10 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	73fb      	strb	r3, [r7, #15]
          break;
 8006a0e:	e005      	b.n	8006a1c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006a10:	4b0a      	ldr	r3, [pc, #40]	; (8006a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d0ef      	beq.n	80069fc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006a1c:	7bfb      	ldrb	r3, [r7, #15]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d106      	bne.n	8006a30 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006a22:	4b06      	ldr	r3, [pc, #24]	; (8006a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a24:	695a      	ldr	r2, [r3, #20]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	4904      	ldr	r1, [pc, #16]	; (8006a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	40021000 	.word	0x40021000

08006a40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d101      	bne.n	8006a52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e049      	b.n	8006ae6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d106      	bne.n	8006a6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7fc fe22 	bl	80036b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2202      	movs	r2, #2
 8006a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	3304      	adds	r3, #4
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	4610      	mov	r0, r2
 8006a80:	f000 fdc2 	bl	8007608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
	...

08006af0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d001      	beq.n	8006b08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e04f      	b.n	8006ba8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68da      	ldr	r2, [r3, #12]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f042 0201 	orr.w	r2, r2, #1
 8006b1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a23      	ldr	r2, [pc, #140]	; (8006bb4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d01d      	beq.n	8006b66 <HAL_TIM_Base_Start_IT+0x76>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b32:	d018      	beq.n	8006b66 <HAL_TIM_Base_Start_IT+0x76>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a1f      	ldr	r2, [pc, #124]	; (8006bb8 <HAL_TIM_Base_Start_IT+0xc8>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d013      	beq.n	8006b66 <HAL_TIM_Base_Start_IT+0x76>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a1e      	ldr	r2, [pc, #120]	; (8006bbc <HAL_TIM_Base_Start_IT+0xcc>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d00e      	beq.n	8006b66 <HAL_TIM_Base_Start_IT+0x76>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a1c      	ldr	r2, [pc, #112]	; (8006bc0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d009      	beq.n	8006b66 <HAL_TIM_Base_Start_IT+0x76>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a1b      	ldr	r2, [pc, #108]	; (8006bc4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d004      	beq.n	8006b66 <HAL_TIM_Base_Start_IT+0x76>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a19      	ldr	r2, [pc, #100]	; (8006bc8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d115      	bne.n	8006b92 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	689a      	ldr	r2, [r3, #8]
 8006b6c:	4b17      	ldr	r3, [pc, #92]	; (8006bcc <HAL_TIM_Base_Start_IT+0xdc>)
 8006b6e:	4013      	ands	r3, r2
 8006b70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2b06      	cmp	r3, #6
 8006b76:	d015      	beq.n	8006ba4 <HAL_TIM_Base_Start_IT+0xb4>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b7e:	d011      	beq.n	8006ba4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f042 0201 	orr.w	r2, r2, #1
 8006b8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b90:	e008      	b.n	8006ba4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f042 0201 	orr.w	r2, r2, #1
 8006ba0:	601a      	str	r2, [r3, #0]
 8006ba2:	e000      	b.n	8006ba6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ba4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3714      	adds	r7, #20
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr
 8006bb4:	40012c00 	.word	0x40012c00
 8006bb8:	40000400 	.word	0x40000400
 8006bbc:	40000800 	.word	0x40000800
 8006bc0:	40000c00 	.word	0x40000c00
 8006bc4:	40013400 	.word	0x40013400
 8006bc8:	40014000 	.word	0x40014000
 8006bcc:	00010007 	.word	0x00010007

08006bd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d101      	bne.n	8006be2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e049      	b.n	8006c76 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d106      	bne.n	8006bfc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 f841 	bl	8006c7e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2202      	movs	r2, #2
 8006c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	3304      	adds	r3, #4
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	4610      	mov	r0, r2
 8006c10:	f000 fcfa 	bl	8007608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b083      	sub	sp, #12
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c86:	bf00      	nop
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
	...

08006c94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d109      	bne.n	8006cb8 <HAL_TIM_PWM_Start+0x24>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	bf14      	ite	ne
 8006cb0:	2301      	movne	r3, #1
 8006cb2:	2300      	moveq	r3, #0
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	e03c      	b.n	8006d32 <HAL_TIM_PWM_Start+0x9e>
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	2b04      	cmp	r3, #4
 8006cbc:	d109      	bne.n	8006cd2 <HAL_TIM_PWM_Start+0x3e>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	bf14      	ite	ne
 8006cca:	2301      	movne	r3, #1
 8006ccc:	2300      	moveq	r3, #0
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	e02f      	b.n	8006d32 <HAL_TIM_PWM_Start+0x9e>
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	2b08      	cmp	r3, #8
 8006cd6:	d109      	bne.n	8006cec <HAL_TIM_PWM_Start+0x58>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	bf14      	ite	ne
 8006ce4:	2301      	movne	r3, #1
 8006ce6:	2300      	moveq	r3, #0
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	e022      	b.n	8006d32 <HAL_TIM_PWM_Start+0x9e>
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	2b0c      	cmp	r3, #12
 8006cf0:	d109      	bne.n	8006d06 <HAL_TIM_PWM_Start+0x72>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	bf14      	ite	ne
 8006cfe:	2301      	movne	r3, #1
 8006d00:	2300      	moveq	r3, #0
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	e015      	b.n	8006d32 <HAL_TIM_PWM_Start+0x9e>
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	2b10      	cmp	r3, #16
 8006d0a:	d109      	bne.n	8006d20 <HAL_TIM_PWM_Start+0x8c>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	bf14      	ite	ne
 8006d18:	2301      	movne	r3, #1
 8006d1a:	2300      	moveq	r3, #0
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	e008      	b.n	8006d32 <HAL_TIM_PWM_Start+0x9e>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	bf14      	ite	ne
 8006d2c:	2301      	movne	r3, #1
 8006d2e:	2300      	moveq	r3, #0
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d001      	beq.n	8006d3a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e09c      	b.n	8006e74 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d104      	bne.n	8006d4a <HAL_TIM_PWM_Start+0xb6>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2202      	movs	r2, #2
 8006d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d48:	e023      	b.n	8006d92 <HAL_TIM_PWM_Start+0xfe>
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	2b04      	cmp	r3, #4
 8006d4e:	d104      	bne.n	8006d5a <HAL_TIM_PWM_Start+0xc6>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2202      	movs	r2, #2
 8006d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d58:	e01b      	b.n	8006d92 <HAL_TIM_PWM_Start+0xfe>
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	2b08      	cmp	r3, #8
 8006d5e:	d104      	bne.n	8006d6a <HAL_TIM_PWM_Start+0xd6>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2202      	movs	r2, #2
 8006d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d68:	e013      	b.n	8006d92 <HAL_TIM_PWM_Start+0xfe>
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	2b0c      	cmp	r3, #12
 8006d6e:	d104      	bne.n	8006d7a <HAL_TIM_PWM_Start+0xe6>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2202      	movs	r2, #2
 8006d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d78:	e00b      	b.n	8006d92 <HAL_TIM_PWM_Start+0xfe>
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	2b10      	cmp	r3, #16
 8006d7e:	d104      	bne.n	8006d8a <HAL_TIM_PWM_Start+0xf6>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2202      	movs	r2, #2
 8006d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d88:	e003      	b.n	8006d92 <HAL_TIM_PWM_Start+0xfe>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2202      	movs	r2, #2
 8006d8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2201      	movs	r2, #1
 8006d98:	6839      	ldr	r1, [r7, #0]
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f001 f83e 	bl	8007e1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a35      	ldr	r2, [pc, #212]	; (8006e7c <HAL_TIM_PWM_Start+0x1e8>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d013      	beq.n	8006dd2 <HAL_TIM_PWM_Start+0x13e>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a34      	ldr	r2, [pc, #208]	; (8006e80 <HAL_TIM_PWM_Start+0x1ec>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d00e      	beq.n	8006dd2 <HAL_TIM_PWM_Start+0x13e>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a32      	ldr	r2, [pc, #200]	; (8006e84 <HAL_TIM_PWM_Start+0x1f0>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d009      	beq.n	8006dd2 <HAL_TIM_PWM_Start+0x13e>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a31      	ldr	r2, [pc, #196]	; (8006e88 <HAL_TIM_PWM_Start+0x1f4>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d004      	beq.n	8006dd2 <HAL_TIM_PWM_Start+0x13e>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a2f      	ldr	r2, [pc, #188]	; (8006e8c <HAL_TIM_PWM_Start+0x1f8>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d101      	bne.n	8006dd6 <HAL_TIM_PWM_Start+0x142>
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e000      	b.n	8006dd8 <HAL_TIM_PWM_Start+0x144>
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d007      	beq.n	8006dec <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006dea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a22      	ldr	r2, [pc, #136]	; (8006e7c <HAL_TIM_PWM_Start+0x1e8>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d01d      	beq.n	8006e32 <HAL_TIM_PWM_Start+0x19e>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dfe:	d018      	beq.n	8006e32 <HAL_TIM_PWM_Start+0x19e>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a22      	ldr	r2, [pc, #136]	; (8006e90 <HAL_TIM_PWM_Start+0x1fc>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d013      	beq.n	8006e32 <HAL_TIM_PWM_Start+0x19e>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a21      	ldr	r2, [pc, #132]	; (8006e94 <HAL_TIM_PWM_Start+0x200>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d00e      	beq.n	8006e32 <HAL_TIM_PWM_Start+0x19e>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a1f      	ldr	r2, [pc, #124]	; (8006e98 <HAL_TIM_PWM_Start+0x204>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d009      	beq.n	8006e32 <HAL_TIM_PWM_Start+0x19e>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a17      	ldr	r2, [pc, #92]	; (8006e80 <HAL_TIM_PWM_Start+0x1ec>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d004      	beq.n	8006e32 <HAL_TIM_PWM_Start+0x19e>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a15      	ldr	r2, [pc, #84]	; (8006e84 <HAL_TIM_PWM_Start+0x1f0>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d115      	bne.n	8006e5e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	689a      	ldr	r2, [r3, #8]
 8006e38:	4b18      	ldr	r3, [pc, #96]	; (8006e9c <HAL_TIM_PWM_Start+0x208>)
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2b06      	cmp	r3, #6
 8006e42:	d015      	beq.n	8006e70 <HAL_TIM_PWM_Start+0x1dc>
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e4a:	d011      	beq.n	8006e70 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f042 0201 	orr.w	r2, r2, #1
 8006e5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e5c:	e008      	b.n	8006e70 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f042 0201 	orr.w	r2, r2, #1
 8006e6c:	601a      	str	r2, [r3, #0]
 8006e6e:	e000      	b.n	8006e72 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e70:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	40012c00 	.word	0x40012c00
 8006e80:	40013400 	.word	0x40013400
 8006e84:	40014000 	.word	0x40014000
 8006e88:	40014400 	.word	0x40014400
 8006e8c:	40014800 	.word	0x40014800
 8006e90:	40000400 	.word	0x40000400
 8006e94:	40000800 	.word	0x40000800
 8006e98:	40000c00 	.word	0x40000c00
 8006e9c:	00010007 	.word	0x00010007

08006ea0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	6839      	ldr	r1, [r7, #0]
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 ffb2 	bl	8007e1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a3e      	ldr	r2, [pc, #248]	; (8006fb8 <HAL_TIM_PWM_Stop+0x118>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d013      	beq.n	8006eea <HAL_TIM_PWM_Stop+0x4a>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a3d      	ldr	r2, [pc, #244]	; (8006fbc <HAL_TIM_PWM_Stop+0x11c>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d00e      	beq.n	8006eea <HAL_TIM_PWM_Stop+0x4a>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a3b      	ldr	r2, [pc, #236]	; (8006fc0 <HAL_TIM_PWM_Stop+0x120>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d009      	beq.n	8006eea <HAL_TIM_PWM_Stop+0x4a>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a3a      	ldr	r2, [pc, #232]	; (8006fc4 <HAL_TIM_PWM_Stop+0x124>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d004      	beq.n	8006eea <HAL_TIM_PWM_Stop+0x4a>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a38      	ldr	r2, [pc, #224]	; (8006fc8 <HAL_TIM_PWM_Stop+0x128>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d101      	bne.n	8006eee <HAL_TIM_PWM_Stop+0x4e>
 8006eea:	2301      	movs	r3, #1
 8006eec:	e000      	b.n	8006ef0 <HAL_TIM_PWM_Stop+0x50>
 8006eee:	2300      	movs	r3, #0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d017      	beq.n	8006f24 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	6a1a      	ldr	r2, [r3, #32]
 8006efa:	f241 1311 	movw	r3, #4369	; 0x1111
 8006efe:	4013      	ands	r3, r2
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10f      	bne.n	8006f24 <HAL_TIM_PWM_Stop+0x84>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6a1a      	ldr	r2, [r3, #32]
 8006f0a:	f240 4344 	movw	r3, #1092	; 0x444
 8006f0e:	4013      	ands	r3, r2
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d107      	bne.n	8006f24 <HAL_TIM_PWM_Stop+0x84>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f22:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6a1a      	ldr	r2, [r3, #32]
 8006f2a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006f2e:	4013      	ands	r3, r2
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10f      	bne.n	8006f54 <HAL_TIM_PWM_Stop+0xb4>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	6a1a      	ldr	r2, [r3, #32]
 8006f3a:	f240 4344 	movw	r3, #1092	; 0x444
 8006f3e:	4013      	ands	r3, r2
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d107      	bne.n	8006f54 <HAL_TIM_PWM_Stop+0xb4>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f022 0201 	bic.w	r2, r2, #1
 8006f52:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d104      	bne.n	8006f64 <HAL_TIM_PWM_Stop+0xc4>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f62:	e023      	b.n	8006fac <HAL_TIM_PWM_Stop+0x10c>
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	2b04      	cmp	r3, #4
 8006f68:	d104      	bne.n	8006f74 <HAL_TIM_PWM_Stop+0xd4>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f72:	e01b      	b.n	8006fac <HAL_TIM_PWM_Stop+0x10c>
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	2b08      	cmp	r3, #8
 8006f78:	d104      	bne.n	8006f84 <HAL_TIM_PWM_Stop+0xe4>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f82:	e013      	b.n	8006fac <HAL_TIM_PWM_Stop+0x10c>
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	2b0c      	cmp	r3, #12
 8006f88:	d104      	bne.n	8006f94 <HAL_TIM_PWM_Stop+0xf4>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f92:	e00b      	b.n	8006fac <HAL_TIM_PWM_Stop+0x10c>
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	2b10      	cmp	r3, #16
 8006f98:	d104      	bne.n	8006fa4 <HAL_TIM_PWM_Stop+0x104>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fa2:	e003      	b.n	8006fac <HAL_TIM_PWM_Stop+0x10c>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3708      	adds	r7, #8
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	40012c00 	.word	0x40012c00
 8006fbc:	40013400 	.word	0x40013400
 8006fc0:	40014000 	.word	0x40014000
 8006fc4:	40014400 	.word	0x40014400
 8006fc8:	40014800 	.word	0x40014800

08006fcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	f003 0302 	and.w	r3, r3, #2
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d122      	bne.n	8007028 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	f003 0302 	and.w	r3, r3, #2
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d11b      	bne.n	8007028 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f06f 0202 	mvn.w	r2, #2
 8006ff8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	699b      	ldr	r3, [r3, #24]
 8007006:	f003 0303 	and.w	r3, r3, #3
 800700a:	2b00      	cmp	r3, #0
 800700c:	d003      	beq.n	8007016 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 fadc 	bl	80075cc <HAL_TIM_IC_CaptureCallback>
 8007014:	e005      	b.n	8007022 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 face 	bl	80075b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 fadf 	bl	80075e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	f003 0304 	and.w	r3, r3, #4
 8007032:	2b04      	cmp	r3, #4
 8007034:	d122      	bne.n	800707c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	f003 0304 	and.w	r3, r3, #4
 8007040:	2b04      	cmp	r3, #4
 8007042:	d11b      	bne.n	800707c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f06f 0204 	mvn.w	r2, #4
 800704c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2202      	movs	r2, #2
 8007052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	699b      	ldr	r3, [r3, #24]
 800705a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800705e:	2b00      	cmp	r3, #0
 8007060:	d003      	beq.n	800706a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fab2 	bl	80075cc <HAL_TIM_IC_CaptureCallback>
 8007068:	e005      	b.n	8007076 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 faa4 	bl	80075b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 fab5 	bl	80075e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	f003 0308 	and.w	r3, r3, #8
 8007086:	2b08      	cmp	r3, #8
 8007088:	d122      	bne.n	80070d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	f003 0308 	and.w	r3, r3, #8
 8007094:	2b08      	cmp	r3, #8
 8007096:	d11b      	bne.n	80070d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f06f 0208 	mvn.w	r2, #8
 80070a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2204      	movs	r2, #4
 80070a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	69db      	ldr	r3, [r3, #28]
 80070ae:	f003 0303 	and.w	r3, r3, #3
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d003      	beq.n	80070be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 fa88 	bl	80075cc <HAL_TIM_IC_CaptureCallback>
 80070bc:	e005      	b.n	80070ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 fa7a 	bl	80075b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fa8b 	bl	80075e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	f003 0310 	and.w	r3, r3, #16
 80070da:	2b10      	cmp	r3, #16
 80070dc:	d122      	bne.n	8007124 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	f003 0310 	and.w	r3, r3, #16
 80070e8:	2b10      	cmp	r3, #16
 80070ea:	d11b      	bne.n	8007124 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f06f 0210 	mvn.w	r2, #16
 80070f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2208      	movs	r2, #8
 80070fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	69db      	ldr	r3, [r3, #28]
 8007102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007106:	2b00      	cmp	r3, #0
 8007108:	d003      	beq.n	8007112 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fa5e 	bl	80075cc <HAL_TIM_IC_CaptureCallback>
 8007110:	e005      	b.n	800711e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 fa50 	bl	80075b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 fa61 	bl	80075e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	f003 0301 	and.w	r3, r3, #1
 800712e:	2b01      	cmp	r3, #1
 8007130:	d10e      	bne.n	8007150 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	f003 0301 	and.w	r3, r3, #1
 800713c:	2b01      	cmp	r3, #1
 800713e:	d107      	bne.n	8007150 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f06f 0201 	mvn.w	r2, #1
 8007148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f7fa fdc4 	bl	8001cd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800715a:	2b80      	cmp	r3, #128	; 0x80
 800715c:	d10e      	bne.n	800717c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007168:	2b80      	cmp	r3, #128	; 0x80
 800716a:	d107      	bne.n	800717c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 ff08 	bl	8007f8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800718a:	d10e      	bne.n	80071aa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007196:	2b80      	cmp	r3, #128	; 0x80
 8007198:	d107      	bne.n	80071aa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80071a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 fefb 	bl	8007fa0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b4:	2b40      	cmp	r3, #64	; 0x40
 80071b6:	d10e      	bne.n	80071d6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c2:	2b40      	cmp	r3, #64	; 0x40
 80071c4:	d107      	bne.n	80071d6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80071ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 fa0f 	bl	80075f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	f003 0320 	and.w	r3, r3, #32
 80071e0:	2b20      	cmp	r3, #32
 80071e2:	d10e      	bne.n	8007202 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	f003 0320 	and.w	r3, r3, #32
 80071ee:	2b20      	cmp	r3, #32
 80071f0:	d107      	bne.n	8007202 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f06f 0220 	mvn.w	r2, #32
 80071fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 febb 	bl	8007f78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007202:	bf00      	nop
 8007204:	3708      	adds	r7, #8
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
	...

0800720c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800721e:	2b01      	cmp	r3, #1
 8007220:	d101      	bne.n	8007226 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007222:	2302      	movs	r3, #2
 8007224:	e0fd      	b.n	8007422 <HAL_TIM_PWM_ConfigChannel+0x216>
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2201      	movs	r2, #1
 800722a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2b14      	cmp	r3, #20
 8007232:	f200 80f0 	bhi.w	8007416 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8007236:	a201      	add	r2, pc, #4	; (adr r2, 800723c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800723c:	08007291 	.word	0x08007291
 8007240:	08007417 	.word	0x08007417
 8007244:	08007417 	.word	0x08007417
 8007248:	08007417 	.word	0x08007417
 800724c:	080072d1 	.word	0x080072d1
 8007250:	08007417 	.word	0x08007417
 8007254:	08007417 	.word	0x08007417
 8007258:	08007417 	.word	0x08007417
 800725c:	08007313 	.word	0x08007313
 8007260:	08007417 	.word	0x08007417
 8007264:	08007417 	.word	0x08007417
 8007268:	08007417 	.word	0x08007417
 800726c:	08007353 	.word	0x08007353
 8007270:	08007417 	.word	0x08007417
 8007274:	08007417 	.word	0x08007417
 8007278:	08007417 	.word	0x08007417
 800727c:	08007395 	.word	0x08007395
 8007280:	08007417 	.word	0x08007417
 8007284:	08007417 	.word	0x08007417
 8007288:	08007417 	.word	0x08007417
 800728c:	080073d5 	.word	0x080073d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68b9      	ldr	r1, [r7, #8]
 8007296:	4618      	mov	r0, r3
 8007298:	f000 fa50 	bl	800773c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	699a      	ldr	r2, [r3, #24]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f042 0208 	orr.w	r2, r2, #8
 80072aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	699a      	ldr	r2, [r3, #24]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f022 0204 	bic.w	r2, r2, #4
 80072ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6999      	ldr	r1, [r3, #24]
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	691a      	ldr	r2, [r3, #16]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	430a      	orrs	r2, r1
 80072cc:	619a      	str	r2, [r3, #24]
      break;
 80072ce:	e0a3      	b.n	8007418 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68b9      	ldr	r1, [r7, #8]
 80072d6:	4618      	mov	r0, r3
 80072d8:	f000 fac0 	bl	800785c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	699a      	ldr	r2, [r3, #24]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	699a      	ldr	r2, [r3, #24]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6999      	ldr	r1, [r3, #24]
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	021a      	lsls	r2, r3, #8
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	430a      	orrs	r2, r1
 800730e:	619a      	str	r2, [r3, #24]
      break;
 8007310:	e082      	b.n	8007418 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68b9      	ldr	r1, [r7, #8]
 8007318:	4618      	mov	r0, r3
 800731a:	f000 fb29 	bl	8007970 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	69da      	ldr	r2, [r3, #28]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f042 0208 	orr.w	r2, r2, #8
 800732c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	69da      	ldr	r2, [r3, #28]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f022 0204 	bic.w	r2, r2, #4
 800733c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	69d9      	ldr	r1, [r3, #28]
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	691a      	ldr	r2, [r3, #16]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	430a      	orrs	r2, r1
 800734e:	61da      	str	r2, [r3, #28]
      break;
 8007350:	e062      	b.n	8007418 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68b9      	ldr	r1, [r7, #8]
 8007358:	4618      	mov	r0, r3
 800735a:	f000 fb91 	bl	8007a80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	69da      	ldr	r2, [r3, #28]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800736c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	69da      	ldr	r2, [r3, #28]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800737c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	69d9      	ldr	r1, [r3, #28]
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	021a      	lsls	r2, r3, #8
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	430a      	orrs	r2, r1
 8007390:	61da      	str	r2, [r3, #28]
      break;
 8007392:	e041      	b.n	8007418 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68b9      	ldr	r1, [r7, #8]
 800739a:	4618      	mov	r0, r3
 800739c:	f000 fbda 	bl	8007b54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f042 0208 	orr.w	r2, r2, #8
 80073ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f022 0204 	bic.w	r2, r2, #4
 80073be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	691a      	ldr	r2, [r3, #16]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	430a      	orrs	r2, r1
 80073d0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80073d2:	e021      	b.n	8007418 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68b9      	ldr	r1, [r7, #8]
 80073da:	4618      	mov	r0, r3
 80073dc:	f000 fc1e 	bl	8007c1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	021a      	lsls	r2, r3, #8
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	430a      	orrs	r2, r1
 8007412:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007414:	e000      	b.n	8007418 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8007416:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2200      	movs	r2, #0
 800741c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop

0800742c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800743c:	2b01      	cmp	r3, #1
 800743e:	d101      	bne.n	8007444 <HAL_TIM_ConfigClockSource+0x18>
 8007440:	2302      	movs	r3, #2
 8007442:	e0b5      	b.n	80075b0 <HAL_TIM_ConfigClockSource+0x184>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2202      	movs	r2, #2
 8007450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007462:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007466:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800746e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007480:	d03e      	beq.n	8007500 <HAL_TIM_ConfigClockSource+0xd4>
 8007482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007486:	f200 8087 	bhi.w	8007598 <HAL_TIM_ConfigClockSource+0x16c>
 800748a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800748e:	f000 8085 	beq.w	800759c <HAL_TIM_ConfigClockSource+0x170>
 8007492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007496:	d87f      	bhi.n	8007598 <HAL_TIM_ConfigClockSource+0x16c>
 8007498:	2b70      	cmp	r3, #112	; 0x70
 800749a:	d01a      	beq.n	80074d2 <HAL_TIM_ConfigClockSource+0xa6>
 800749c:	2b70      	cmp	r3, #112	; 0x70
 800749e:	d87b      	bhi.n	8007598 <HAL_TIM_ConfigClockSource+0x16c>
 80074a0:	2b60      	cmp	r3, #96	; 0x60
 80074a2:	d050      	beq.n	8007546 <HAL_TIM_ConfigClockSource+0x11a>
 80074a4:	2b60      	cmp	r3, #96	; 0x60
 80074a6:	d877      	bhi.n	8007598 <HAL_TIM_ConfigClockSource+0x16c>
 80074a8:	2b50      	cmp	r3, #80	; 0x50
 80074aa:	d03c      	beq.n	8007526 <HAL_TIM_ConfigClockSource+0xfa>
 80074ac:	2b50      	cmp	r3, #80	; 0x50
 80074ae:	d873      	bhi.n	8007598 <HAL_TIM_ConfigClockSource+0x16c>
 80074b0:	2b40      	cmp	r3, #64	; 0x40
 80074b2:	d058      	beq.n	8007566 <HAL_TIM_ConfigClockSource+0x13a>
 80074b4:	2b40      	cmp	r3, #64	; 0x40
 80074b6:	d86f      	bhi.n	8007598 <HAL_TIM_ConfigClockSource+0x16c>
 80074b8:	2b30      	cmp	r3, #48	; 0x30
 80074ba:	d064      	beq.n	8007586 <HAL_TIM_ConfigClockSource+0x15a>
 80074bc:	2b30      	cmp	r3, #48	; 0x30
 80074be:	d86b      	bhi.n	8007598 <HAL_TIM_ConfigClockSource+0x16c>
 80074c0:	2b20      	cmp	r3, #32
 80074c2:	d060      	beq.n	8007586 <HAL_TIM_ConfigClockSource+0x15a>
 80074c4:	2b20      	cmp	r3, #32
 80074c6:	d867      	bhi.n	8007598 <HAL_TIM_ConfigClockSource+0x16c>
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d05c      	beq.n	8007586 <HAL_TIM_ConfigClockSource+0x15a>
 80074cc:	2b10      	cmp	r3, #16
 80074ce:	d05a      	beq.n	8007586 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80074d0:	e062      	b.n	8007598 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6818      	ldr	r0, [r3, #0]
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	6899      	ldr	r1, [r3, #8]
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	685a      	ldr	r2, [r3, #4]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	f000 fc7b 	bl	8007ddc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80074f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	609a      	str	r2, [r3, #8]
      break;
 80074fe:	e04e      	b.n	800759e <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6818      	ldr	r0, [r3, #0]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	6899      	ldr	r1, [r3, #8]
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	685a      	ldr	r2, [r3, #4]
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	f000 fc64 	bl	8007ddc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	689a      	ldr	r2, [r3, #8]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007522:	609a      	str	r2, [r3, #8]
      break;
 8007524:	e03b      	b.n	800759e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6818      	ldr	r0, [r3, #0]
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	6859      	ldr	r1, [r3, #4]
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	461a      	mov	r2, r3
 8007534:	f000 fbd8 	bl	8007ce8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2150      	movs	r1, #80	; 0x50
 800753e:	4618      	mov	r0, r3
 8007540:	f000 fc31 	bl	8007da6 <TIM_ITRx_SetConfig>
      break;
 8007544:	e02b      	b.n	800759e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6818      	ldr	r0, [r3, #0]
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	6859      	ldr	r1, [r3, #4]
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	461a      	mov	r2, r3
 8007554:	f000 fbf7 	bl	8007d46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2160      	movs	r1, #96	; 0x60
 800755e:	4618      	mov	r0, r3
 8007560:	f000 fc21 	bl	8007da6 <TIM_ITRx_SetConfig>
      break;
 8007564:	e01b      	b.n	800759e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6818      	ldr	r0, [r3, #0]
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	6859      	ldr	r1, [r3, #4]
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	461a      	mov	r2, r3
 8007574:	f000 fbb8 	bl	8007ce8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2140      	movs	r1, #64	; 0x40
 800757e:	4618      	mov	r0, r3
 8007580:	f000 fc11 	bl	8007da6 <TIM_ITRx_SetConfig>
      break;
 8007584:	e00b      	b.n	800759e <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4619      	mov	r1, r3
 8007590:	4610      	mov	r0, r2
 8007592:	f000 fc08 	bl	8007da6 <TIM_ITRx_SetConfig>
        break;
 8007596:	e002      	b.n	800759e <HAL_TIM_ConfigClockSource+0x172>
      break;
 8007598:	bf00      	nop
 800759a:	e000      	b.n	800759e <HAL_TIM_ConfigClockSource+0x172>
      break;
 800759c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2201      	movs	r2, #1
 80075a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80075fc:	bf00      	nop
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a40      	ldr	r2, [pc, #256]	; (800771c <TIM_Base_SetConfig+0x114>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d013      	beq.n	8007648 <TIM_Base_SetConfig+0x40>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007626:	d00f      	beq.n	8007648 <TIM_Base_SetConfig+0x40>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a3d      	ldr	r2, [pc, #244]	; (8007720 <TIM_Base_SetConfig+0x118>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d00b      	beq.n	8007648 <TIM_Base_SetConfig+0x40>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a3c      	ldr	r2, [pc, #240]	; (8007724 <TIM_Base_SetConfig+0x11c>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d007      	beq.n	8007648 <TIM_Base_SetConfig+0x40>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a3b      	ldr	r2, [pc, #236]	; (8007728 <TIM_Base_SetConfig+0x120>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d003      	beq.n	8007648 <TIM_Base_SetConfig+0x40>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a3a      	ldr	r2, [pc, #232]	; (800772c <TIM_Base_SetConfig+0x124>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d108      	bne.n	800765a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800764e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	4313      	orrs	r3, r2
 8007658:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a2f      	ldr	r2, [pc, #188]	; (800771c <TIM_Base_SetConfig+0x114>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d01f      	beq.n	80076a2 <TIM_Base_SetConfig+0x9a>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007668:	d01b      	beq.n	80076a2 <TIM_Base_SetConfig+0x9a>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a2c      	ldr	r2, [pc, #176]	; (8007720 <TIM_Base_SetConfig+0x118>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d017      	beq.n	80076a2 <TIM_Base_SetConfig+0x9a>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a2b      	ldr	r2, [pc, #172]	; (8007724 <TIM_Base_SetConfig+0x11c>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d013      	beq.n	80076a2 <TIM_Base_SetConfig+0x9a>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a2a      	ldr	r2, [pc, #168]	; (8007728 <TIM_Base_SetConfig+0x120>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d00f      	beq.n	80076a2 <TIM_Base_SetConfig+0x9a>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a29      	ldr	r2, [pc, #164]	; (800772c <TIM_Base_SetConfig+0x124>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d00b      	beq.n	80076a2 <TIM_Base_SetConfig+0x9a>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a28      	ldr	r2, [pc, #160]	; (8007730 <TIM_Base_SetConfig+0x128>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d007      	beq.n	80076a2 <TIM_Base_SetConfig+0x9a>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a27      	ldr	r2, [pc, #156]	; (8007734 <TIM_Base_SetConfig+0x12c>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d003      	beq.n	80076a2 <TIM_Base_SetConfig+0x9a>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a26      	ldr	r2, [pc, #152]	; (8007738 <TIM_Base_SetConfig+0x130>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d108      	bne.n	80076b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	695b      	ldr	r3, [r3, #20]
 80076be:	4313      	orrs	r3, r2
 80076c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	689a      	ldr	r2, [r3, #8]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a10      	ldr	r2, [pc, #64]	; (800771c <TIM_Base_SetConfig+0x114>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d00f      	beq.n	8007700 <TIM_Base_SetConfig+0xf8>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a12      	ldr	r2, [pc, #72]	; (800772c <TIM_Base_SetConfig+0x124>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d00b      	beq.n	8007700 <TIM_Base_SetConfig+0xf8>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a11      	ldr	r2, [pc, #68]	; (8007730 <TIM_Base_SetConfig+0x128>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d007      	beq.n	8007700 <TIM_Base_SetConfig+0xf8>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a10      	ldr	r2, [pc, #64]	; (8007734 <TIM_Base_SetConfig+0x12c>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d003      	beq.n	8007700 <TIM_Base_SetConfig+0xf8>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a0f      	ldr	r2, [pc, #60]	; (8007738 <TIM_Base_SetConfig+0x130>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d103      	bne.n	8007708 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	691a      	ldr	r2, [r3, #16]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	615a      	str	r2, [r3, #20]
}
 800770e:	bf00      	nop
 8007710:	3714      	adds	r7, #20
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	40012c00 	.word	0x40012c00
 8007720:	40000400 	.word	0x40000400
 8007724:	40000800 	.word	0x40000800
 8007728:	40000c00 	.word	0x40000c00
 800772c:	40013400 	.word	0x40013400
 8007730:	40014000 	.word	0x40014000
 8007734:	40014400 	.word	0x40014400
 8007738:	40014800 	.word	0x40014800

0800773c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800773c:	b480      	push	{r7}
 800773e:	b087      	sub	sp, #28
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a1b      	ldr	r3, [r3, #32]
 800774a:	f023 0201 	bic.w	r2, r3, #1
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a1b      	ldr	r3, [r3, #32]
 8007756:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	699b      	ldr	r3, [r3, #24]
 8007762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800776a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800776e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f023 0303 	bic.w	r3, r3, #3
 8007776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	4313      	orrs	r3, r2
 8007780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	f023 0302 	bic.w	r3, r3, #2
 8007788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	697a      	ldr	r2, [r7, #20]
 8007790:	4313      	orrs	r3, r2
 8007792:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4a2c      	ldr	r2, [pc, #176]	; (8007848 <TIM_OC1_SetConfig+0x10c>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d00f      	beq.n	80077bc <TIM_OC1_SetConfig+0x80>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a2b      	ldr	r2, [pc, #172]	; (800784c <TIM_OC1_SetConfig+0x110>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d00b      	beq.n	80077bc <TIM_OC1_SetConfig+0x80>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a2a      	ldr	r2, [pc, #168]	; (8007850 <TIM_OC1_SetConfig+0x114>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d007      	beq.n	80077bc <TIM_OC1_SetConfig+0x80>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a29      	ldr	r2, [pc, #164]	; (8007854 <TIM_OC1_SetConfig+0x118>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d003      	beq.n	80077bc <TIM_OC1_SetConfig+0x80>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a28      	ldr	r2, [pc, #160]	; (8007858 <TIM_OC1_SetConfig+0x11c>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d10c      	bne.n	80077d6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	f023 0308 	bic.w	r3, r3, #8
 80077c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	697a      	ldr	r2, [r7, #20]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	f023 0304 	bic.w	r3, r3, #4
 80077d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a1b      	ldr	r2, [pc, #108]	; (8007848 <TIM_OC1_SetConfig+0x10c>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d00f      	beq.n	80077fe <TIM_OC1_SetConfig+0xc2>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a1a      	ldr	r2, [pc, #104]	; (800784c <TIM_OC1_SetConfig+0x110>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d00b      	beq.n	80077fe <TIM_OC1_SetConfig+0xc2>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a19      	ldr	r2, [pc, #100]	; (8007850 <TIM_OC1_SetConfig+0x114>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d007      	beq.n	80077fe <TIM_OC1_SetConfig+0xc2>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a18      	ldr	r2, [pc, #96]	; (8007854 <TIM_OC1_SetConfig+0x118>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d003      	beq.n	80077fe <TIM_OC1_SetConfig+0xc2>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a17      	ldr	r2, [pc, #92]	; (8007858 <TIM_OC1_SetConfig+0x11c>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d111      	bne.n	8007822 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007804:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800780c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	695b      	ldr	r3, [r3, #20]
 8007812:	693a      	ldr	r2, [r7, #16]
 8007814:	4313      	orrs	r3, r2
 8007816:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	699b      	ldr	r3, [r3, #24]
 800781c:	693a      	ldr	r2, [r7, #16]
 800781e:	4313      	orrs	r3, r2
 8007820:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	693a      	ldr	r2, [r7, #16]
 8007826:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	685a      	ldr	r2, [r3, #4]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	697a      	ldr	r2, [r7, #20]
 800783a:	621a      	str	r2, [r3, #32]
}
 800783c:	bf00      	nop
 800783e:	371c      	adds	r7, #28
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr
 8007848:	40012c00 	.word	0x40012c00
 800784c:	40013400 	.word	0x40013400
 8007850:	40014000 	.word	0x40014000
 8007854:	40014400 	.word	0x40014400
 8007858:	40014800 	.word	0x40014800

0800785c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800785c:	b480      	push	{r7}
 800785e:	b087      	sub	sp, #28
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a1b      	ldr	r3, [r3, #32]
 800786a:	f023 0210 	bic.w	r2, r3, #16
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a1b      	ldr	r3, [r3, #32]
 8007876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	699b      	ldr	r3, [r3, #24]
 8007882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800788a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800788e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	021b      	lsls	r3, r3, #8
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	f023 0320 	bic.w	r3, r3, #32
 80078aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	011b      	lsls	r3, r3, #4
 80078b2:	697a      	ldr	r2, [r7, #20]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a28      	ldr	r2, [pc, #160]	; (800795c <TIM_OC2_SetConfig+0x100>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d003      	beq.n	80078c8 <TIM_OC2_SetConfig+0x6c>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a27      	ldr	r2, [pc, #156]	; (8007960 <TIM_OC2_SetConfig+0x104>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d10d      	bne.n	80078e4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	011b      	lsls	r3, r3, #4
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	4313      	orrs	r3, r2
 80078da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4a1d      	ldr	r2, [pc, #116]	; (800795c <TIM_OC2_SetConfig+0x100>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d00f      	beq.n	800790c <TIM_OC2_SetConfig+0xb0>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a1c      	ldr	r2, [pc, #112]	; (8007960 <TIM_OC2_SetConfig+0x104>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d00b      	beq.n	800790c <TIM_OC2_SetConfig+0xb0>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4a1b      	ldr	r2, [pc, #108]	; (8007964 <TIM_OC2_SetConfig+0x108>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d007      	beq.n	800790c <TIM_OC2_SetConfig+0xb0>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	4a1a      	ldr	r2, [pc, #104]	; (8007968 <TIM_OC2_SetConfig+0x10c>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d003      	beq.n	800790c <TIM_OC2_SetConfig+0xb0>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4a19      	ldr	r2, [pc, #100]	; (800796c <TIM_OC2_SetConfig+0x110>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d113      	bne.n	8007934 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007912:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800791a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	695b      	ldr	r3, [r3, #20]
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	693a      	ldr	r2, [r7, #16]
 8007924:	4313      	orrs	r3, r2
 8007926:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	699b      	ldr	r3, [r3, #24]
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	693a      	ldr	r2, [r7, #16]
 8007930:	4313      	orrs	r3, r2
 8007932:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	693a      	ldr	r2, [r7, #16]
 8007938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	685a      	ldr	r2, [r3, #4]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	697a      	ldr	r2, [r7, #20]
 800794c:	621a      	str	r2, [r3, #32]
}
 800794e:	bf00      	nop
 8007950:	371c      	adds	r7, #28
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	40012c00 	.word	0x40012c00
 8007960:	40013400 	.word	0x40013400
 8007964:	40014000 	.word	0x40014000
 8007968:	40014400 	.word	0x40014400
 800796c:	40014800 	.word	0x40014800

08007970 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007970:	b480      	push	{r7}
 8007972:	b087      	sub	sp, #28
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6a1b      	ldr	r3, [r3, #32]
 800798a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	69db      	ldr	r3, [r3, #28]
 8007996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800799e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f023 0303 	bic.w	r3, r3, #3
 80079aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	021b      	lsls	r3, r3, #8
 80079c4:	697a      	ldr	r2, [r7, #20]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a27      	ldr	r2, [pc, #156]	; (8007a6c <TIM_OC3_SetConfig+0xfc>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d003      	beq.n	80079da <TIM_OC3_SetConfig+0x6a>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4a26      	ldr	r2, [pc, #152]	; (8007a70 <TIM_OC3_SetConfig+0x100>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d10d      	bne.n	80079f6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	021b      	lsls	r3, r3, #8
 80079e8:	697a      	ldr	r2, [r7, #20]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a1c      	ldr	r2, [pc, #112]	; (8007a6c <TIM_OC3_SetConfig+0xfc>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d00f      	beq.n	8007a1e <TIM_OC3_SetConfig+0xae>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a1b      	ldr	r2, [pc, #108]	; (8007a70 <TIM_OC3_SetConfig+0x100>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d00b      	beq.n	8007a1e <TIM_OC3_SetConfig+0xae>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a1a      	ldr	r2, [pc, #104]	; (8007a74 <TIM_OC3_SetConfig+0x104>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d007      	beq.n	8007a1e <TIM_OC3_SetConfig+0xae>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a19      	ldr	r2, [pc, #100]	; (8007a78 <TIM_OC3_SetConfig+0x108>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d003      	beq.n	8007a1e <TIM_OC3_SetConfig+0xae>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a18      	ldr	r2, [pc, #96]	; (8007a7c <TIM_OC3_SetConfig+0x10c>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d113      	bne.n	8007a46 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	695b      	ldr	r3, [r3, #20]
 8007a32:	011b      	lsls	r3, r3, #4
 8007a34:	693a      	ldr	r2, [r7, #16]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	699b      	ldr	r3, [r3, #24]
 8007a3e:	011b      	lsls	r3, r3, #4
 8007a40:	693a      	ldr	r2, [r7, #16]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	685a      	ldr	r2, [r3, #4]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	697a      	ldr	r2, [r7, #20]
 8007a5e:	621a      	str	r2, [r3, #32]
}
 8007a60:	bf00      	nop
 8007a62:	371c      	adds	r7, #28
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr
 8007a6c:	40012c00 	.word	0x40012c00
 8007a70:	40013400 	.word	0x40013400
 8007a74:	40014000 	.word	0x40014000
 8007a78:	40014400 	.word	0x40014400
 8007a7c:	40014800 	.word	0x40014800

08007a80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b087      	sub	sp, #28
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6a1b      	ldr	r3, [r3, #32]
 8007a8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	69db      	ldr	r3, [r3, #28]
 8007aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	021b      	lsls	r3, r3, #8
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ace:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	031b      	lsls	r3, r3, #12
 8007ad6:	693a      	ldr	r2, [r7, #16]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a18      	ldr	r2, [pc, #96]	; (8007b40 <TIM_OC4_SetConfig+0xc0>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d00f      	beq.n	8007b04 <TIM_OC4_SetConfig+0x84>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a17      	ldr	r2, [pc, #92]	; (8007b44 <TIM_OC4_SetConfig+0xc4>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d00b      	beq.n	8007b04 <TIM_OC4_SetConfig+0x84>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a16      	ldr	r2, [pc, #88]	; (8007b48 <TIM_OC4_SetConfig+0xc8>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d007      	beq.n	8007b04 <TIM_OC4_SetConfig+0x84>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a15      	ldr	r2, [pc, #84]	; (8007b4c <TIM_OC4_SetConfig+0xcc>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d003      	beq.n	8007b04 <TIM_OC4_SetConfig+0x84>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a14      	ldr	r2, [pc, #80]	; (8007b50 <TIM_OC4_SetConfig+0xd0>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d109      	bne.n	8007b18 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	695b      	ldr	r3, [r3, #20]
 8007b10:	019b      	lsls	r3, r3, #6
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	685a      	ldr	r2, [r3, #4]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	693a      	ldr	r2, [r7, #16]
 8007b30:	621a      	str	r2, [r3, #32]
}
 8007b32:	bf00      	nop
 8007b34:	371c      	adds	r7, #28
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	40012c00 	.word	0x40012c00
 8007b44:	40013400 	.word	0x40013400
 8007b48:	40014000 	.word	0x40014000
 8007b4c:	40014400 	.word	0x40014400
 8007b50:	40014800 	.word	0x40014800

08007b54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b087      	sub	sp, #28
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007b98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	041b      	lsls	r3, r3, #16
 8007ba0:	693a      	ldr	r2, [r7, #16]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a17      	ldr	r2, [pc, #92]	; (8007c08 <TIM_OC5_SetConfig+0xb4>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d00f      	beq.n	8007bce <TIM_OC5_SetConfig+0x7a>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a16      	ldr	r2, [pc, #88]	; (8007c0c <TIM_OC5_SetConfig+0xb8>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d00b      	beq.n	8007bce <TIM_OC5_SetConfig+0x7a>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a15      	ldr	r2, [pc, #84]	; (8007c10 <TIM_OC5_SetConfig+0xbc>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d007      	beq.n	8007bce <TIM_OC5_SetConfig+0x7a>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4a14      	ldr	r2, [pc, #80]	; (8007c14 <TIM_OC5_SetConfig+0xc0>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d003      	beq.n	8007bce <TIM_OC5_SetConfig+0x7a>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a13      	ldr	r2, [pc, #76]	; (8007c18 <TIM_OC5_SetConfig+0xc4>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d109      	bne.n	8007be2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bd4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	695b      	ldr	r3, [r3, #20]
 8007bda:	021b      	lsls	r3, r3, #8
 8007bdc:	697a      	ldr	r2, [r7, #20]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	68fa      	ldr	r2, [r7, #12]
 8007bec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	685a      	ldr	r2, [r3, #4]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	693a      	ldr	r2, [r7, #16]
 8007bfa:	621a      	str	r2, [r3, #32]
}
 8007bfc:	bf00      	nop
 8007bfe:	371c      	adds	r7, #28
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr
 8007c08:	40012c00 	.word	0x40012c00
 8007c0c:	40013400 	.word	0x40013400
 8007c10:	40014000 	.word	0x40014000
 8007c14:	40014400 	.word	0x40014400
 8007c18:	40014800 	.word	0x40014800

08007c1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b087      	sub	sp, #28
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a1b      	ldr	r3, [r3, #32]
 8007c2a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a1b      	ldr	r3, [r3, #32]
 8007c36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	021b      	lsls	r3, r3, #8
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	051b      	lsls	r3, r3, #20
 8007c6a:	693a      	ldr	r2, [r7, #16]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	4a18      	ldr	r2, [pc, #96]	; (8007cd4 <TIM_OC6_SetConfig+0xb8>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d00f      	beq.n	8007c98 <TIM_OC6_SetConfig+0x7c>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4a17      	ldr	r2, [pc, #92]	; (8007cd8 <TIM_OC6_SetConfig+0xbc>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d00b      	beq.n	8007c98 <TIM_OC6_SetConfig+0x7c>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	4a16      	ldr	r2, [pc, #88]	; (8007cdc <TIM_OC6_SetConfig+0xc0>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d007      	beq.n	8007c98 <TIM_OC6_SetConfig+0x7c>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a15      	ldr	r2, [pc, #84]	; (8007ce0 <TIM_OC6_SetConfig+0xc4>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d003      	beq.n	8007c98 <TIM_OC6_SetConfig+0x7c>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a14      	ldr	r2, [pc, #80]	; (8007ce4 <TIM_OC6_SetConfig+0xc8>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d109      	bne.n	8007cac <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	695b      	ldr	r3, [r3, #20]
 8007ca4:	029b      	lsls	r3, r3, #10
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	697a      	ldr	r2, [r7, #20]
 8007cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	685a      	ldr	r2, [r3, #4]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	693a      	ldr	r2, [r7, #16]
 8007cc4:	621a      	str	r2, [r3, #32]
}
 8007cc6:	bf00      	nop
 8007cc8:	371c      	adds	r7, #28
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	40012c00 	.word	0x40012c00
 8007cd8:	40013400 	.word	0x40013400
 8007cdc:	40014000 	.word	0x40014000
 8007ce0:	40014400 	.word	0x40014400
 8007ce4:	40014800 	.word	0x40014800

08007ce8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b087      	sub	sp, #28
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6a1b      	ldr	r3, [r3, #32]
 8007cf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6a1b      	ldr	r3, [r3, #32]
 8007cfe:	f023 0201 	bic.w	r2, r3, #1
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	699b      	ldr	r3, [r3, #24]
 8007d0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	011b      	lsls	r3, r3, #4
 8007d18:	693a      	ldr	r2, [r7, #16]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	f023 030a 	bic.w	r3, r3, #10
 8007d24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d26:	697a      	ldr	r2, [r7, #20]
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	693a      	ldr	r2, [r7, #16]
 8007d32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	697a      	ldr	r2, [r7, #20]
 8007d38:	621a      	str	r2, [r3, #32]
}
 8007d3a:	bf00      	nop
 8007d3c:	371c      	adds	r7, #28
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr

08007d46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d46:	b480      	push	{r7}
 8007d48:	b087      	sub	sp, #28
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	60f8      	str	r0, [r7, #12]
 8007d4e:	60b9      	str	r1, [r7, #8]
 8007d50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6a1b      	ldr	r3, [r3, #32]
 8007d56:	f023 0210 	bic.w	r2, r3, #16
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	699b      	ldr	r3, [r3, #24]
 8007d62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6a1b      	ldr	r3, [r3, #32]
 8007d68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	031b      	lsls	r3, r3, #12
 8007d76:	697a      	ldr	r2, [r7, #20]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	011b      	lsls	r3, r3, #4
 8007d88:	693a      	ldr	r2, [r7, #16]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	697a      	ldr	r2, [r7, #20]
 8007d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	693a      	ldr	r2, [r7, #16]
 8007d98:	621a      	str	r2, [r3, #32]
}
 8007d9a:	bf00      	nop
 8007d9c:	371c      	adds	r7, #28
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr

08007da6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007da6:	b480      	push	{r7}
 8007da8:	b085      	sub	sp, #20
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
 8007dae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007dbe:	683a      	ldr	r2, [r7, #0]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	f043 0307 	orr.w	r3, r3, #7
 8007dc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	609a      	str	r2, [r3, #8]
}
 8007dd0:	bf00      	nop
 8007dd2:	3714      	adds	r7, #20
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b087      	sub	sp, #28
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	607a      	str	r2, [r7, #4]
 8007de8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007df6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	021a      	lsls	r2, r3, #8
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	431a      	orrs	r2, r3
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	697a      	ldr	r2, [r7, #20]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	697a      	ldr	r2, [r7, #20]
 8007e0e:	609a      	str	r2, [r3, #8]
}
 8007e10:	bf00      	nop
 8007e12:	371c      	adds	r7, #28
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b087      	sub	sp, #28
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	f003 031f 	and.w	r3, r3, #31
 8007e2e:	2201      	movs	r2, #1
 8007e30:	fa02 f303 	lsl.w	r3, r2, r3
 8007e34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6a1a      	ldr	r2, [r3, #32]
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	43db      	mvns	r3, r3
 8007e3e:	401a      	ands	r2, r3
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6a1a      	ldr	r2, [r3, #32]
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	f003 031f 	and.w	r3, r3, #31
 8007e4e:	6879      	ldr	r1, [r7, #4]
 8007e50:	fa01 f303 	lsl.w	r3, r1, r3
 8007e54:	431a      	orrs	r2, r3
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	621a      	str	r2, [r3, #32]
}
 8007e5a:	bf00      	nop
 8007e5c:	371c      	adds	r7, #28
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr
	...

08007e68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d101      	bne.n	8007e80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e7c:	2302      	movs	r3, #2
 8007e7e:	e068      	b.n	8007f52 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a2e      	ldr	r2, [pc, #184]	; (8007f60 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d004      	beq.n	8007eb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a2d      	ldr	r2, [pc, #180]	; (8007f64 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d108      	bne.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007eba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ecc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a1e      	ldr	r2, [pc, #120]	; (8007f60 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d01d      	beq.n	8007f26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ef2:	d018      	beq.n	8007f26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a1b      	ldr	r2, [pc, #108]	; (8007f68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d013      	beq.n	8007f26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a1a      	ldr	r2, [pc, #104]	; (8007f6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d00e      	beq.n	8007f26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a18      	ldr	r2, [pc, #96]	; (8007f70 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d009      	beq.n	8007f26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a13      	ldr	r2, [pc, #76]	; (8007f64 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d004      	beq.n	8007f26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a14      	ldr	r2, [pc, #80]	; (8007f74 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d10c      	bne.n	8007f40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	68ba      	ldr	r2, [r7, #8]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3714      	adds	r7, #20
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	40012c00 	.word	0x40012c00
 8007f64:	40013400 	.word	0x40013400
 8007f68:	40000400 	.word	0x40000400
 8007f6c:	40000800 	.word	0x40000800
 8007f70:	40000c00 	.word	0x40000c00
 8007f74:	40014000 	.word	0x40014000

08007f78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f80:	bf00      	nop
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f94:	bf00      	nop
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007fa8:	bf00      	nop
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b08b      	sub	sp, #44	; 0x2c
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	fa93 f3a3 	rbit	r3, r3
 8007fce:	613b      	str	r3, [r7, #16]
  return result;
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d101      	bne.n	8007fde <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8007fda:	2320      	movs	r3, #32
 8007fdc:	e003      	b.n	8007fe6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	fab3 f383 	clz	r3, r3
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	005b      	lsls	r3, r3, #1
 8007fe8:	2103      	movs	r1, #3
 8007fea:	fa01 f303 	lsl.w	r3, r1, r3
 8007fee:	43db      	mvns	r3, r3
 8007ff0:	401a      	ands	r2, r3
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ff6:	6a3b      	ldr	r3, [r7, #32]
 8007ff8:	fa93 f3a3 	rbit	r3, r3
 8007ffc:	61fb      	str	r3, [r7, #28]
  return result;
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008004:	2b00      	cmp	r3, #0
 8008006:	d101      	bne.n	800800c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8008008:	2320      	movs	r3, #32
 800800a:	e003      	b.n	8008014 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800800c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800e:	fab3 f383 	clz	r3, r3
 8008012:	b2db      	uxtb	r3, r3
 8008014:	005b      	lsls	r3, r3, #1
 8008016:	6879      	ldr	r1, [r7, #4]
 8008018:	fa01 f303 	lsl.w	r3, r1, r3
 800801c:	431a      	orrs	r2, r3
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	601a      	str	r2, [r3, #0]
}
 8008022:	bf00      	nop
 8008024:	372c      	adds	r7, #44	; 0x2c
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr

0800802e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800802e:	b480      	push	{r7}
 8008030:	b085      	sub	sp, #20
 8008032:	af00      	add	r7, sp, #0
 8008034:	60f8      	str	r0, [r7, #12]
 8008036:	60b9      	str	r1, [r7, #8]
 8008038:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	685a      	ldr	r2, [r3, #4]
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	43db      	mvns	r3, r3
 8008042:	401a      	ands	r2, r3
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	6879      	ldr	r1, [r7, #4]
 8008048:	fb01 f303 	mul.w	r3, r1, r3
 800804c:	431a      	orrs	r2, r3
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	605a      	str	r2, [r3, #4]
}
 8008052:	bf00      	nop
 8008054:	3714      	adds	r7, #20
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800805e:	b480      	push	{r7}
 8008060:	b08b      	sub	sp, #44	; 0x2c
 8008062:	af00      	add	r7, sp, #0
 8008064:	60f8      	str	r0, [r7, #12]
 8008066:	60b9      	str	r1, [r7, #8]
 8008068:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	689a      	ldr	r2, [r3, #8]
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	fa93 f3a3 	rbit	r3, r3
 8008078:	613b      	str	r3, [r7, #16]
  return result;
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d101      	bne.n	8008088 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8008084:	2320      	movs	r3, #32
 8008086:	e003      	b.n	8008090 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	fab3 f383 	clz	r3, r3
 800808e:	b2db      	uxtb	r3, r3
 8008090:	005b      	lsls	r3, r3, #1
 8008092:	2103      	movs	r1, #3
 8008094:	fa01 f303 	lsl.w	r3, r1, r3
 8008098:	43db      	mvns	r3, r3
 800809a:	401a      	ands	r2, r3
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080a0:	6a3b      	ldr	r3, [r7, #32]
 80080a2:	fa93 f3a3 	rbit	r3, r3
 80080a6:	61fb      	str	r3, [r7, #28]
  return result;
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80080ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d101      	bne.n	80080b6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80080b2:	2320      	movs	r3, #32
 80080b4:	e003      	b.n	80080be <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80080b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b8:	fab3 f383 	clz	r3, r3
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	005b      	lsls	r3, r3, #1
 80080c0:	6879      	ldr	r1, [r7, #4]
 80080c2:	fa01 f303 	lsl.w	r3, r1, r3
 80080c6:	431a      	orrs	r2, r3
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80080cc:	bf00      	nop
 80080ce:	372c      	adds	r7, #44	; 0x2c
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80080d8:	b480      	push	{r7}
 80080da:	b08b      	sub	sp, #44	; 0x2c
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	68da      	ldr	r2, [r3, #12]
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	fa93 f3a3 	rbit	r3, r3
 80080f2:	613b      	str	r3, [r7, #16]
  return result;
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d101      	bne.n	8008102 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80080fe:	2320      	movs	r3, #32
 8008100:	e003      	b.n	800810a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	fab3 f383 	clz	r3, r3
 8008108:	b2db      	uxtb	r3, r3
 800810a:	005b      	lsls	r3, r3, #1
 800810c:	2103      	movs	r1, #3
 800810e:	fa01 f303 	lsl.w	r3, r1, r3
 8008112:	43db      	mvns	r3, r3
 8008114:	401a      	ands	r2, r3
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800811a:	6a3b      	ldr	r3, [r7, #32]
 800811c:	fa93 f3a3 	rbit	r3, r3
 8008120:	61fb      	str	r3, [r7, #28]
  return result;
 8008122:	69fb      	ldr	r3, [r7, #28]
 8008124:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008128:	2b00      	cmp	r3, #0
 800812a:	d101      	bne.n	8008130 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800812c:	2320      	movs	r3, #32
 800812e:	e003      	b.n	8008138 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8008130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008132:	fab3 f383 	clz	r3, r3
 8008136:	b2db      	uxtb	r3, r3
 8008138:	005b      	lsls	r3, r3, #1
 800813a:	6879      	ldr	r1, [r7, #4]
 800813c:	fa01 f303 	lsl.w	r3, r1, r3
 8008140:	431a      	orrs	r2, r3
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	60da      	str	r2, [r3, #12]
}
 8008146:	bf00      	nop
 8008148:	372c      	adds	r7, #44	; 0x2c
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr

08008152 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008152:	b480      	push	{r7}
 8008154:	b08b      	sub	sp, #44	; 0x2c
 8008156:	af00      	add	r7, sp, #0
 8008158:	60f8      	str	r0, [r7, #12]
 800815a:	60b9      	str	r1, [r7, #8]
 800815c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6a1a      	ldr	r2, [r3, #32]
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	fa93 f3a3 	rbit	r3, r3
 800816c:	613b      	str	r3, [r7, #16]
  return result;
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d101      	bne.n	800817c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8008178:	2320      	movs	r3, #32
 800817a:	e003      	b.n	8008184 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	fab3 f383 	clz	r3, r3
 8008182:	b2db      	uxtb	r3, r3
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	210f      	movs	r1, #15
 8008188:	fa01 f303 	lsl.w	r3, r1, r3
 800818c:	43db      	mvns	r3, r3
 800818e:	401a      	ands	r2, r3
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008194:	6a3b      	ldr	r3, [r7, #32]
 8008196:	fa93 f3a3 	rbit	r3, r3
 800819a:	61fb      	str	r3, [r7, #28]
  return result;
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80081a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d101      	bne.n	80081aa <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80081a6:	2320      	movs	r3, #32
 80081a8:	e003      	b.n	80081b2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80081aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ac:	fab3 f383 	clz	r3, r3
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	6879      	ldr	r1, [r7, #4]
 80081b6:	fa01 f303 	lsl.w	r3, r1, r3
 80081ba:	431a      	orrs	r2, r3
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80081c0:	bf00      	nop
 80081c2:	372c      	adds	r7, #44	; 0x2c
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b08b      	sub	sp, #44	; 0x2c
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	0a1b      	lsrs	r3, r3, #8
 80081e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	fa93 f3a3 	rbit	r3, r3
 80081e8:	613b      	str	r3, [r7, #16]
  return result;
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d101      	bne.n	80081f8 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80081f4:	2320      	movs	r3, #32
 80081f6:	e003      	b.n	8008200 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	fab3 f383 	clz	r3, r3
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	210f      	movs	r1, #15
 8008204:	fa01 f303 	lsl.w	r3, r1, r3
 8008208:	43db      	mvns	r3, r3
 800820a:	401a      	ands	r2, r3
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	0a1b      	lsrs	r3, r3, #8
 8008210:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008212:	6a3b      	ldr	r3, [r7, #32]
 8008214:	fa93 f3a3 	rbit	r3, r3
 8008218:	61fb      	str	r3, [r7, #28]
  return result;
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800821e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008220:	2b00      	cmp	r3, #0
 8008222:	d101      	bne.n	8008228 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8008224:	2320      	movs	r3, #32
 8008226:	e003      	b.n	8008230 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8008228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822a:	fab3 f383 	clz	r3, r3
 800822e:	b2db      	uxtb	r3, r3
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	6879      	ldr	r1, [r7, #4]
 8008234:	fa01 f303 	lsl.w	r3, r1, r3
 8008238:	431a      	orrs	r2, r3
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800823e:	bf00      	nop
 8008240:	372c      	adds	r7, #44	; 0x2c
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr

0800824a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b088      	sub	sp, #32
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	fa93 f3a3 	rbit	r3, r3
 8008260:	60fb      	str	r3, [r7, #12]
  return result;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d101      	bne.n	8008270 <LL_GPIO_Init+0x26>
    return 32U;
 800826c:	2320      	movs	r3, #32
 800826e:	e003      	b.n	8008278 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	fab3 f383 	clz	r3, r3
 8008276:	b2db      	uxtb	r3, r3
 8008278:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800827a:	e048      	b.n	800830e <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	2101      	movs	r1, #1
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	fa01 f303 	lsl.w	r3, r1, r3
 8008288:	4013      	ands	r3, r2
 800828a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800828c:	69bb      	ldr	r3, [r7, #24]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d03a      	beq.n	8008308 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	2b01      	cmp	r3, #1
 8008298:	d003      	beq.n	80082a2 <LL_GPIO_Init+0x58>
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	2b02      	cmp	r3, #2
 80082a0:	d10e      	bne.n	80082c0 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	461a      	mov	r2, r3
 80082a8:	69b9      	ldr	r1, [r7, #24]
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f7ff fed7 	bl	800805e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	6819      	ldr	r1, [r3, #0]
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	461a      	mov	r2, r3
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f7ff feb7 	bl	800802e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	461a      	mov	r2, r3
 80082c6:	69b9      	ldr	r1, [r7, #24]
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f7ff ff05 	bl	80080d8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	2b02      	cmp	r3, #2
 80082d4:	d111      	bne.n	80082fa <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80082d6:	69bb      	ldr	r3, [r7, #24]
 80082d8:	2bff      	cmp	r3, #255	; 0xff
 80082da:	d807      	bhi.n	80082ec <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	695b      	ldr	r3, [r3, #20]
 80082e0:	461a      	mov	r2, r3
 80082e2:	69b9      	ldr	r1, [r7, #24]
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f7ff ff34 	bl	8008152 <LL_GPIO_SetAFPin_0_7>
 80082ea:	e006      	b.n	80082fa <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	695b      	ldr	r3, [r3, #20]
 80082f0:	461a      	mov	r2, r3
 80082f2:	69b9      	ldr	r1, [r7, #24]
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f7ff ff69 	bl	80081cc <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	461a      	mov	r2, r3
 8008300:	69b9      	ldr	r1, [r7, #24]
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f7ff fe56 	bl	8007fb4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	3301      	adds	r3, #1
 800830c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	fa22 f303 	lsr.w	r3, r2, r3
 8008318:	2b00      	cmp	r3, #0
 800831a:	d1af      	bne.n	800827c <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	3720      	adds	r7, #32
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
	...

08008328 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8008328:	b480      	push	{r7}
 800832a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800832c:	4b07      	ldr	r3, [pc, #28]	; (800834c <LL_RCC_HSI_IsReady+0x24>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008338:	d101      	bne.n	800833e <LL_RCC_HSI_IsReady+0x16>
 800833a:	2301      	movs	r3, #1
 800833c:	e000      	b.n	8008340 <LL_RCC_HSI_IsReady+0x18>
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	40021000 	.word	0x40021000

08008350 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8008350:	b480      	push	{r7}
 8008352:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8008354:	4b07      	ldr	r3, [pc, #28]	; (8008374 <LL_RCC_LSE_IsReady+0x24>)
 8008356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800835a:	f003 0302 	and.w	r3, r3, #2
 800835e:	2b02      	cmp	r3, #2
 8008360:	d101      	bne.n	8008366 <LL_RCC_LSE_IsReady+0x16>
 8008362:	2301      	movs	r3, #1
 8008364:	e000      	b.n	8008368 <LL_RCC_LSE_IsReady+0x18>
 8008366:	2300      	movs	r3, #0
}
 8008368:	4618      	mov	r0, r3
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	40021000 	.word	0x40021000

08008378 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8008378:	b480      	push	{r7}
 800837a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 800837c:	4b06      	ldr	r3, [pc, #24]	; (8008398 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 0308 	and.w	r3, r3, #8
 8008384:	2b08      	cmp	r3, #8
 8008386:	d101      	bne.n	800838c <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8008388:	2301      	movs	r3, #1
 800838a:	e000      	b.n	800838e <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr
 8008398:	40021000 	.word	0x40021000

0800839c <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800839c:	b480      	push	{r7}
 800839e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80083a0:	4b04      	ldr	r3, [pc, #16]	; (80083b4 <LL_RCC_MSI_GetRange+0x18>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	40021000 	.word	0x40021000

080083b8 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80083b8:	b480      	push	{r7}
 80083ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80083bc:	4b04      	ldr	r3, [pc, #16]	; (80083d0 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 80083be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083c2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr
 80083d0:	40021000 	.word	0x40021000

080083d4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80083d4:	b480      	push	{r7}
 80083d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80083d8:	4b04      	ldr	r3, [pc, #16]	; (80083ec <LL_RCC_GetSysClkSource+0x18>)
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	f003 030c 	and.w	r3, r3, #12
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop
 80083ec:	40021000 	.word	0x40021000

080083f0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80083f0:	b480      	push	{r7}
 80083f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80083f4:	4b04      	ldr	r3, [pc, #16]	; (8008408 <LL_RCC_GetAHBPrescaler+0x18>)
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr
 8008406:	bf00      	nop
 8008408:	40021000 	.word	0x40021000

0800840c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800840c:	b480      	push	{r7}
 800840e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8008410:	4b04      	ldr	r3, [pc, #16]	; (8008424 <LL_RCC_GetAPB1Prescaler+0x18>)
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8008418:	4618      	mov	r0, r3
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop
 8008424:	40021000 	.word	0x40021000

08008428 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8008428:	b480      	push	{r7}
 800842a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800842c:	4b04      	ldr	r3, [pc, #16]	; (8008440 <LL_RCC_GetAPB2Prescaler+0x18>)
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8008434:	4618      	mov	r0, r3
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	40021000 	.word	0x40021000

08008444 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800844c:	4b06      	ldr	r3, [pc, #24]	; (8008468 <LL_RCC_GetUSARTClockSource+0x24>)
 800844e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	401a      	ands	r2, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	041b      	lsls	r3, r3, #16
 800845a:	4313      	orrs	r3, r2
}
 800845c:	4618      	mov	r0, r3
 800845e:	370c      	adds	r7, #12
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr
 8008468:	40021000 	.word	0x40021000

0800846c <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8008474:	4b06      	ldr	r3, [pc, #24]	; (8008490 <LL_RCC_GetUARTClockSource+0x24>)
 8008476:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	401a      	ands	r2, r3
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	041b      	lsls	r3, r3, #16
 8008482:	4313      	orrs	r3, r2
}
 8008484:	4618      	mov	r0, r3
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr
 8008490:	40021000 	.word	0x40021000

08008494 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8008494:	b480      	push	{r7}
 8008496:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8008498:	4b04      	ldr	r3, [pc, #16]	; (80084ac <LL_RCC_PLL_GetMainSource+0x18>)
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	f003 0303 	and.w	r3, r3, #3
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop
 80084ac:	40021000 	.word	0x40021000

080084b0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80084b0:	b480      	push	{r7}
 80084b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80084b4:	4b04      	ldr	r3, [pc, #16]	; (80084c8 <LL_RCC_PLL_GetN+0x18>)
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	0a1b      	lsrs	r3, r3, #8
 80084ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80084be:	4618      	mov	r0, r3
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr
 80084c8:	40021000 	.word	0x40021000

080084cc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80084cc:	b480      	push	{r7}
 80084ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80084d0:	4b04      	ldr	r3, [pc, #16]	; (80084e4 <LL_RCC_PLL_GetR+0x18>)
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 80084d8:	4618      	mov	r0, r3
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop
 80084e4:	40021000 	.word	0x40021000

080084e8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80084e8:	b480      	push	{r7}
 80084ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80084ec:	4b04      	ldr	r3, [pc, #16]	; (8008500 <LL_RCC_PLL_GetDivider+0x18>)
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr
 80084fe:	bf00      	nop
 8008500:	40021000 	.word	0x40021000

08008504 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800850c:	2300      	movs	r3, #0
 800850e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2b03      	cmp	r3, #3
 8008514:	d137      	bne.n	8008586 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f7ff ff94 	bl	8008444 <LL_RCC_GetUSARTClockSource>
 800851c:	4603      	mov	r3, r0
 800851e:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8008522:	2b03      	cmp	r3, #3
 8008524:	f200 80b3 	bhi.w	800868e <LL_RCC_GetUSARTClockFreq+0x18a>
 8008528:	a201      	add	r2, pc, #4	; (adr r2, 8008530 <LL_RCC_GetUSARTClockFreq+0x2c>)
 800852a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800852e:	bf00      	nop
 8008530:	0800856f 	.word	0x0800856f
 8008534:	08008541 	.word	0x08008541
 8008538:	08008549 	.word	0x08008549
 800853c:	0800855b 	.word	0x0800855b
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8008540:	f000 f95c 	bl	80087fc <RCC_GetSystemClockFreq>
 8008544:	60f8      	str	r0, [r7, #12]
        break;
 8008546:	e0b5      	b.n	80086b4 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8008548:	f7ff feee 	bl	8008328 <LL_RCC_HSI_IsReady>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	f000 809f 	beq.w	8008692 <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 8008554:	4b5a      	ldr	r3, [pc, #360]	; (80086c0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8008556:	60fb      	str	r3, [r7, #12]
        }
        break;
 8008558:	e09b      	b.n	8008692 <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800855a:	f7ff fef9 	bl	8008350 <LL_RCC_LSE_IsReady>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	f000 8098 	beq.w	8008696 <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 8008566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800856a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800856c:	e093      	b.n	8008696 <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800856e:	f000 f945 	bl	80087fc <RCC_GetSystemClockFreq>
 8008572:	4603      	mov	r3, r0
 8008574:	4618      	mov	r0, r3
 8008576:	f000 f9d1 	bl	800891c <RCC_GetHCLKClockFreq>
 800857a:	4603      	mov	r3, r0
 800857c:	4618      	mov	r0, r3
 800857e:	f000 f9f7 	bl	8008970 <RCC_GetPCLK2ClockFreq>
 8008582:	60f8      	str	r0, [r7, #12]
        break;
 8008584:	e096      	b.n	80086b4 <LL_RCC_GetUSARTClockFreq+0x1b0>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2b0c      	cmp	r3, #12
 800858a:	d146      	bne.n	800861a <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f7ff ff59 	bl	8008444 <LL_RCC_GetUSARTClockSource>
 8008592:	4603      	mov	r3, r0
 8008594:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8008598:	2b0c      	cmp	r3, #12
 800859a:	d87e      	bhi.n	800869a <LL_RCC_GetUSARTClockFreq+0x196>
 800859c:	a201      	add	r2, pc, #4	; (adr r2, 80085a4 <LL_RCC_GetUSARTClockFreq+0xa0>)
 800859e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a2:	bf00      	nop
 80085a4:	08008603 	.word	0x08008603
 80085a8:	0800869b 	.word	0x0800869b
 80085ac:	0800869b 	.word	0x0800869b
 80085b0:	0800869b 	.word	0x0800869b
 80085b4:	080085d9 	.word	0x080085d9
 80085b8:	0800869b 	.word	0x0800869b
 80085bc:	0800869b 	.word	0x0800869b
 80085c0:	0800869b 	.word	0x0800869b
 80085c4:	080085e1 	.word	0x080085e1
 80085c8:	0800869b 	.word	0x0800869b
 80085cc:	0800869b 	.word	0x0800869b
 80085d0:	0800869b 	.word	0x0800869b
 80085d4:	080085f1 	.word	0x080085f1
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80085d8:	f000 f910 	bl	80087fc <RCC_GetSystemClockFreq>
 80085dc:	60f8      	str	r0, [r7, #12]
        break;
 80085de:	e069      	b.n	80086b4 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80085e0:	f7ff fea2 	bl	8008328 <LL_RCC_HSI_IsReady>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d059      	beq.n	800869e <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 80085ea:	4b35      	ldr	r3, [pc, #212]	; (80086c0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80085ec:	60fb      	str	r3, [r7, #12]
        }
        break;
 80085ee:	e056      	b.n	800869e <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80085f0:	f7ff feae 	bl	8008350 <LL_RCC_LSE_IsReady>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d053      	beq.n	80086a2 <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 80085fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085fe:	60fb      	str	r3, [r7, #12]
        }
        break;
 8008600:	e04f      	b.n	80086a2 <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8008602:	f000 f8fb 	bl	80087fc <RCC_GetSystemClockFreq>
 8008606:	4603      	mov	r3, r0
 8008608:	4618      	mov	r0, r3
 800860a:	f000 f987 	bl	800891c <RCC_GetHCLKClockFreq>
 800860e:	4603      	mov	r3, r0
 8008610:	4618      	mov	r0, r3
 8008612:	f000 f999 	bl	8008948 <RCC_GetPCLK1ClockFreq>
 8008616:	60f8      	str	r0, [r7, #12]
        break;
 8008618:	e04c      	b.n	80086b4 <LL_RCC_GetUSARTClockFreq+0x1b0>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2b30      	cmp	r3, #48	; 0x30
 800861e:	d142      	bne.n	80086a6 <LL_RCC_GetUSARTClockFreq+0x1a2>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f7ff ff0f 	bl	8008444 <LL_RCC_GetUSARTClockSource>
 8008626:	4603      	mov	r3, r0
 8008628:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 800862c:	d01a      	beq.n	8008664 <LL_RCC_GetUSARTClockFreq+0x160>
 800862e:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8008632:	d83a      	bhi.n	80086aa <LL_RCC_GetUSARTClockFreq+0x1a6>
 8008634:	4a23      	ldr	r2, [pc, #140]	; (80086c4 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d00c      	beq.n	8008654 <LL_RCC_GetUSARTClockFreq+0x150>
 800863a:	4a22      	ldr	r2, [pc, #136]	; (80086c4 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d834      	bhi.n	80086aa <LL_RCC_GetUSARTClockFreq+0x1a6>
 8008640:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008644:	d017      	beq.n	8008676 <LL_RCC_GetUSARTClockFreq+0x172>
 8008646:	4a20      	ldr	r2, [pc, #128]	; (80086c8 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d12e      	bne.n	80086aa <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 800864c:	f000 f8d6 	bl	80087fc <RCC_GetSystemClockFreq>
 8008650:	60f8      	str	r0, [r7, #12]
          break;
 8008652:	e02f      	b.n	80086b4 <LL_RCC_GetUSARTClockFreq+0x1b0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8008654:	f7ff fe68 	bl	8008328 <LL_RCC_HSI_IsReady>
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d027      	beq.n	80086ae <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = HSI_VALUE;
 800865e:	4b18      	ldr	r3, [pc, #96]	; (80086c0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8008660:	60fb      	str	r3, [r7, #12]
          }
          break;
 8008662:	e024      	b.n	80086ae <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8008664:	f7ff fe74 	bl	8008350 <LL_RCC_LSE_IsReady>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d021      	beq.n	80086b2 <LL_RCC_GetUSARTClockFreq+0x1ae>
          {
            usart_frequency = LSE_VALUE;
 800866e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008672:	60fb      	str	r3, [r7, #12]
          }
          break;
 8008674:	e01d      	b.n	80086b2 <LL_RCC_GetUSARTClockFreq+0x1ae>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8008676:	f000 f8c1 	bl	80087fc <RCC_GetSystemClockFreq>
 800867a:	4603      	mov	r3, r0
 800867c:	4618      	mov	r0, r3
 800867e:	f000 f94d 	bl	800891c <RCC_GetHCLKClockFreq>
 8008682:	4603      	mov	r3, r0
 8008684:	4618      	mov	r0, r3
 8008686:	f000 f95f 	bl	8008948 <RCC_GetPCLK1ClockFreq>
 800868a:	60f8      	str	r0, [r7, #12]
          break;
 800868c:	e012      	b.n	80086b4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 800868e:	bf00      	nop
 8008690:	e010      	b.n	80086b4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8008692:	bf00      	nop
 8008694:	e00e      	b.n	80086b4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8008696:	bf00      	nop
 8008698:	e00c      	b.n	80086b4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 800869a:	bf00      	nop
 800869c:	e00a      	b.n	80086b4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 800869e:	bf00      	nop
 80086a0:	e008      	b.n	80086b4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80086a2:	bf00      	nop
 80086a4:	e006      	b.n	80086b4 <LL_RCC_GetUSARTClockFreq+0x1b0>

        default:
          break;
      }
    }
 80086a6:	bf00      	nop
 80086a8:	e004      	b.n	80086b4 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 80086aa:	bf00      	nop
 80086ac:	e002      	b.n	80086b4 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 80086ae:	bf00      	nop
 80086b0:	e000      	b.n	80086b4 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 80086b2:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 80086b4:	68fb      	ldr	r3, [r7, #12]
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3710      	adds	r7, #16
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	00f42400 	.word	0x00f42400
 80086c4:	00300020 	.word	0x00300020
 80086c8:	00300010 	.word	0x00300010

080086cc <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80086d4:	2300      	movs	r3, #0
 80086d6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2bc0      	cmp	r3, #192	; 0xc0
 80086dc:	d136      	bne.n	800874c <LL_RCC_GetUARTClockFreq+0x80>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f7ff fec4 	bl	800846c <LL_RCC_GetUARTClockSource>
 80086e4:	4603      	mov	r3, r0
 80086e6:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80086ea:	d01a      	beq.n	8008722 <LL_RCC_GetUARTClockFreq+0x56>
 80086ec:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80086f0:	d82e      	bhi.n	8008750 <LL_RCC_GetUARTClockFreq+0x84>
 80086f2:	4a3d      	ldr	r2, [pc, #244]	; (80087e8 <LL_RCC_GetUARTClockFreq+0x11c>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d00c      	beq.n	8008712 <LL_RCC_GetUARTClockFreq+0x46>
 80086f8:	4a3b      	ldr	r2, [pc, #236]	; (80087e8 <LL_RCC_GetUARTClockFreq+0x11c>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d828      	bhi.n	8008750 <LL_RCC_GetUARTClockFreq+0x84>
 80086fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008702:	d017      	beq.n	8008734 <LL_RCC_GetUARTClockFreq+0x68>
 8008704:	4a39      	ldr	r2, [pc, #228]	; (80087ec <LL_RCC_GetUARTClockFreq+0x120>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d122      	bne.n	8008750 <LL_RCC_GetUARTClockFreq+0x84>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800870a:	f000 f877 	bl	80087fc <RCC_GetSystemClockFreq>
 800870e:	60f8      	str	r0, [r7, #12]
        break;
 8008710:	e023      	b.n	800875a <LL_RCC_GetUARTClockFreq+0x8e>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8008712:	f7ff fe09 	bl	8008328 <LL_RCC_HSI_IsReady>
 8008716:	4603      	mov	r3, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d01b      	beq.n	8008754 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = HSI_VALUE;
 800871c:	4b34      	ldr	r3, [pc, #208]	; (80087f0 <LL_RCC_GetUARTClockFreq+0x124>)
 800871e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8008720:	e018      	b.n	8008754 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8008722:	f7ff fe15 	bl	8008350 <LL_RCC_LSE_IsReady>
 8008726:	4603      	mov	r3, r0
 8008728:	2b00      	cmp	r3, #0
 800872a:	d015      	beq.n	8008758 <LL_RCC_GetUARTClockFreq+0x8c>
        {
          uart_frequency = LSE_VALUE;
 800872c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008730:	60fb      	str	r3, [r7, #12]
        }
        break;
 8008732:	e011      	b.n	8008758 <LL_RCC_GetUARTClockFreq+0x8c>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8008734:	f000 f862 	bl	80087fc <RCC_GetSystemClockFreq>
 8008738:	4603      	mov	r3, r0
 800873a:	4618      	mov	r0, r3
 800873c:	f000 f8ee 	bl	800891c <RCC_GetHCLKClockFreq>
 8008740:	4603      	mov	r3, r0
 8008742:	4618      	mov	r0, r3
 8008744:	f000 f900 	bl	8008948 <RCC_GetPCLK1ClockFreq>
 8008748:	60f8      	str	r0, [r7, #12]
        break;
 800874a:	e006      	b.n	800875a <LL_RCC_GetUARTClockFreq+0x8e>

      default:
        break;
    }
  }
 800874c:	bf00      	nop
 800874e:	e004      	b.n	800875a <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8008750:	bf00      	nop
 8008752:	e002      	b.n	800875a <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8008754:	bf00      	nop
 8008756:	e000      	b.n	800875a <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8008758:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008760:	d136      	bne.n	80087d0 <LL_RCC_GetUARTClockFreq+0x104>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f7ff fe82 	bl	800846c <LL_RCC_GetUARTClockSource>
 8008768:	4603      	mov	r3, r0
 800876a:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 800876e:	d01a      	beq.n	80087a6 <LL_RCC_GetUARTClockFreq+0xda>
 8008770:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8008774:	d82e      	bhi.n	80087d4 <LL_RCC_GetUARTClockFreq+0x108>
 8008776:	4a1f      	ldr	r2, [pc, #124]	; (80087f4 <LL_RCC_GetUARTClockFreq+0x128>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d00c      	beq.n	8008796 <LL_RCC_GetUARTClockFreq+0xca>
 800877c:	4a1d      	ldr	r2, [pc, #116]	; (80087f4 <LL_RCC_GetUARTClockFreq+0x128>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d828      	bhi.n	80087d4 <LL_RCC_GetUARTClockFreq+0x108>
 8008782:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008786:	d017      	beq.n	80087b8 <LL_RCC_GetUARTClockFreq+0xec>
 8008788:	4a1b      	ldr	r2, [pc, #108]	; (80087f8 <LL_RCC_GetUARTClockFreq+0x12c>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d122      	bne.n	80087d4 <LL_RCC_GetUARTClockFreq+0x108>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800878e:	f000 f835 	bl	80087fc <RCC_GetSystemClockFreq>
 8008792:	60f8      	str	r0, [r7, #12]
        break;
 8008794:	e023      	b.n	80087de <LL_RCC_GetUARTClockFreq+0x112>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8008796:	f7ff fdc7 	bl	8008328 <LL_RCC_HSI_IsReady>
 800879a:	4603      	mov	r3, r0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d01b      	beq.n	80087d8 <LL_RCC_GetUARTClockFreq+0x10c>
        {
          uart_frequency = HSI_VALUE;
 80087a0:	4b13      	ldr	r3, [pc, #76]	; (80087f0 <LL_RCC_GetUARTClockFreq+0x124>)
 80087a2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80087a4:	e018      	b.n	80087d8 <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80087a6:	f7ff fdd3 	bl	8008350 <LL_RCC_LSE_IsReady>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d015      	beq.n	80087dc <LL_RCC_GetUARTClockFreq+0x110>
        {
          uart_frequency = LSE_VALUE;
 80087b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087b4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80087b6:	e011      	b.n	80087dc <LL_RCC_GetUARTClockFreq+0x110>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80087b8:	f000 f820 	bl	80087fc <RCC_GetSystemClockFreq>
 80087bc:	4603      	mov	r3, r0
 80087be:	4618      	mov	r0, r3
 80087c0:	f000 f8ac 	bl	800891c <RCC_GetHCLKClockFreq>
 80087c4:	4603      	mov	r3, r0
 80087c6:	4618      	mov	r0, r3
 80087c8:	f000 f8be 	bl	8008948 <RCC_GetPCLK1ClockFreq>
 80087cc:	60f8      	str	r0, [r7, #12]
        break;
 80087ce:	e006      	b.n	80087de <LL_RCC_GetUARTClockFreq+0x112>

      default:
        break;
    }
  }
 80087d0:	bf00      	nop
 80087d2:	e004      	b.n	80087de <LL_RCC_GetUARTClockFreq+0x112>
        break;
 80087d4:	bf00      	nop
 80087d6:	e002      	b.n	80087de <LL_RCC_GetUARTClockFreq+0x112>
        break;
 80087d8:	bf00      	nop
 80087da:	e000      	b.n	80087de <LL_RCC_GetUARTClockFreq+0x112>
        break;
 80087dc:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 80087de:	68fb      	ldr	r3, [r7, #12]
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	00c00080 	.word	0x00c00080
 80087ec:	00c00040 	.word	0x00c00040
 80087f0:	00f42400 	.word	0x00f42400
 80087f4:	03000200 	.word	0x03000200
 80087f8:	03000100 	.word	0x03000100

080087fc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8008802:	f7ff fde7 	bl	80083d4 <LL_RCC_GetSysClkSource>
 8008806:	4603      	mov	r3, r0
 8008808:	2b0c      	cmp	r3, #12
 800880a:	d851      	bhi.n	80088b0 <RCC_GetSystemClockFreq+0xb4>
 800880c:	a201      	add	r2, pc, #4	; (adr r2, 8008814 <RCC_GetSystemClockFreq+0x18>)
 800880e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008812:	bf00      	nop
 8008814:	08008849 	.word	0x08008849
 8008818:	080088b1 	.word	0x080088b1
 800881c:	080088b1 	.word	0x080088b1
 8008820:	080088b1 	.word	0x080088b1
 8008824:	0800889d 	.word	0x0800889d
 8008828:	080088b1 	.word	0x080088b1
 800882c:	080088b1 	.word	0x080088b1
 8008830:	080088b1 	.word	0x080088b1
 8008834:	080088a3 	.word	0x080088a3
 8008838:	080088b1 	.word	0x080088b1
 800883c:	080088b1 	.word	0x080088b1
 8008840:	080088b1 	.word	0x080088b1
 8008844:	080088a9 	.word	0x080088a9
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8008848:	f7ff fd96 	bl	8008378 <LL_RCC_MSI_IsEnabledRangeSelect>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d111      	bne.n	8008876 <RCC_GetSystemClockFreq+0x7a>
 8008852:	f7ff fd91 	bl	8008378 <LL_RCC_MSI_IsEnabledRangeSelect>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d004      	beq.n	8008866 <RCC_GetSystemClockFreq+0x6a>
 800885c:	f7ff fd9e 	bl	800839c <LL_RCC_MSI_GetRange>
 8008860:	4603      	mov	r3, r0
 8008862:	0a1b      	lsrs	r3, r3, #8
 8008864:	e003      	b.n	800886e <RCC_GetSystemClockFreq+0x72>
 8008866:	f7ff fda7 	bl	80083b8 <LL_RCC_MSI_GetRangeAfterStandby>
 800886a:	4603      	mov	r3, r0
 800886c:	0a1b      	lsrs	r3, r3, #8
 800886e:	4a28      	ldr	r2, [pc, #160]	; (8008910 <RCC_GetSystemClockFreq+0x114>)
 8008870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008874:	e010      	b.n	8008898 <RCC_GetSystemClockFreq+0x9c>
 8008876:	f7ff fd7f 	bl	8008378 <LL_RCC_MSI_IsEnabledRangeSelect>
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d004      	beq.n	800888a <RCC_GetSystemClockFreq+0x8e>
 8008880:	f7ff fd8c 	bl	800839c <LL_RCC_MSI_GetRange>
 8008884:	4603      	mov	r3, r0
 8008886:	091b      	lsrs	r3, r3, #4
 8008888:	e003      	b.n	8008892 <RCC_GetSystemClockFreq+0x96>
 800888a:	f7ff fd95 	bl	80083b8 <LL_RCC_MSI_GetRangeAfterStandby>
 800888e:	4603      	mov	r3, r0
 8008890:	091b      	lsrs	r3, r3, #4
 8008892:	4a1f      	ldr	r2, [pc, #124]	; (8008910 <RCC_GetSystemClockFreq+0x114>)
 8008894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008898:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800889a:	e033      	b.n	8008904 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800889c:	4b1d      	ldr	r3, [pc, #116]	; (8008914 <RCC_GetSystemClockFreq+0x118>)
 800889e:	607b      	str	r3, [r7, #4]
      break;
 80088a0:	e030      	b.n	8008904 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80088a2:	4b1d      	ldr	r3, [pc, #116]	; (8008918 <RCC_GetSystemClockFreq+0x11c>)
 80088a4:	607b      	str	r3, [r7, #4]
      break;
 80088a6:	e02d      	b.n	8008904 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80088a8:	f000 f876 	bl	8008998 <RCC_PLL_GetFreqDomain_SYS>
 80088ac:	6078      	str	r0, [r7, #4]
      break;
 80088ae:	e029      	b.n	8008904 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80088b0:	f7ff fd62 	bl	8008378 <LL_RCC_MSI_IsEnabledRangeSelect>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d111      	bne.n	80088de <RCC_GetSystemClockFreq+0xe2>
 80088ba:	f7ff fd5d 	bl	8008378 <LL_RCC_MSI_IsEnabledRangeSelect>
 80088be:	4603      	mov	r3, r0
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d004      	beq.n	80088ce <RCC_GetSystemClockFreq+0xd2>
 80088c4:	f7ff fd6a 	bl	800839c <LL_RCC_MSI_GetRange>
 80088c8:	4603      	mov	r3, r0
 80088ca:	0a1b      	lsrs	r3, r3, #8
 80088cc:	e003      	b.n	80088d6 <RCC_GetSystemClockFreq+0xda>
 80088ce:	f7ff fd73 	bl	80083b8 <LL_RCC_MSI_GetRangeAfterStandby>
 80088d2:	4603      	mov	r3, r0
 80088d4:	0a1b      	lsrs	r3, r3, #8
 80088d6:	4a0e      	ldr	r2, [pc, #56]	; (8008910 <RCC_GetSystemClockFreq+0x114>)
 80088d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088dc:	e010      	b.n	8008900 <RCC_GetSystemClockFreq+0x104>
 80088de:	f7ff fd4b 	bl	8008378 <LL_RCC_MSI_IsEnabledRangeSelect>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d004      	beq.n	80088f2 <RCC_GetSystemClockFreq+0xf6>
 80088e8:	f7ff fd58 	bl	800839c <LL_RCC_MSI_GetRange>
 80088ec:	4603      	mov	r3, r0
 80088ee:	091b      	lsrs	r3, r3, #4
 80088f0:	e003      	b.n	80088fa <RCC_GetSystemClockFreq+0xfe>
 80088f2:	f7ff fd61 	bl	80083b8 <LL_RCC_MSI_GetRangeAfterStandby>
 80088f6:	4603      	mov	r3, r0
 80088f8:	091b      	lsrs	r3, r3, #4
 80088fa:	4a05      	ldr	r2, [pc, #20]	; (8008910 <RCC_GetSystemClockFreq+0x114>)
 80088fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008900:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8008902:	bf00      	nop
  }

  return frequency;
 8008904:	687b      	ldr	r3, [r7, #4]
}
 8008906:	4618      	mov	r0, r3
 8008908:	3708      	adds	r7, #8
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	0800c848 	.word	0x0800c848
 8008914:	00f42400 	.word	0x00f42400
 8008918:	007a1200 	.word	0x007a1200

0800891c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8008924:	f7ff fd64 	bl	80083f0 <LL_RCC_GetAHBPrescaler>
 8008928:	4603      	mov	r3, r0
 800892a:	091b      	lsrs	r3, r3, #4
 800892c:	f003 030f 	and.w	r3, r3, #15
 8008930:	4a04      	ldr	r2, [pc, #16]	; (8008944 <RCC_GetHCLKClockFreq+0x28>)
 8008932:	5cd3      	ldrb	r3, [r2, r3]
 8008934:	461a      	mov	r2, r3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	40d3      	lsrs	r3, r2
}
 800893a:	4618      	mov	r0, r3
 800893c:	3708      	adds	r7, #8
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	0800c830 	.word	0x0800c830

08008948 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8008950:	f7ff fd5c 	bl	800840c <LL_RCC_GetAPB1Prescaler>
 8008954:	4603      	mov	r3, r0
 8008956:	0a1b      	lsrs	r3, r3, #8
 8008958:	4a04      	ldr	r2, [pc, #16]	; (800896c <RCC_GetPCLK1ClockFreq+0x24>)
 800895a:	5cd3      	ldrb	r3, [r2, r3]
 800895c:	461a      	mov	r2, r3
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	40d3      	lsrs	r3, r2
}
 8008962:	4618      	mov	r0, r3
 8008964:	3708      	adds	r7, #8
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	0800c840 	.word	0x0800c840

08008970 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8008978:	f7ff fd56 	bl	8008428 <LL_RCC_GetAPB2Prescaler>
 800897c:	4603      	mov	r3, r0
 800897e:	0adb      	lsrs	r3, r3, #11
 8008980:	4a04      	ldr	r2, [pc, #16]	; (8008994 <RCC_GetPCLK2ClockFreq+0x24>)
 8008982:	5cd3      	ldrb	r3, [r2, r3]
 8008984:	461a      	mov	r2, r3
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	40d3      	lsrs	r3, r2
}
 800898a:	4618      	mov	r0, r3
 800898c:	3708      	adds	r7, #8
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	0800c840 	.word	0x0800c840

08008998 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8008998:	b590      	push	{r4, r7, lr}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800899e:	f7ff fd79 	bl	8008494 <LL_RCC_PLL_GetMainSource>
 80089a2:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	2b03      	cmp	r3, #3
 80089a8:	d036      	beq.n	8008a18 <RCC_PLL_GetFreqDomain_SYS+0x80>
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	2b03      	cmp	r3, #3
 80089ae:	d836      	bhi.n	8008a1e <RCC_PLL_GetFreqDomain_SYS+0x86>
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d003      	beq.n	80089be <RCC_PLL_GetFreqDomain_SYS+0x26>
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	d02a      	beq.n	8008a12 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 80089bc:	e02f      	b.n	8008a1e <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80089be:	f7ff fcdb 	bl	8008378 <LL_RCC_MSI_IsEnabledRangeSelect>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d111      	bne.n	80089ec <RCC_PLL_GetFreqDomain_SYS+0x54>
 80089c8:	f7ff fcd6 	bl	8008378 <LL_RCC_MSI_IsEnabledRangeSelect>
 80089cc:	4603      	mov	r3, r0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d004      	beq.n	80089dc <RCC_PLL_GetFreqDomain_SYS+0x44>
 80089d2:	f7ff fce3 	bl	800839c <LL_RCC_MSI_GetRange>
 80089d6:	4603      	mov	r3, r0
 80089d8:	0a1b      	lsrs	r3, r3, #8
 80089da:	e003      	b.n	80089e4 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 80089dc:	f7ff fcec 	bl	80083b8 <LL_RCC_MSI_GetRangeAfterStandby>
 80089e0:	4603      	mov	r3, r0
 80089e2:	0a1b      	lsrs	r3, r3, #8
 80089e4:	4a2f      	ldr	r2, [pc, #188]	; (8008aa4 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80089e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089ea:	e010      	b.n	8008a0e <RCC_PLL_GetFreqDomain_SYS+0x76>
 80089ec:	f7ff fcc4 	bl	8008378 <LL_RCC_MSI_IsEnabledRangeSelect>
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d004      	beq.n	8008a00 <RCC_PLL_GetFreqDomain_SYS+0x68>
 80089f6:	f7ff fcd1 	bl	800839c <LL_RCC_MSI_GetRange>
 80089fa:	4603      	mov	r3, r0
 80089fc:	091b      	lsrs	r3, r3, #4
 80089fe:	e003      	b.n	8008a08 <RCC_PLL_GetFreqDomain_SYS+0x70>
 8008a00:	f7ff fcda 	bl	80083b8 <LL_RCC_MSI_GetRangeAfterStandby>
 8008a04:	4603      	mov	r3, r0
 8008a06:	091b      	lsrs	r3, r3, #4
 8008a08:	4a26      	ldr	r2, [pc, #152]	; (8008aa4 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8008a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a0e:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8008a10:	e02f      	b.n	8008a72 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8008a12:	4b25      	ldr	r3, [pc, #148]	; (8008aa8 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8008a14:	607b      	str	r3, [r7, #4]
      break;
 8008a16:	e02c      	b.n	8008a72 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8008a18:	4b24      	ldr	r3, [pc, #144]	; (8008aac <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8008a1a:	607b      	str	r3, [r7, #4]
      break;
 8008a1c:	e029      	b.n	8008a72 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8008a1e:	f7ff fcab 	bl	8008378 <LL_RCC_MSI_IsEnabledRangeSelect>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d111      	bne.n	8008a4c <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8008a28:	f7ff fca6 	bl	8008378 <LL_RCC_MSI_IsEnabledRangeSelect>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d004      	beq.n	8008a3c <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8008a32:	f7ff fcb3 	bl	800839c <LL_RCC_MSI_GetRange>
 8008a36:	4603      	mov	r3, r0
 8008a38:	0a1b      	lsrs	r3, r3, #8
 8008a3a:	e003      	b.n	8008a44 <RCC_PLL_GetFreqDomain_SYS+0xac>
 8008a3c:	f7ff fcbc 	bl	80083b8 <LL_RCC_MSI_GetRangeAfterStandby>
 8008a40:	4603      	mov	r3, r0
 8008a42:	0a1b      	lsrs	r3, r3, #8
 8008a44:	4a17      	ldr	r2, [pc, #92]	; (8008aa4 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8008a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a4a:	e010      	b.n	8008a6e <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8008a4c:	f7ff fc94 	bl	8008378 <LL_RCC_MSI_IsEnabledRangeSelect>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d004      	beq.n	8008a60 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8008a56:	f7ff fca1 	bl	800839c <LL_RCC_MSI_GetRange>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	091b      	lsrs	r3, r3, #4
 8008a5e:	e003      	b.n	8008a68 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8008a60:	f7ff fcaa 	bl	80083b8 <LL_RCC_MSI_GetRangeAfterStandby>
 8008a64:	4603      	mov	r3, r0
 8008a66:	091b      	lsrs	r3, r3, #4
 8008a68:	4a0e      	ldr	r2, [pc, #56]	; (8008aa4 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8008a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a6e:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8008a70:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8008a72:	f7ff fd39 	bl	80084e8 <LL_RCC_PLL_GetDivider>
 8008a76:	4603      	mov	r3, r0
 8008a78:	091b      	lsrs	r3, r3, #4
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	fbb2 f4f3 	udiv	r4, r2, r3
 8008a82:	f7ff fd15 	bl	80084b0 <LL_RCC_PLL_GetN>
 8008a86:	4603      	mov	r3, r0
 8008a88:	fb03 f404 	mul.w	r4, r3, r4
 8008a8c:	f7ff fd1e 	bl	80084cc <LL_RCC_PLL_GetR>
 8008a90:	4603      	mov	r3, r0
 8008a92:	0e5b      	lsrs	r3, r3, #25
 8008a94:	3301      	adds	r3, #1
 8008a96:	005b      	lsls	r3, r3, #1
 8008a98:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	370c      	adds	r7, #12
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd90      	pop	{r4, r7, pc}
 8008aa4:	0800c848 	.word	0x0800c848
 8008aa8:	00f42400 	.word	0x00f42400
 8008aac:	007a1200 	.word	0x007a1200

08008ab0 <LL_USART_IsEnabled>:
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 0301 	and.w	r3, r3, #1
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d101      	bne.n	8008ac8 <LL_USART_IsEnabled+0x18>
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e000      	b.n	8008aca <LL_USART_IsEnabled+0x1a>
 8008ac8:	2300      	movs	r3, #0
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	370c      	adds	r7, #12
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr

08008ad6 <LL_USART_SetStopBitsLength>:
{
 8008ad6:	b480      	push	{r7}
 8008ad8:	b083      	sub	sp, #12
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
 8008ade:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	431a      	orrs	r2, r3
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	605a      	str	r2, [r3, #4]
}
 8008af0:	bf00      	nop
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <LL_USART_SetHWFlowCtrl>:
{
 8008afc:	b480      	push	{r7}
 8008afe:	b083      	sub	sp, #12
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	431a      	orrs	r2, r3
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	609a      	str	r2, [r3, #8]
}
 8008b16:	bf00      	nop
 8008b18:	370c      	adds	r7, #12
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr

08008b22 <LL_USART_SetBaudRate>:
{
 8008b22:	b480      	push	{r7}
 8008b24:	b087      	sub	sp, #28
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	60f8      	str	r0, [r7, #12]
 8008b2a:	60b9      	str	r1, [r7, #8]
 8008b2c:	607a      	str	r2, [r7, #4]
 8008b2e:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b36:	d11a      	bne.n	8008b6e <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	005a      	lsls	r2, r3, #1
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	085b      	lsrs	r3, r3, #1
 8008b40:	441a      	add	r2, r3
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8008b4c:	697a      	ldr	r2, [r7, #20]
 8008b4e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8008b52:	4013      	ands	r3, r2
 8008b54:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	085b      	lsrs	r3, r3, #1
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	f003 0307 	and.w	r3, r3, #7
 8008b60:	693a      	ldr	r2, [r7, #16]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	693a      	ldr	r2, [r7, #16]
 8008b6a:	60da      	str	r2, [r3, #12]
}
 8008b6c:	e00a      	b.n	8008b84 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	085a      	lsrs	r2, r3, #1
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	441a      	add	r2, r3
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	461a      	mov	r2, r3
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	60da      	str	r2, [r3, #12]
}
 8008b84:	bf00      	nop
 8008b86:	371c      	adds	r7, #28
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f7ff ff84 	bl	8008ab0 <LL_USART_IsEnabled>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d15b      	bne.n	8008c66 <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	4b2f      	ldr	r3, [pc, #188]	; (8008c70 <LL_USART_Init+0xe0>)
 8008bb4:	4013      	ands	r3, r2
 8008bb6:	683a      	ldr	r2, [r7, #0]
 8008bb8:	6851      	ldr	r1, [r2, #4]
 8008bba:	683a      	ldr	r2, [r7, #0]
 8008bbc:	68d2      	ldr	r2, [r2, #12]
 8008bbe:	4311      	orrs	r1, r2
 8008bc0:	683a      	ldr	r2, [r7, #0]
 8008bc2:	6912      	ldr	r2, [r2, #16]
 8008bc4:	4311      	orrs	r1, r2
 8008bc6:	683a      	ldr	r2, [r7, #0]
 8008bc8:	6992      	ldr	r2, [r2, #24]
 8008bca:	430a      	orrs	r2, r1
 8008bcc:	431a      	orrs	r2, r3
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f7ff ff7c 	bl	8008ad6 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	695b      	ldr	r3, [r3, #20]
 8008be2:	4619      	mov	r1, r3
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f7ff ff89 	bl	8008afc <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a21      	ldr	r2, [pc, #132]	; (8008c74 <LL_USART_Init+0xe4>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d104      	bne.n	8008bfc <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8008bf2:	2003      	movs	r0, #3
 8008bf4:	f7ff fc86 	bl	8008504 <LL_RCC_GetUSARTClockFreq>
 8008bf8:	60b8      	str	r0, [r7, #8]
 8008bfa:	e023      	b.n	8008c44 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4a1e      	ldr	r2, [pc, #120]	; (8008c78 <LL_USART_Init+0xe8>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d104      	bne.n	8008c0e <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8008c04:	200c      	movs	r0, #12
 8008c06:	f7ff fc7d 	bl	8008504 <LL_RCC_GetUSARTClockFreq>
 8008c0a:	60b8      	str	r0, [r7, #8]
 8008c0c:	e01a      	b.n	8008c44 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a1a      	ldr	r2, [pc, #104]	; (8008c7c <LL_USART_Init+0xec>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d104      	bne.n	8008c20 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8008c16:	2030      	movs	r0, #48	; 0x30
 8008c18:	f7ff fc74 	bl	8008504 <LL_RCC_GetUSARTClockFreq>
 8008c1c:	60b8      	str	r0, [r7, #8]
 8008c1e:	e011      	b.n	8008c44 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4a17      	ldr	r2, [pc, #92]	; (8008c80 <LL_USART_Init+0xf0>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d104      	bne.n	8008c32 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8008c28:	20c0      	movs	r0, #192	; 0xc0
 8008c2a:	f7ff fd4f 	bl	80086cc <LL_RCC_GetUARTClockFreq>
 8008c2e:	60b8      	str	r0, [r7, #8]
 8008c30:	e008      	b.n	8008c44 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a13      	ldr	r2, [pc, #76]	; (8008c84 <LL_USART_Init+0xf4>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d104      	bne.n	8008c44 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8008c3a:	f44f 7040 	mov.w	r0, #768	; 0x300
 8008c3e:	f7ff fd45 	bl	80086cc <LL_RCC_GetUARTClockFreq>
 8008c42:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00d      	beq.n	8008c66 <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d009      	beq.n	8008c66 <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 8008c52:	2300      	movs	r3, #0
 8008c54:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	699a      	ldr	r2, [r3, #24]
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	68b9      	ldr	r1, [r7, #8]
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f7ff ff5e 	bl	8008b22 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8008c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3710      	adds	r7, #16
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	efff69f3 	.word	0xefff69f3
 8008c74:	40013800 	.word	0x40013800
 8008c78:	40004400 	.word	0x40004400
 8008c7c:	40004800 	.word	0x40004800
 8008c80:	40004c00 	.word	0x40004c00
 8008c84:	40005000 	.word	0x40005000

08008c88 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	4603      	mov	r3, r0
 8008c90:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008c92:	2300      	movs	r3, #0
 8008c94:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008c96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c9a:	2b84      	cmp	r3, #132	; 0x84
 8008c9c:	d005      	beq.n	8008caa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008c9e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	3303      	adds	r3, #3
 8008ca8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008caa:	68fb      	ldr	r3, [r7, #12]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3714      	adds	r7, #20
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008cbc:	f000 fff4 	bl	8009ca8 <vTaskStartScheduler>
  
  return osOK;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	bd80      	pop	{r7, pc}

08008cc6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008cc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cc8:	b089      	sub	sp, #36	; 0x24
 8008cca:	af04      	add	r7, sp, #16
 8008ccc:	6078      	str	r0, [r7, #4]
 8008cce:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	695b      	ldr	r3, [r3, #20]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d020      	beq.n	8008d1a <osThreadCreate+0x54>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	699b      	ldr	r3, [r3, #24]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d01c      	beq.n	8008d1a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	685c      	ldr	r4, [r3, #4]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681d      	ldr	r5, [r3, #0]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	691e      	ldr	r6, [r3, #16]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7ff ffc8 	bl	8008c88 <makeFreeRtosPriority>
 8008cf8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	695b      	ldr	r3, [r3, #20]
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d02:	9202      	str	r2, [sp, #8]
 8008d04:	9301      	str	r3, [sp, #4]
 8008d06:	9100      	str	r1, [sp, #0]
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	4632      	mov	r2, r6
 8008d0c:	4629      	mov	r1, r5
 8008d0e:	4620      	mov	r0, r4
 8008d10:	f000 fdec 	bl	80098ec <xTaskCreateStatic>
 8008d14:	4603      	mov	r3, r0
 8008d16:	60fb      	str	r3, [r7, #12]
 8008d18:	e01c      	b.n	8008d54 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	685c      	ldr	r4, [r3, #4]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d26:	b29e      	uxth	r6, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7ff ffaa 	bl	8008c88 <makeFreeRtosPriority>
 8008d34:	4602      	mov	r2, r0
 8008d36:	f107 030c 	add.w	r3, r7, #12
 8008d3a:	9301      	str	r3, [sp, #4]
 8008d3c:	9200      	str	r2, [sp, #0]
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	4632      	mov	r2, r6
 8008d42:	4629      	mov	r1, r5
 8008d44:	4620      	mov	r0, r4
 8008d46:	f000 fe2e 	bl	80099a6 <xTaskCreate>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d001      	beq.n	8008d54 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008d50:	2300      	movs	r3, #0
 8008d52:	e000      	b.n	8008d56 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008d54:	68fb      	ldr	r3, [r7, #12]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3714      	adds	r7, #20
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008d5e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b084      	sub	sp, #16
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d001      	beq.n	8008d74 <osDelay+0x16>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	e000      	b.n	8008d76 <osDelay+0x18>
 8008d74:	2301      	movs	r3, #1
 8008d76:	4618      	mov	r0, r3
 8008d78:	f000 ff62 	bl	8009c40 <vTaskDelay>
  
  return osOK;
 8008d7c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3710      	adds	r7, #16
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008d86:	b480      	push	{r7}
 8008d88:	b083      	sub	sp, #12
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f103 0208 	add.w	r2, r3, #8
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d9e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f103 0208 	add.w	r2, r3, #8
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f103 0208 	add.w	r2, r3, #8
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008dba:	bf00      	nop
 8008dbc:	370c      	adds	r7, #12
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr

08008dc6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008dc6:	b480      	push	{r7}
 8008dc8:	b083      	sub	sp, #12
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008dd4:	bf00      	nop
 8008dd6:	370c      	adds	r7, #12
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr

08008de0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008de0:	b480      	push	{r7}
 8008de2:	b085      	sub	sp, #20
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	68fa      	ldr	r2, [r7, #12]
 8008df4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	689a      	ldr	r2, [r3, #8]
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	683a      	ldr	r2, [r7, #0]
 8008e04:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	683a      	ldr	r2, [r7, #0]
 8008e0a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	1c5a      	adds	r2, r3, #1
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	601a      	str	r2, [r3, #0]
}
 8008e1c:	bf00      	nop
 8008e1e:	3714      	adds	r7, #20
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b085      	sub	sp, #20
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e3e:	d103      	bne.n	8008e48 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	691b      	ldr	r3, [r3, #16]
 8008e44:	60fb      	str	r3, [r7, #12]
 8008e46:	e00c      	b.n	8008e62 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	3308      	adds	r3, #8
 8008e4c:	60fb      	str	r3, [r7, #12]
 8008e4e:	e002      	b.n	8008e56 <vListInsert+0x2e>
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	60fb      	str	r3, [r7, #12]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	68ba      	ldr	r2, [r7, #8]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d2f6      	bcs.n	8008e50 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	685a      	ldr	r2, [r3, #4]
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	683a      	ldr	r2, [r7, #0]
 8008e70:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	68fa      	ldr	r2, [r7, #12]
 8008e76:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	683a      	ldr	r2, [r7, #0]
 8008e7c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	1c5a      	adds	r2, r3, #1
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	601a      	str	r2, [r3, #0]
}
 8008e8e:	bf00      	nop
 8008e90:	3714      	adds	r7, #20
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr

08008e9a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008e9a:	b480      	push	{r7}
 8008e9c:	b085      	sub	sp, #20
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	691b      	ldr	r3, [r3, #16]
 8008ea6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	6892      	ldr	r2, [r2, #8]
 8008eb0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	6852      	ldr	r2, [r2, #4]
 8008eba:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d103      	bne.n	8008ece <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	689a      	ldr	r2, [r3, #8]
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	1e5a      	subs	r2, r3, #1
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3714      	adds	r7, #20
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr
	...

08008ef0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d10a      	bne.n	8008f1a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f08:	f383 8811 	msr	BASEPRI, r3
 8008f0c:	f3bf 8f6f 	isb	sy
 8008f10:	f3bf 8f4f 	dsb	sy
 8008f14:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008f16:	bf00      	nop
 8008f18:	e7fe      	b.n	8008f18 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008f1a:	f001 fd0b 	bl	800a934 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f26:	68f9      	ldr	r1, [r7, #12]
 8008f28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008f2a:	fb01 f303 	mul.w	r3, r1, r3
 8008f2e:	441a      	add	r2, r3
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2200      	movs	r2, #0
 8008f38:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f4a:	3b01      	subs	r3, #1
 8008f4c:	68f9      	ldr	r1, [r7, #12]
 8008f4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008f50:	fb01 f303 	mul.w	r3, r1, r3
 8008f54:	441a      	add	r2, r3
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	22ff      	movs	r2, #255	; 0xff
 8008f5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	22ff      	movs	r2, #255	; 0xff
 8008f66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d114      	bne.n	8008f9a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d01a      	beq.n	8008fae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	3310      	adds	r3, #16
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f001 f8e5 	bl	800a14c <xTaskRemoveFromEventList>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d012      	beq.n	8008fae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008f88:	4b0c      	ldr	r3, [pc, #48]	; (8008fbc <xQueueGenericReset+0xcc>)
 8008f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f8e:	601a      	str	r2, [r3, #0]
 8008f90:	f3bf 8f4f 	dsb	sy
 8008f94:	f3bf 8f6f 	isb	sy
 8008f98:	e009      	b.n	8008fae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	3310      	adds	r3, #16
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7ff fef1 	bl	8008d86 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	3324      	adds	r3, #36	; 0x24
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7ff feec 	bl	8008d86 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008fae:	f001 fcf1 	bl	800a994 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008fb2:	2301      	movs	r3, #1
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3710      	adds	r7, #16
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	e000ed04 	.word	0xe000ed04

08008fc0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b08a      	sub	sp, #40	; 0x28
 8008fc4:	af02      	add	r7, sp, #8
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	4613      	mov	r3, r2
 8008fcc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d10a      	bne.n	8008fea <xQueueGenericCreate+0x2a>
	__asm volatile
 8008fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd8:	f383 8811 	msr	BASEPRI, r3
 8008fdc:	f3bf 8f6f 	isb	sy
 8008fe0:	f3bf 8f4f 	dsb	sy
 8008fe4:	613b      	str	r3, [r7, #16]
}
 8008fe6:	bf00      	nop
 8008fe8:	e7fe      	b.n	8008fe8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	fb02 f303 	mul.w	r3, r2, r3
 8008ff2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	3348      	adds	r3, #72	; 0x48
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f001 fdbd 	bl	800ab78 <pvPortMalloc>
 8008ffe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009000:	69bb      	ldr	r3, [r7, #24]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d011      	beq.n	800902a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	3348      	adds	r3, #72	; 0x48
 800900e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	2200      	movs	r2, #0
 8009014:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009018:	79fa      	ldrb	r2, [r7, #7]
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	9300      	str	r3, [sp, #0]
 800901e:	4613      	mov	r3, r2
 8009020:	697a      	ldr	r2, [r7, #20]
 8009022:	68b9      	ldr	r1, [r7, #8]
 8009024:	68f8      	ldr	r0, [r7, #12]
 8009026:	f000 f805 	bl	8009034 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800902a:	69bb      	ldr	r3, [r7, #24]
	}
 800902c:	4618      	mov	r0, r3
 800902e:	3720      	adds	r7, #32
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	607a      	str	r2, [r7, #4]
 8009040:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d103      	bne.n	8009050 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009048:	69bb      	ldr	r3, [r7, #24]
 800904a:	69ba      	ldr	r2, [r7, #24]
 800904c:	601a      	str	r2, [r3, #0]
 800904e:	e002      	b.n	8009056 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	68fa      	ldr	r2, [r7, #12]
 800905a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800905c:	69bb      	ldr	r3, [r7, #24]
 800905e:	68ba      	ldr	r2, [r7, #8]
 8009060:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009062:	2101      	movs	r1, #1
 8009064:	69b8      	ldr	r0, [r7, #24]
 8009066:	f7ff ff43 	bl	8008ef0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800906a:	bf00      	nop
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}

08009072 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009072:	b580      	push	{r7, lr}
 8009074:	b082      	sub	sp, #8
 8009076:	af00      	add	r7, sp, #0
 8009078:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d00e      	beq.n	800909e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009092:	2300      	movs	r3, #0
 8009094:	2200      	movs	r2, #0
 8009096:	2100      	movs	r1, #0
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 f81d 	bl	80090d8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800909e:	bf00      	nop
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b086      	sub	sp, #24
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	4603      	mov	r3, r0
 80090ae:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80090b0:	2301      	movs	r3, #1
 80090b2:	617b      	str	r3, [r7, #20]
 80090b4:	2300      	movs	r3, #0
 80090b6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80090b8:	79fb      	ldrb	r3, [r7, #7]
 80090ba:	461a      	mov	r2, r3
 80090bc:	6939      	ldr	r1, [r7, #16]
 80090be:	6978      	ldr	r0, [r7, #20]
 80090c0:	f7ff ff7e 	bl	8008fc0 <xQueueGenericCreate>
 80090c4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80090c6:	68f8      	ldr	r0, [r7, #12]
 80090c8:	f7ff ffd3 	bl	8009072 <prvInitialiseMutex>

		return xNewQueue;
 80090cc:	68fb      	ldr	r3, [r7, #12]
	}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3718      	adds	r7, #24
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
	...

080090d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b08e      	sub	sp, #56	; 0x38
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	607a      	str	r2, [r7, #4]
 80090e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80090e6:	2300      	movs	r3, #0
 80090e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80090ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d10a      	bne.n	800910a <xQueueGenericSend+0x32>
	__asm volatile
 80090f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f8:	f383 8811 	msr	BASEPRI, r3
 80090fc:	f3bf 8f6f 	isb	sy
 8009100:	f3bf 8f4f 	dsb	sy
 8009104:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009106:	bf00      	nop
 8009108:	e7fe      	b.n	8009108 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d103      	bne.n	8009118 <xQueueGenericSend+0x40>
 8009110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009114:	2b00      	cmp	r3, #0
 8009116:	d101      	bne.n	800911c <xQueueGenericSend+0x44>
 8009118:	2301      	movs	r3, #1
 800911a:	e000      	b.n	800911e <xQueueGenericSend+0x46>
 800911c:	2300      	movs	r3, #0
 800911e:	2b00      	cmp	r3, #0
 8009120:	d10a      	bne.n	8009138 <xQueueGenericSend+0x60>
	__asm volatile
 8009122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009126:	f383 8811 	msr	BASEPRI, r3
 800912a:	f3bf 8f6f 	isb	sy
 800912e:	f3bf 8f4f 	dsb	sy
 8009132:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009134:	bf00      	nop
 8009136:	e7fe      	b.n	8009136 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	2b02      	cmp	r3, #2
 800913c:	d103      	bne.n	8009146 <xQueueGenericSend+0x6e>
 800913e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009142:	2b01      	cmp	r3, #1
 8009144:	d101      	bne.n	800914a <xQueueGenericSend+0x72>
 8009146:	2301      	movs	r3, #1
 8009148:	e000      	b.n	800914c <xQueueGenericSend+0x74>
 800914a:	2300      	movs	r3, #0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d10a      	bne.n	8009166 <xQueueGenericSend+0x8e>
	__asm volatile
 8009150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009154:	f383 8811 	msr	BASEPRI, r3
 8009158:	f3bf 8f6f 	isb	sy
 800915c:	f3bf 8f4f 	dsb	sy
 8009160:	623b      	str	r3, [r7, #32]
}
 8009162:	bf00      	nop
 8009164:	e7fe      	b.n	8009164 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009166:	f001 f9b1 	bl	800a4cc <xTaskGetSchedulerState>
 800916a:	4603      	mov	r3, r0
 800916c:	2b00      	cmp	r3, #0
 800916e:	d102      	bne.n	8009176 <xQueueGenericSend+0x9e>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d101      	bne.n	800917a <xQueueGenericSend+0xa2>
 8009176:	2301      	movs	r3, #1
 8009178:	e000      	b.n	800917c <xQueueGenericSend+0xa4>
 800917a:	2300      	movs	r3, #0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d10a      	bne.n	8009196 <xQueueGenericSend+0xbe>
	__asm volatile
 8009180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009184:	f383 8811 	msr	BASEPRI, r3
 8009188:	f3bf 8f6f 	isb	sy
 800918c:	f3bf 8f4f 	dsb	sy
 8009190:	61fb      	str	r3, [r7, #28]
}
 8009192:	bf00      	nop
 8009194:	e7fe      	b.n	8009194 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009196:	f001 fbcd 	bl	800a934 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800919a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800919e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d302      	bcc.n	80091ac <xQueueGenericSend+0xd4>
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	2b02      	cmp	r3, #2
 80091aa:	d129      	bne.n	8009200 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80091ac:	683a      	ldr	r2, [r7, #0]
 80091ae:	68b9      	ldr	r1, [r7, #8]
 80091b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091b2:	f000 fa8b 	bl	80096cc <prvCopyDataToQueue>
 80091b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d010      	beq.n	80091e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c2:	3324      	adds	r3, #36	; 0x24
 80091c4:	4618      	mov	r0, r3
 80091c6:	f000 ffc1 	bl	800a14c <xTaskRemoveFromEventList>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d013      	beq.n	80091f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80091d0:	4b3f      	ldr	r3, [pc, #252]	; (80092d0 <xQueueGenericSend+0x1f8>)
 80091d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091d6:	601a      	str	r2, [r3, #0]
 80091d8:	f3bf 8f4f 	dsb	sy
 80091dc:	f3bf 8f6f 	isb	sy
 80091e0:	e00a      	b.n	80091f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80091e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d007      	beq.n	80091f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80091e8:	4b39      	ldr	r3, [pc, #228]	; (80092d0 <xQueueGenericSend+0x1f8>)
 80091ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091ee:	601a      	str	r2, [r3, #0]
 80091f0:	f3bf 8f4f 	dsb	sy
 80091f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80091f8:	f001 fbcc 	bl	800a994 <vPortExitCritical>
				return pdPASS;
 80091fc:	2301      	movs	r3, #1
 80091fe:	e063      	b.n	80092c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d103      	bne.n	800920e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009206:	f001 fbc5 	bl	800a994 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800920a:	2300      	movs	r3, #0
 800920c:	e05c      	b.n	80092c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800920e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009210:	2b00      	cmp	r3, #0
 8009212:	d106      	bne.n	8009222 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009214:	f107 0314 	add.w	r3, r7, #20
 8009218:	4618      	mov	r0, r3
 800921a:	f000 fff9 	bl	800a210 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800921e:	2301      	movs	r3, #1
 8009220:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009222:	f001 fbb7 	bl	800a994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009226:	f000 fda9 	bl	8009d7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800922a:	f001 fb83 	bl	800a934 <vPortEnterCritical>
 800922e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009230:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009234:	b25b      	sxtb	r3, r3
 8009236:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800923a:	d103      	bne.n	8009244 <xQueueGenericSend+0x16c>
 800923c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800923e:	2200      	movs	r2, #0
 8009240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009246:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800924a:	b25b      	sxtb	r3, r3
 800924c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009250:	d103      	bne.n	800925a <xQueueGenericSend+0x182>
 8009252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009254:	2200      	movs	r2, #0
 8009256:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800925a:	f001 fb9b 	bl	800a994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800925e:	1d3a      	adds	r2, r7, #4
 8009260:	f107 0314 	add.w	r3, r7, #20
 8009264:	4611      	mov	r1, r2
 8009266:	4618      	mov	r0, r3
 8009268:	f000 ffe8 	bl	800a23c <xTaskCheckForTimeOut>
 800926c:	4603      	mov	r3, r0
 800926e:	2b00      	cmp	r3, #0
 8009270:	d124      	bne.n	80092bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009272:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009274:	f000 fb22 	bl	80098bc <prvIsQueueFull>
 8009278:	4603      	mov	r3, r0
 800927a:	2b00      	cmp	r3, #0
 800927c:	d018      	beq.n	80092b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800927e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009280:	3310      	adds	r3, #16
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	4611      	mov	r1, r2
 8009286:	4618      	mov	r0, r3
 8009288:	f000 ff3c 	bl	800a104 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800928c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800928e:	f000 faad 	bl	80097ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009292:	f000 fd81 	bl	8009d98 <xTaskResumeAll>
 8009296:	4603      	mov	r3, r0
 8009298:	2b00      	cmp	r3, #0
 800929a:	f47f af7c 	bne.w	8009196 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800929e:	4b0c      	ldr	r3, [pc, #48]	; (80092d0 <xQueueGenericSend+0x1f8>)
 80092a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092a4:	601a      	str	r2, [r3, #0]
 80092a6:	f3bf 8f4f 	dsb	sy
 80092aa:	f3bf 8f6f 	isb	sy
 80092ae:	e772      	b.n	8009196 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80092b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092b2:	f000 fa9b 	bl	80097ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80092b6:	f000 fd6f 	bl	8009d98 <xTaskResumeAll>
 80092ba:	e76c      	b.n	8009196 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80092bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092be:	f000 fa95 	bl	80097ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80092c2:	f000 fd69 	bl	8009d98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80092c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3738      	adds	r7, #56	; 0x38
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}
 80092d0:	e000ed04 	.word	0xe000ed04

080092d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b090      	sub	sp, #64	; 0x40
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	607a      	str	r2, [r7, #4]
 80092e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80092e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d10a      	bne.n	8009302 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80092ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f0:	f383 8811 	msr	BASEPRI, r3
 80092f4:	f3bf 8f6f 	isb	sy
 80092f8:	f3bf 8f4f 	dsb	sy
 80092fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80092fe:	bf00      	nop
 8009300:	e7fe      	b.n	8009300 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d103      	bne.n	8009310 <xQueueGenericSendFromISR+0x3c>
 8009308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800930a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800930c:	2b00      	cmp	r3, #0
 800930e:	d101      	bne.n	8009314 <xQueueGenericSendFromISR+0x40>
 8009310:	2301      	movs	r3, #1
 8009312:	e000      	b.n	8009316 <xQueueGenericSendFromISR+0x42>
 8009314:	2300      	movs	r3, #0
 8009316:	2b00      	cmp	r3, #0
 8009318:	d10a      	bne.n	8009330 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800931a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931e:	f383 8811 	msr	BASEPRI, r3
 8009322:	f3bf 8f6f 	isb	sy
 8009326:	f3bf 8f4f 	dsb	sy
 800932a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800932c:	bf00      	nop
 800932e:	e7fe      	b.n	800932e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	2b02      	cmp	r3, #2
 8009334:	d103      	bne.n	800933e <xQueueGenericSendFromISR+0x6a>
 8009336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800933a:	2b01      	cmp	r3, #1
 800933c:	d101      	bne.n	8009342 <xQueueGenericSendFromISR+0x6e>
 800933e:	2301      	movs	r3, #1
 8009340:	e000      	b.n	8009344 <xQueueGenericSendFromISR+0x70>
 8009342:	2300      	movs	r3, #0
 8009344:	2b00      	cmp	r3, #0
 8009346:	d10a      	bne.n	800935e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934c:	f383 8811 	msr	BASEPRI, r3
 8009350:	f3bf 8f6f 	isb	sy
 8009354:	f3bf 8f4f 	dsb	sy
 8009358:	623b      	str	r3, [r7, #32]
}
 800935a:	bf00      	nop
 800935c:	e7fe      	b.n	800935c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800935e:	f001 fbcb 	bl	800aaf8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009362:	f3ef 8211 	mrs	r2, BASEPRI
 8009366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800936a:	f383 8811 	msr	BASEPRI, r3
 800936e:	f3bf 8f6f 	isb	sy
 8009372:	f3bf 8f4f 	dsb	sy
 8009376:	61fa      	str	r2, [r7, #28]
 8009378:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800937a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800937c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800937e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009380:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009386:	429a      	cmp	r2, r3
 8009388:	d302      	bcc.n	8009390 <xQueueGenericSendFromISR+0xbc>
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	2b02      	cmp	r3, #2
 800938e:	d12f      	bne.n	80093f0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009392:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800939a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800939c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800939e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80093a0:	683a      	ldr	r2, [r7, #0]
 80093a2:	68b9      	ldr	r1, [r7, #8]
 80093a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80093a6:	f000 f991 	bl	80096cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80093aa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80093ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093b2:	d112      	bne.n	80093da <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d016      	beq.n	80093ea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093be:	3324      	adds	r3, #36	; 0x24
 80093c0:	4618      	mov	r0, r3
 80093c2:	f000 fec3 	bl	800a14c <xTaskRemoveFromEventList>
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d00e      	beq.n	80093ea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d00b      	beq.n	80093ea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2201      	movs	r2, #1
 80093d6:	601a      	str	r2, [r3, #0]
 80093d8:	e007      	b.n	80093ea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80093da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80093de:	3301      	adds	r3, #1
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	b25a      	sxtb	r2, r3
 80093e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80093ea:	2301      	movs	r3, #1
 80093ec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80093ee:	e001      	b.n	80093f4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80093f0:	2300      	movs	r3, #0
 80093f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093f6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80093fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009402:	4618      	mov	r0, r3
 8009404:	3740      	adds	r7, #64	; 0x40
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
	...

0800940c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b08c      	sub	sp, #48	; 0x30
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009418:	2300      	movs	r3, #0
 800941a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009422:	2b00      	cmp	r3, #0
 8009424:	d10a      	bne.n	800943c <xQueueReceive+0x30>
	__asm volatile
 8009426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942a:	f383 8811 	msr	BASEPRI, r3
 800942e:	f3bf 8f6f 	isb	sy
 8009432:	f3bf 8f4f 	dsb	sy
 8009436:	623b      	str	r3, [r7, #32]
}
 8009438:	bf00      	nop
 800943a:	e7fe      	b.n	800943a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d103      	bne.n	800944a <xQueueReceive+0x3e>
 8009442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009446:	2b00      	cmp	r3, #0
 8009448:	d101      	bne.n	800944e <xQueueReceive+0x42>
 800944a:	2301      	movs	r3, #1
 800944c:	e000      	b.n	8009450 <xQueueReceive+0x44>
 800944e:	2300      	movs	r3, #0
 8009450:	2b00      	cmp	r3, #0
 8009452:	d10a      	bne.n	800946a <xQueueReceive+0x5e>
	__asm volatile
 8009454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009458:	f383 8811 	msr	BASEPRI, r3
 800945c:	f3bf 8f6f 	isb	sy
 8009460:	f3bf 8f4f 	dsb	sy
 8009464:	61fb      	str	r3, [r7, #28]
}
 8009466:	bf00      	nop
 8009468:	e7fe      	b.n	8009468 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800946a:	f001 f82f 	bl	800a4cc <xTaskGetSchedulerState>
 800946e:	4603      	mov	r3, r0
 8009470:	2b00      	cmp	r3, #0
 8009472:	d102      	bne.n	800947a <xQueueReceive+0x6e>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d101      	bne.n	800947e <xQueueReceive+0x72>
 800947a:	2301      	movs	r3, #1
 800947c:	e000      	b.n	8009480 <xQueueReceive+0x74>
 800947e:	2300      	movs	r3, #0
 8009480:	2b00      	cmp	r3, #0
 8009482:	d10a      	bne.n	800949a <xQueueReceive+0x8e>
	__asm volatile
 8009484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009488:	f383 8811 	msr	BASEPRI, r3
 800948c:	f3bf 8f6f 	isb	sy
 8009490:	f3bf 8f4f 	dsb	sy
 8009494:	61bb      	str	r3, [r7, #24]
}
 8009496:	bf00      	nop
 8009498:	e7fe      	b.n	8009498 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800949a:	f001 fa4b 	bl	800a934 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800949e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80094a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d01f      	beq.n	80094ea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80094aa:	68b9      	ldr	r1, [r7, #8]
 80094ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094ae:	f000 f977 	bl	80097a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80094b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b4:	1e5a      	subs	r2, r3, #1
 80094b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094bc:	691b      	ldr	r3, [r3, #16]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d00f      	beq.n	80094e2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c4:	3310      	adds	r3, #16
 80094c6:	4618      	mov	r0, r3
 80094c8:	f000 fe40 	bl	800a14c <xTaskRemoveFromEventList>
 80094cc:	4603      	mov	r3, r0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d007      	beq.n	80094e2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80094d2:	4b3d      	ldr	r3, [pc, #244]	; (80095c8 <xQueueReceive+0x1bc>)
 80094d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094d8:	601a      	str	r2, [r3, #0]
 80094da:	f3bf 8f4f 	dsb	sy
 80094de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80094e2:	f001 fa57 	bl	800a994 <vPortExitCritical>
				return pdPASS;
 80094e6:	2301      	movs	r3, #1
 80094e8:	e069      	b.n	80095be <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d103      	bne.n	80094f8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80094f0:	f001 fa50 	bl	800a994 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80094f4:	2300      	movs	r3, #0
 80094f6:	e062      	b.n	80095be <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80094f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d106      	bne.n	800950c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80094fe:	f107 0310 	add.w	r3, r7, #16
 8009502:	4618      	mov	r0, r3
 8009504:	f000 fe84 	bl	800a210 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009508:	2301      	movs	r3, #1
 800950a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800950c:	f001 fa42 	bl	800a994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009510:	f000 fc34 	bl	8009d7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009514:	f001 fa0e 	bl	800a934 <vPortEnterCritical>
 8009518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800951e:	b25b      	sxtb	r3, r3
 8009520:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009524:	d103      	bne.n	800952e <xQueueReceive+0x122>
 8009526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009528:	2200      	movs	r2, #0
 800952a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800952e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009530:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009534:	b25b      	sxtb	r3, r3
 8009536:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800953a:	d103      	bne.n	8009544 <xQueueReceive+0x138>
 800953c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953e:	2200      	movs	r2, #0
 8009540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009544:	f001 fa26 	bl	800a994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009548:	1d3a      	adds	r2, r7, #4
 800954a:	f107 0310 	add.w	r3, r7, #16
 800954e:	4611      	mov	r1, r2
 8009550:	4618      	mov	r0, r3
 8009552:	f000 fe73 	bl	800a23c <xTaskCheckForTimeOut>
 8009556:	4603      	mov	r3, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d123      	bne.n	80095a4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800955c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800955e:	f000 f997 	bl	8009890 <prvIsQueueEmpty>
 8009562:	4603      	mov	r3, r0
 8009564:	2b00      	cmp	r3, #0
 8009566:	d017      	beq.n	8009598 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956a:	3324      	adds	r3, #36	; 0x24
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	4611      	mov	r1, r2
 8009570:	4618      	mov	r0, r3
 8009572:	f000 fdc7 	bl	800a104 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009576:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009578:	f000 f938 	bl	80097ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800957c:	f000 fc0c 	bl	8009d98 <xTaskResumeAll>
 8009580:	4603      	mov	r3, r0
 8009582:	2b00      	cmp	r3, #0
 8009584:	d189      	bne.n	800949a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009586:	4b10      	ldr	r3, [pc, #64]	; (80095c8 <xQueueReceive+0x1bc>)
 8009588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800958c:	601a      	str	r2, [r3, #0]
 800958e:	f3bf 8f4f 	dsb	sy
 8009592:	f3bf 8f6f 	isb	sy
 8009596:	e780      	b.n	800949a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800959a:	f000 f927 	bl	80097ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800959e:	f000 fbfb 	bl	8009d98 <xTaskResumeAll>
 80095a2:	e77a      	b.n	800949a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80095a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095a6:	f000 f921 	bl	80097ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80095aa:	f000 fbf5 	bl	8009d98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80095ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095b0:	f000 f96e 	bl	8009890 <prvIsQueueEmpty>
 80095b4:	4603      	mov	r3, r0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	f43f af6f 	beq.w	800949a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80095bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3730      	adds	r7, #48	; 0x30
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop
 80095c8:	e000ed04 	.word	0xe000ed04

080095cc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b08e      	sub	sp, #56	; 0x38
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80095dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d10a      	bne.n	80095f8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80095e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e6:	f383 8811 	msr	BASEPRI, r3
 80095ea:	f3bf 8f6f 	isb	sy
 80095ee:	f3bf 8f4f 	dsb	sy
 80095f2:	623b      	str	r3, [r7, #32]
}
 80095f4:	bf00      	nop
 80095f6:	e7fe      	b.n	80095f6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d103      	bne.n	8009606 <xQueueReceiveFromISR+0x3a>
 80095fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009602:	2b00      	cmp	r3, #0
 8009604:	d101      	bne.n	800960a <xQueueReceiveFromISR+0x3e>
 8009606:	2301      	movs	r3, #1
 8009608:	e000      	b.n	800960c <xQueueReceiveFromISR+0x40>
 800960a:	2300      	movs	r3, #0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d10a      	bne.n	8009626 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009614:	f383 8811 	msr	BASEPRI, r3
 8009618:	f3bf 8f6f 	isb	sy
 800961c:	f3bf 8f4f 	dsb	sy
 8009620:	61fb      	str	r3, [r7, #28]
}
 8009622:	bf00      	nop
 8009624:	e7fe      	b.n	8009624 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009626:	f001 fa67 	bl	800aaf8 <vPortValidateInterruptPriority>
	__asm volatile
 800962a:	f3ef 8211 	mrs	r2, BASEPRI
 800962e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009632:	f383 8811 	msr	BASEPRI, r3
 8009636:	f3bf 8f6f 	isb	sy
 800963a:	f3bf 8f4f 	dsb	sy
 800963e:	61ba      	str	r2, [r7, #24]
 8009640:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009642:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009644:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800964a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800964c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964e:	2b00      	cmp	r3, #0
 8009650:	d02f      	beq.n	80096b2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009654:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009658:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800965c:	68b9      	ldr	r1, [r7, #8]
 800965e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009660:	f000 f89e 	bl	80097a0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009666:	1e5a      	subs	r2, r3, #1
 8009668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800966a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800966c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009670:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009674:	d112      	bne.n	800969c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009678:	691b      	ldr	r3, [r3, #16]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d016      	beq.n	80096ac <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800967e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009680:	3310      	adds	r3, #16
 8009682:	4618      	mov	r0, r3
 8009684:	f000 fd62 	bl	800a14c <xTaskRemoveFromEventList>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d00e      	beq.n	80096ac <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d00b      	beq.n	80096ac <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2201      	movs	r2, #1
 8009698:	601a      	str	r2, [r3, #0]
 800969a:	e007      	b.n	80096ac <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800969c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096a0:	3301      	adds	r3, #1
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	b25a      	sxtb	r2, r3
 80096a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80096ac:	2301      	movs	r3, #1
 80096ae:	637b      	str	r3, [r7, #52]	; 0x34
 80096b0:	e001      	b.n	80096b6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80096b2:	2300      	movs	r3, #0
 80096b4:	637b      	str	r3, [r7, #52]	; 0x34
 80096b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	f383 8811 	msr	BASEPRI, r3
}
 80096c0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80096c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3738      	adds	r7, #56	; 0x38
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b086      	sub	sp, #24
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	60f8      	str	r0, [r7, #12]
 80096d4:	60b9      	str	r1, [r7, #8]
 80096d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80096d8:	2300      	movs	r3, #0
 80096da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d10d      	bne.n	8009706 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d14d      	bne.n	800978e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	4618      	mov	r0, r3
 80096f8:	f000 ff06 	bl	800a508 <xTaskPriorityDisinherit>
 80096fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2200      	movs	r2, #0
 8009702:	609a      	str	r2, [r3, #8]
 8009704:	e043      	b.n	800978e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d119      	bne.n	8009740 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	6858      	ldr	r0, [r3, #4]
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009714:	461a      	mov	r2, r3
 8009716:	68b9      	ldr	r1, [r7, #8]
 8009718:	f001 fe0f 	bl	800b33a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	685a      	ldr	r2, [r3, #4]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009724:	441a      	add	r2, r3
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	685a      	ldr	r2, [r3, #4]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	689b      	ldr	r3, [r3, #8]
 8009732:	429a      	cmp	r2, r3
 8009734:	d32b      	bcc.n	800978e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	605a      	str	r2, [r3, #4]
 800973e:	e026      	b.n	800978e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	68d8      	ldr	r0, [r3, #12]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009748:	461a      	mov	r2, r3
 800974a:	68b9      	ldr	r1, [r7, #8]
 800974c:	f001 fdf5 	bl	800b33a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	68da      	ldr	r2, [r3, #12]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009758:	425b      	negs	r3, r3
 800975a:	441a      	add	r2, r3
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	68da      	ldr	r2, [r3, #12]
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	429a      	cmp	r2, r3
 800976a:	d207      	bcs.n	800977c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	689a      	ldr	r2, [r3, #8]
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009774:	425b      	negs	r3, r3
 8009776:	441a      	add	r2, r3
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2b02      	cmp	r3, #2
 8009780:	d105      	bne.n	800978e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d002      	beq.n	800978e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	3b01      	subs	r3, #1
 800978c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	1c5a      	adds	r2, r3, #1
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009796:	697b      	ldr	r3, [r7, #20]
}
 8009798:	4618      	mov	r0, r3
 800979a:	3718      	adds	r7, #24
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d018      	beq.n	80097e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	68da      	ldr	r2, [r3, #12]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ba:	441a      	add	r2, r3
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	68da      	ldr	r2, [r3, #12]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	689b      	ldr	r3, [r3, #8]
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d303      	bcc.n	80097d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	68d9      	ldr	r1, [r3, #12]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097dc:	461a      	mov	r2, r3
 80097de:	6838      	ldr	r0, [r7, #0]
 80097e0:	f001 fdab 	bl	800b33a <memcpy>
	}
}
 80097e4:	bf00      	nop
 80097e6:	3708      	adds	r7, #8
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80097f4:	f001 f89e 	bl	800a934 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009800:	e011      	b.n	8009826 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009806:	2b00      	cmp	r3, #0
 8009808:	d012      	beq.n	8009830 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	3324      	adds	r3, #36	; 0x24
 800980e:	4618      	mov	r0, r3
 8009810:	f000 fc9c 	bl	800a14c <xTaskRemoveFromEventList>
 8009814:	4603      	mov	r3, r0
 8009816:	2b00      	cmp	r3, #0
 8009818:	d001      	beq.n	800981e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800981a:	f000 fd71 	bl	800a300 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800981e:	7bfb      	ldrb	r3, [r7, #15]
 8009820:	3b01      	subs	r3, #1
 8009822:	b2db      	uxtb	r3, r3
 8009824:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800982a:	2b00      	cmp	r3, #0
 800982c:	dce9      	bgt.n	8009802 <prvUnlockQueue+0x16>
 800982e:	e000      	b.n	8009832 <prvUnlockQueue+0x46>
					break;
 8009830:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	22ff      	movs	r2, #255	; 0xff
 8009836:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800983a:	f001 f8ab 	bl	800a994 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800983e:	f001 f879 	bl	800a934 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009848:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800984a:	e011      	b.n	8009870 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	691b      	ldr	r3, [r3, #16]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d012      	beq.n	800987a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	3310      	adds	r3, #16
 8009858:	4618      	mov	r0, r3
 800985a:	f000 fc77 	bl	800a14c <xTaskRemoveFromEventList>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d001      	beq.n	8009868 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009864:	f000 fd4c 	bl	800a300 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009868:	7bbb      	ldrb	r3, [r7, #14]
 800986a:	3b01      	subs	r3, #1
 800986c:	b2db      	uxtb	r3, r3
 800986e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009870:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009874:	2b00      	cmp	r3, #0
 8009876:	dce9      	bgt.n	800984c <prvUnlockQueue+0x60>
 8009878:	e000      	b.n	800987c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800987a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	22ff      	movs	r2, #255	; 0xff
 8009880:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009884:	f001 f886 	bl	800a994 <vPortExitCritical>
}
 8009888:	bf00      	nop
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009898:	f001 f84c 	bl	800a934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d102      	bne.n	80098aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80098a4:	2301      	movs	r3, #1
 80098a6:	60fb      	str	r3, [r7, #12]
 80098a8:	e001      	b.n	80098ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80098aa:	2300      	movs	r3, #0
 80098ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80098ae:	f001 f871 	bl	800a994 <vPortExitCritical>

	return xReturn;
 80098b2:	68fb      	ldr	r3, [r7, #12]
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3710      	adds	r7, #16
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80098c4:	f001 f836 	bl	800a934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d102      	bne.n	80098da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80098d4:	2301      	movs	r3, #1
 80098d6:	60fb      	str	r3, [r7, #12]
 80098d8:	e001      	b.n	80098de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80098da:	2300      	movs	r3, #0
 80098dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80098de:	f001 f859 	bl	800a994 <vPortExitCritical>

	return xReturn;
 80098e2:	68fb      	ldr	r3, [r7, #12]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b08e      	sub	sp, #56	; 0x38
 80098f0:	af04      	add	r7, sp, #16
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	607a      	str	r2, [r7, #4]
 80098f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80098fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d10a      	bne.n	8009916 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009904:	f383 8811 	msr	BASEPRI, r3
 8009908:	f3bf 8f6f 	isb	sy
 800990c:	f3bf 8f4f 	dsb	sy
 8009910:	623b      	str	r3, [r7, #32]
}
 8009912:	bf00      	nop
 8009914:	e7fe      	b.n	8009914 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009918:	2b00      	cmp	r3, #0
 800991a:	d10a      	bne.n	8009932 <xTaskCreateStatic+0x46>
	__asm volatile
 800991c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009920:	f383 8811 	msr	BASEPRI, r3
 8009924:	f3bf 8f6f 	isb	sy
 8009928:	f3bf 8f4f 	dsb	sy
 800992c:	61fb      	str	r3, [r7, #28]
}
 800992e:	bf00      	nop
 8009930:	e7fe      	b.n	8009930 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009932:	23b4      	movs	r3, #180	; 0xb4
 8009934:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	2bb4      	cmp	r3, #180	; 0xb4
 800993a:	d00a      	beq.n	8009952 <xTaskCreateStatic+0x66>
	__asm volatile
 800993c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009940:	f383 8811 	msr	BASEPRI, r3
 8009944:	f3bf 8f6f 	isb	sy
 8009948:	f3bf 8f4f 	dsb	sy
 800994c:	61bb      	str	r3, [r7, #24]
}
 800994e:	bf00      	nop
 8009950:	e7fe      	b.n	8009950 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009952:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009956:	2b00      	cmp	r3, #0
 8009958:	d01e      	beq.n	8009998 <xTaskCreateStatic+0xac>
 800995a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800995c:	2b00      	cmp	r3, #0
 800995e:	d01b      	beq.n	8009998 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009962:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009966:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009968:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800996a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996c:	2202      	movs	r2, #2
 800996e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009972:	2300      	movs	r3, #0
 8009974:	9303      	str	r3, [sp, #12]
 8009976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009978:	9302      	str	r3, [sp, #8]
 800997a:	f107 0314 	add.w	r3, r7, #20
 800997e:	9301      	str	r3, [sp, #4]
 8009980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009982:	9300      	str	r3, [sp, #0]
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	68b9      	ldr	r1, [r7, #8]
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	f000 f850 	bl	8009a30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009990:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009992:	f000 f8eb 	bl	8009b6c <prvAddNewTaskToReadyList>
 8009996:	e001      	b.n	800999c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009998:	2300      	movs	r3, #0
 800999a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800999c:	697b      	ldr	r3, [r7, #20]
	}
 800999e:	4618      	mov	r0, r3
 80099a0:	3728      	adds	r7, #40	; 0x28
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}

080099a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80099a6:	b580      	push	{r7, lr}
 80099a8:	b08c      	sub	sp, #48	; 0x30
 80099aa:	af04      	add	r7, sp, #16
 80099ac:	60f8      	str	r0, [r7, #12]
 80099ae:	60b9      	str	r1, [r7, #8]
 80099b0:	603b      	str	r3, [r7, #0]
 80099b2:	4613      	mov	r3, r2
 80099b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80099b6:	88fb      	ldrh	r3, [r7, #6]
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	4618      	mov	r0, r3
 80099bc:	f001 f8dc 	bl	800ab78 <pvPortMalloc>
 80099c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d00e      	beq.n	80099e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80099c8:	20b4      	movs	r0, #180	; 0xb4
 80099ca:	f001 f8d5 	bl	800ab78 <pvPortMalloc>
 80099ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80099d0:	69fb      	ldr	r3, [r7, #28]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d003      	beq.n	80099de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80099d6:	69fb      	ldr	r3, [r7, #28]
 80099d8:	697a      	ldr	r2, [r7, #20]
 80099da:	631a      	str	r2, [r3, #48]	; 0x30
 80099dc:	e005      	b.n	80099ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80099de:	6978      	ldr	r0, [r7, #20]
 80099e0:	f001 f996 	bl	800ad10 <vPortFree>
 80099e4:	e001      	b.n	80099ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80099e6:	2300      	movs	r3, #0
 80099e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80099ea:	69fb      	ldr	r3, [r7, #28]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d017      	beq.n	8009a20 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	2200      	movs	r2, #0
 80099f4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80099f8:	88fa      	ldrh	r2, [r7, #6]
 80099fa:	2300      	movs	r3, #0
 80099fc:	9303      	str	r3, [sp, #12]
 80099fe:	69fb      	ldr	r3, [r7, #28]
 8009a00:	9302      	str	r3, [sp, #8]
 8009a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a04:	9301      	str	r3, [sp, #4]
 8009a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a08:	9300      	str	r3, [sp, #0]
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	68b9      	ldr	r1, [r7, #8]
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f000 f80e 	bl	8009a30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009a14:	69f8      	ldr	r0, [r7, #28]
 8009a16:	f000 f8a9 	bl	8009b6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	61bb      	str	r3, [r7, #24]
 8009a1e:	e002      	b.n	8009a26 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009a20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a24:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009a26:	69bb      	ldr	r3, [r7, #24]
	}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3720      	adds	r7, #32
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b088      	sub	sp, #32
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	607a      	str	r2, [r7, #4]
 8009a3c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009a48:	3b01      	subs	r3, #1
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	4413      	add	r3, r2
 8009a4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	f023 0307 	bic.w	r3, r3, #7
 8009a56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009a58:	69bb      	ldr	r3, [r7, #24]
 8009a5a:	f003 0307 	and.w	r3, r3, #7
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d00a      	beq.n	8009a78 <prvInitialiseNewTask+0x48>
	__asm volatile
 8009a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a66:	f383 8811 	msr	BASEPRI, r3
 8009a6a:	f3bf 8f6f 	isb	sy
 8009a6e:	f3bf 8f4f 	dsb	sy
 8009a72:	617b      	str	r3, [r7, #20]
}
 8009a74:	bf00      	nop
 8009a76:	e7fe      	b.n	8009a76 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d01f      	beq.n	8009abe <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a7e:	2300      	movs	r3, #0
 8009a80:	61fb      	str	r3, [r7, #28]
 8009a82:	e012      	b.n	8009aaa <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009a84:	68ba      	ldr	r2, [r7, #8]
 8009a86:	69fb      	ldr	r3, [r7, #28]
 8009a88:	4413      	add	r3, r2
 8009a8a:	7819      	ldrb	r1, [r3, #0]
 8009a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a8e:	69fb      	ldr	r3, [r7, #28]
 8009a90:	4413      	add	r3, r2
 8009a92:	3334      	adds	r3, #52	; 0x34
 8009a94:	460a      	mov	r2, r1
 8009a96:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009a98:	68ba      	ldr	r2, [r7, #8]
 8009a9a:	69fb      	ldr	r3, [r7, #28]
 8009a9c:	4413      	add	r3, r2
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d006      	beq.n	8009ab2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	61fb      	str	r3, [r7, #28]
 8009aaa:	69fb      	ldr	r3, [r7, #28]
 8009aac:	2b0f      	cmp	r3, #15
 8009aae:	d9e9      	bls.n	8009a84 <prvInitialiseNewTask+0x54>
 8009ab0:	e000      	b.n	8009ab4 <prvInitialiseNewTask+0x84>
			{
				break;
 8009ab2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009abc:	e003      	b.n	8009ac6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac8:	2b06      	cmp	r3, #6
 8009aca:	d901      	bls.n	8009ad0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009acc:	2306      	movs	r3, #6
 8009ace:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ad4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ada:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ade:	2200      	movs	r2, #0
 8009ae0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae4:	3304      	adds	r3, #4
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7ff f96d 	bl	8008dc6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aee:	3318      	adds	r3, #24
 8009af0:	4618      	mov	r0, r3
 8009af2:	f7ff f968 	bl	8008dc6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009afa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afe:	f1c3 0207 	rsb	r2, r3, #7
 8009b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b04:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b0a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b16:	2200      	movs	r2, #0
 8009b18:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1e:	334c      	adds	r3, #76	; 0x4c
 8009b20:	2260      	movs	r2, #96	; 0x60
 8009b22:	2100      	movs	r1, #0
 8009b24:	4618      	mov	r0, r3
 8009b26:	f001 fc16 	bl	800b356 <memset>
 8009b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b2c:	4a0c      	ldr	r2, [pc, #48]	; (8009b60 <prvInitialiseNewTask+0x130>)
 8009b2e:	651a      	str	r2, [r3, #80]	; 0x50
 8009b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b32:	4a0c      	ldr	r2, [pc, #48]	; (8009b64 <prvInitialiseNewTask+0x134>)
 8009b34:	655a      	str	r2, [r3, #84]	; 0x54
 8009b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b38:	4a0b      	ldr	r2, [pc, #44]	; (8009b68 <prvInitialiseNewTask+0x138>)
 8009b3a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009b3c:	683a      	ldr	r2, [r7, #0]
 8009b3e:	68f9      	ldr	r1, [r7, #12]
 8009b40:	69b8      	ldr	r0, [r7, #24]
 8009b42:	f000 fdcd 	bl	800a6e0 <pxPortInitialiseStack>
 8009b46:	4602      	mov	r2, r0
 8009b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b4a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d002      	beq.n	8009b58 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b56:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b58:	bf00      	nop
 8009b5a:	3720      	adds	r7, #32
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	0800c898 	.word	0x0800c898
 8009b64:	0800c8b8 	.word	0x0800c8b8
 8009b68:	0800c878 	.word	0x0800c878

08009b6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009b74:	f000 fede 	bl	800a934 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009b78:	4b2a      	ldr	r3, [pc, #168]	; (8009c24 <prvAddNewTaskToReadyList+0xb8>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	4a29      	ldr	r2, [pc, #164]	; (8009c24 <prvAddNewTaskToReadyList+0xb8>)
 8009b80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009b82:	4b29      	ldr	r3, [pc, #164]	; (8009c28 <prvAddNewTaskToReadyList+0xbc>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d109      	bne.n	8009b9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009b8a:	4a27      	ldr	r2, [pc, #156]	; (8009c28 <prvAddNewTaskToReadyList+0xbc>)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009b90:	4b24      	ldr	r3, [pc, #144]	; (8009c24 <prvAddNewTaskToReadyList+0xb8>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d110      	bne.n	8009bba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009b98:	f000 fbd6 	bl	800a348 <prvInitialiseTaskLists>
 8009b9c:	e00d      	b.n	8009bba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009b9e:	4b23      	ldr	r3, [pc, #140]	; (8009c2c <prvAddNewTaskToReadyList+0xc0>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d109      	bne.n	8009bba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009ba6:	4b20      	ldr	r3, [pc, #128]	; (8009c28 <prvAddNewTaskToReadyList+0xbc>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d802      	bhi.n	8009bba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009bb4:	4a1c      	ldr	r2, [pc, #112]	; (8009c28 <prvAddNewTaskToReadyList+0xbc>)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009bba:	4b1d      	ldr	r3, [pc, #116]	; (8009c30 <prvAddNewTaskToReadyList+0xc4>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	4a1b      	ldr	r2, [pc, #108]	; (8009c30 <prvAddNewTaskToReadyList+0xc4>)
 8009bc2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc8:	2201      	movs	r2, #1
 8009bca:	409a      	lsls	r2, r3
 8009bcc:	4b19      	ldr	r3, [pc, #100]	; (8009c34 <prvAddNewTaskToReadyList+0xc8>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	4a18      	ldr	r2, [pc, #96]	; (8009c34 <prvAddNewTaskToReadyList+0xc8>)
 8009bd4:	6013      	str	r3, [r2, #0]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bda:	4613      	mov	r3, r2
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	4413      	add	r3, r2
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	4a15      	ldr	r2, [pc, #84]	; (8009c38 <prvAddNewTaskToReadyList+0xcc>)
 8009be4:	441a      	add	r2, r3
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	3304      	adds	r3, #4
 8009bea:	4619      	mov	r1, r3
 8009bec:	4610      	mov	r0, r2
 8009bee:	f7ff f8f7 	bl	8008de0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009bf2:	f000 fecf 	bl	800a994 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009bf6:	4b0d      	ldr	r3, [pc, #52]	; (8009c2c <prvAddNewTaskToReadyList+0xc0>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d00e      	beq.n	8009c1c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009bfe:	4b0a      	ldr	r3, [pc, #40]	; (8009c28 <prvAddNewTaskToReadyList+0xbc>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d207      	bcs.n	8009c1c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009c0c:	4b0b      	ldr	r3, [pc, #44]	; (8009c3c <prvAddNewTaskToReadyList+0xd0>)
 8009c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c12:	601a      	str	r2, [r3, #0]
 8009c14:	f3bf 8f4f 	dsb	sy
 8009c18:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c1c:	bf00      	nop
 8009c1e:	3708      	adds	r7, #8
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	20000454 	.word	0x20000454
 8009c28:	20000354 	.word	0x20000354
 8009c2c:	20000460 	.word	0x20000460
 8009c30:	20000470 	.word	0x20000470
 8009c34:	2000045c 	.word	0x2000045c
 8009c38:	20000358 	.word	0x20000358
 8009c3c:	e000ed04 	.word	0xe000ed04

08009c40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b084      	sub	sp, #16
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d017      	beq.n	8009c82 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009c52:	4b13      	ldr	r3, [pc, #76]	; (8009ca0 <vTaskDelay+0x60>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d00a      	beq.n	8009c70 <vTaskDelay+0x30>
	__asm volatile
 8009c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5e:	f383 8811 	msr	BASEPRI, r3
 8009c62:	f3bf 8f6f 	isb	sy
 8009c66:	f3bf 8f4f 	dsb	sy
 8009c6a:	60bb      	str	r3, [r7, #8]
}
 8009c6c:	bf00      	nop
 8009c6e:	e7fe      	b.n	8009c6e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009c70:	f000 f884 	bl	8009d7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009c74:	2100      	movs	r1, #0
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 fccc 	bl	800a614 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009c7c:	f000 f88c 	bl	8009d98 <xTaskResumeAll>
 8009c80:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d107      	bne.n	8009c98 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009c88:	4b06      	ldr	r3, [pc, #24]	; (8009ca4 <vTaskDelay+0x64>)
 8009c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c8e:	601a      	str	r2, [r3, #0]
 8009c90:	f3bf 8f4f 	dsb	sy
 8009c94:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009c98:	bf00      	nop
 8009c9a:	3710      	adds	r7, #16
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}
 8009ca0:	2000047c 	.word	0x2000047c
 8009ca4:	e000ed04 	.word	0xe000ed04

08009ca8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b08a      	sub	sp, #40	; 0x28
 8009cac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009cb6:	463a      	mov	r2, r7
 8009cb8:	1d39      	adds	r1, r7, #4
 8009cba:	f107 0308 	add.w	r3, r7, #8
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7f7 f8f0 	bl	8000ea4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009cc4:	6839      	ldr	r1, [r7, #0]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	68ba      	ldr	r2, [r7, #8]
 8009cca:	9202      	str	r2, [sp, #8]
 8009ccc:	9301      	str	r3, [sp, #4]
 8009cce:	2300      	movs	r3, #0
 8009cd0:	9300      	str	r3, [sp, #0]
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	460a      	mov	r2, r1
 8009cd6:	4921      	ldr	r1, [pc, #132]	; (8009d5c <vTaskStartScheduler+0xb4>)
 8009cd8:	4821      	ldr	r0, [pc, #132]	; (8009d60 <vTaskStartScheduler+0xb8>)
 8009cda:	f7ff fe07 	bl	80098ec <xTaskCreateStatic>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	4a20      	ldr	r2, [pc, #128]	; (8009d64 <vTaskStartScheduler+0xbc>)
 8009ce2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009ce4:	4b1f      	ldr	r3, [pc, #124]	; (8009d64 <vTaskStartScheduler+0xbc>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d002      	beq.n	8009cf2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009cec:	2301      	movs	r3, #1
 8009cee:	617b      	str	r3, [r7, #20]
 8009cf0:	e001      	b.n	8009cf6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d11b      	bne.n	8009d34 <vTaskStartScheduler+0x8c>
	__asm volatile
 8009cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d00:	f383 8811 	msr	BASEPRI, r3
 8009d04:	f3bf 8f6f 	isb	sy
 8009d08:	f3bf 8f4f 	dsb	sy
 8009d0c:	613b      	str	r3, [r7, #16]
}
 8009d0e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009d10:	4b15      	ldr	r3, [pc, #84]	; (8009d68 <vTaskStartScheduler+0xc0>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	334c      	adds	r3, #76	; 0x4c
 8009d16:	4a15      	ldr	r2, [pc, #84]	; (8009d6c <vTaskStartScheduler+0xc4>)
 8009d18:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009d1a:	4b15      	ldr	r3, [pc, #84]	; (8009d70 <vTaskStartScheduler+0xc8>)
 8009d1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009d22:	4b14      	ldr	r3, [pc, #80]	; (8009d74 <vTaskStartScheduler+0xcc>)
 8009d24:	2201      	movs	r2, #1
 8009d26:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009d28:	4b13      	ldr	r3, [pc, #76]	; (8009d78 <vTaskStartScheduler+0xd0>)
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009d2e:	f000 fd5f 	bl	800a7f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009d32:	e00e      	b.n	8009d52 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d3a:	d10a      	bne.n	8009d52 <vTaskStartScheduler+0xaa>
	__asm volatile
 8009d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d40:	f383 8811 	msr	BASEPRI, r3
 8009d44:	f3bf 8f6f 	isb	sy
 8009d48:	f3bf 8f4f 	dsb	sy
 8009d4c:	60fb      	str	r3, [r7, #12]
}
 8009d4e:	bf00      	nop
 8009d50:	e7fe      	b.n	8009d50 <vTaskStartScheduler+0xa8>
}
 8009d52:	bf00      	nop
 8009d54:	3718      	adds	r7, #24
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	0800c7d8 	.word	0x0800c7d8
 8009d60:	0800a319 	.word	0x0800a319
 8009d64:	20000478 	.word	0x20000478
 8009d68:	20000354 	.word	0x20000354
 8009d6c:	20000010 	.word	0x20000010
 8009d70:	20000474 	.word	0x20000474
 8009d74:	20000460 	.word	0x20000460
 8009d78:	20000458 	.word	0x20000458

08009d7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009d80:	4b04      	ldr	r3, [pc, #16]	; (8009d94 <vTaskSuspendAll+0x18>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	3301      	adds	r3, #1
 8009d86:	4a03      	ldr	r2, [pc, #12]	; (8009d94 <vTaskSuspendAll+0x18>)
 8009d88:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009d8a:	bf00      	nop
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr
 8009d94:	2000047c 	.word	0x2000047c

08009d98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009da2:	2300      	movs	r3, #0
 8009da4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009da6:	4b41      	ldr	r3, [pc, #260]	; (8009eac <xTaskResumeAll+0x114>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d10a      	bne.n	8009dc4 <xTaskResumeAll+0x2c>
	__asm volatile
 8009dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db2:	f383 8811 	msr	BASEPRI, r3
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	603b      	str	r3, [r7, #0]
}
 8009dc0:	bf00      	nop
 8009dc2:	e7fe      	b.n	8009dc2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009dc4:	f000 fdb6 	bl	800a934 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009dc8:	4b38      	ldr	r3, [pc, #224]	; (8009eac <xTaskResumeAll+0x114>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	3b01      	subs	r3, #1
 8009dce:	4a37      	ldr	r2, [pc, #220]	; (8009eac <xTaskResumeAll+0x114>)
 8009dd0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dd2:	4b36      	ldr	r3, [pc, #216]	; (8009eac <xTaskResumeAll+0x114>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d161      	bne.n	8009e9e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009dda:	4b35      	ldr	r3, [pc, #212]	; (8009eb0 <xTaskResumeAll+0x118>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d05d      	beq.n	8009e9e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009de2:	e02e      	b.n	8009e42 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009de4:	4b33      	ldr	r3, [pc, #204]	; (8009eb4 <xTaskResumeAll+0x11c>)
 8009de6:	68db      	ldr	r3, [r3, #12]
 8009de8:	68db      	ldr	r3, [r3, #12]
 8009dea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	3318      	adds	r3, #24
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7ff f852 	bl	8008e9a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	3304      	adds	r3, #4
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7ff f84d 	bl	8008e9a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e04:	2201      	movs	r2, #1
 8009e06:	409a      	lsls	r2, r3
 8009e08:	4b2b      	ldr	r3, [pc, #172]	; (8009eb8 <xTaskResumeAll+0x120>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	4a2a      	ldr	r2, [pc, #168]	; (8009eb8 <xTaskResumeAll+0x120>)
 8009e10:	6013      	str	r3, [r2, #0]
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e16:	4613      	mov	r3, r2
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	4413      	add	r3, r2
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	4a27      	ldr	r2, [pc, #156]	; (8009ebc <xTaskResumeAll+0x124>)
 8009e20:	441a      	add	r2, r3
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	3304      	adds	r3, #4
 8009e26:	4619      	mov	r1, r3
 8009e28:	4610      	mov	r0, r2
 8009e2a:	f7fe ffd9 	bl	8008de0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e32:	4b23      	ldr	r3, [pc, #140]	; (8009ec0 <xTaskResumeAll+0x128>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d302      	bcc.n	8009e42 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009e3c:	4b21      	ldr	r3, [pc, #132]	; (8009ec4 <xTaskResumeAll+0x12c>)
 8009e3e:	2201      	movs	r2, #1
 8009e40:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e42:	4b1c      	ldr	r3, [pc, #112]	; (8009eb4 <xTaskResumeAll+0x11c>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d1cc      	bne.n	8009de4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d001      	beq.n	8009e54 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009e50:	f000 fb1c 	bl	800a48c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009e54:	4b1c      	ldr	r3, [pc, #112]	; (8009ec8 <xTaskResumeAll+0x130>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d010      	beq.n	8009e82 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009e60:	f000 f836 	bl	8009ed0 <xTaskIncrementTick>
 8009e64:	4603      	mov	r3, r0
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d002      	beq.n	8009e70 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009e6a:	4b16      	ldr	r3, [pc, #88]	; (8009ec4 <xTaskResumeAll+0x12c>)
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	3b01      	subs	r3, #1
 8009e74:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d1f1      	bne.n	8009e60 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009e7c:	4b12      	ldr	r3, [pc, #72]	; (8009ec8 <xTaskResumeAll+0x130>)
 8009e7e:	2200      	movs	r2, #0
 8009e80:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009e82:	4b10      	ldr	r3, [pc, #64]	; (8009ec4 <xTaskResumeAll+0x12c>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d009      	beq.n	8009e9e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009e8e:	4b0f      	ldr	r3, [pc, #60]	; (8009ecc <xTaskResumeAll+0x134>)
 8009e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e94:	601a      	str	r2, [r3, #0]
 8009e96:	f3bf 8f4f 	dsb	sy
 8009e9a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009e9e:	f000 fd79 	bl	800a994 <vPortExitCritical>

	return xAlreadyYielded;
 8009ea2:	68bb      	ldr	r3, [r7, #8]
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}
 8009eac:	2000047c 	.word	0x2000047c
 8009eb0:	20000454 	.word	0x20000454
 8009eb4:	20000414 	.word	0x20000414
 8009eb8:	2000045c 	.word	0x2000045c
 8009ebc:	20000358 	.word	0x20000358
 8009ec0:	20000354 	.word	0x20000354
 8009ec4:	20000468 	.word	0x20000468
 8009ec8:	20000464 	.word	0x20000464
 8009ecc:	e000ed04 	.word	0xe000ed04

08009ed0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b086      	sub	sp, #24
 8009ed4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009eda:	4b4e      	ldr	r3, [pc, #312]	; (800a014 <xTaskIncrementTick+0x144>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	f040 808e 	bne.w	800a000 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009ee4:	4b4c      	ldr	r3, [pc, #304]	; (800a018 <xTaskIncrementTick+0x148>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	3301      	adds	r3, #1
 8009eea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009eec:	4a4a      	ldr	r2, [pc, #296]	; (800a018 <xTaskIncrementTick+0x148>)
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d120      	bne.n	8009f3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009ef8:	4b48      	ldr	r3, [pc, #288]	; (800a01c <xTaskIncrementTick+0x14c>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d00a      	beq.n	8009f18 <xTaskIncrementTick+0x48>
	__asm volatile
 8009f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f06:	f383 8811 	msr	BASEPRI, r3
 8009f0a:	f3bf 8f6f 	isb	sy
 8009f0e:	f3bf 8f4f 	dsb	sy
 8009f12:	603b      	str	r3, [r7, #0]
}
 8009f14:	bf00      	nop
 8009f16:	e7fe      	b.n	8009f16 <xTaskIncrementTick+0x46>
 8009f18:	4b40      	ldr	r3, [pc, #256]	; (800a01c <xTaskIncrementTick+0x14c>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	60fb      	str	r3, [r7, #12]
 8009f1e:	4b40      	ldr	r3, [pc, #256]	; (800a020 <xTaskIncrementTick+0x150>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4a3e      	ldr	r2, [pc, #248]	; (800a01c <xTaskIncrementTick+0x14c>)
 8009f24:	6013      	str	r3, [r2, #0]
 8009f26:	4a3e      	ldr	r2, [pc, #248]	; (800a020 <xTaskIncrementTick+0x150>)
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	6013      	str	r3, [r2, #0]
 8009f2c:	4b3d      	ldr	r3, [pc, #244]	; (800a024 <xTaskIncrementTick+0x154>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	3301      	adds	r3, #1
 8009f32:	4a3c      	ldr	r2, [pc, #240]	; (800a024 <xTaskIncrementTick+0x154>)
 8009f34:	6013      	str	r3, [r2, #0]
 8009f36:	f000 faa9 	bl	800a48c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009f3a:	4b3b      	ldr	r3, [pc, #236]	; (800a028 <xTaskIncrementTick+0x158>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	693a      	ldr	r2, [r7, #16]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d348      	bcc.n	8009fd6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f44:	4b35      	ldr	r3, [pc, #212]	; (800a01c <xTaskIncrementTick+0x14c>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d104      	bne.n	8009f58 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f4e:	4b36      	ldr	r3, [pc, #216]	; (800a028 <xTaskIncrementTick+0x158>)
 8009f50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f54:	601a      	str	r2, [r3, #0]
					break;
 8009f56:	e03e      	b.n	8009fd6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f58:	4b30      	ldr	r3, [pc, #192]	; (800a01c <xTaskIncrementTick+0x14c>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	68db      	ldr	r3, [r3, #12]
 8009f5e:	68db      	ldr	r3, [r3, #12]
 8009f60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009f68:	693a      	ldr	r2, [r7, #16]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d203      	bcs.n	8009f78 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009f70:	4a2d      	ldr	r2, [pc, #180]	; (800a028 <xTaskIncrementTick+0x158>)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009f76:	e02e      	b.n	8009fd6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	3304      	adds	r3, #4
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f7fe ff8c 	bl	8008e9a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d004      	beq.n	8009f94 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	3318      	adds	r3, #24
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f7fe ff83 	bl	8008e9a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f98:	2201      	movs	r2, #1
 8009f9a:	409a      	lsls	r2, r3
 8009f9c:	4b23      	ldr	r3, [pc, #140]	; (800a02c <xTaskIncrementTick+0x15c>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	4a22      	ldr	r2, [pc, #136]	; (800a02c <xTaskIncrementTick+0x15c>)
 8009fa4:	6013      	str	r3, [r2, #0]
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009faa:	4613      	mov	r3, r2
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	4413      	add	r3, r2
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	4a1f      	ldr	r2, [pc, #124]	; (800a030 <xTaskIncrementTick+0x160>)
 8009fb4:	441a      	add	r2, r3
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	3304      	adds	r3, #4
 8009fba:	4619      	mov	r1, r3
 8009fbc:	4610      	mov	r0, r2
 8009fbe:	f7fe ff0f 	bl	8008de0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fc6:	4b1b      	ldr	r3, [pc, #108]	; (800a034 <xTaskIncrementTick+0x164>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d3b9      	bcc.n	8009f44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009fd4:	e7b6      	b.n	8009f44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009fd6:	4b17      	ldr	r3, [pc, #92]	; (800a034 <xTaskIncrementTick+0x164>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fdc:	4914      	ldr	r1, [pc, #80]	; (800a030 <xTaskIncrementTick+0x160>)
 8009fde:	4613      	mov	r3, r2
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	4413      	add	r3, r2
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	440b      	add	r3, r1
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d901      	bls.n	8009ff2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009ff2:	4b11      	ldr	r3, [pc, #68]	; (800a038 <xTaskIncrementTick+0x168>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d007      	beq.n	800a00a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	617b      	str	r3, [r7, #20]
 8009ffe:	e004      	b.n	800a00a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a000:	4b0e      	ldr	r3, [pc, #56]	; (800a03c <xTaskIncrementTick+0x16c>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	3301      	adds	r3, #1
 800a006:	4a0d      	ldr	r2, [pc, #52]	; (800a03c <xTaskIncrementTick+0x16c>)
 800a008:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a00a:	697b      	ldr	r3, [r7, #20]
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3718      	adds	r7, #24
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}
 800a014:	2000047c 	.word	0x2000047c
 800a018:	20000458 	.word	0x20000458
 800a01c:	2000040c 	.word	0x2000040c
 800a020:	20000410 	.word	0x20000410
 800a024:	2000046c 	.word	0x2000046c
 800a028:	20000474 	.word	0x20000474
 800a02c:	2000045c 	.word	0x2000045c
 800a030:	20000358 	.word	0x20000358
 800a034:	20000354 	.word	0x20000354
 800a038:	20000468 	.word	0x20000468
 800a03c:	20000464 	.word	0x20000464

0800a040 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a040:	b480      	push	{r7}
 800a042:	b087      	sub	sp, #28
 800a044:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a046:	4b29      	ldr	r3, [pc, #164]	; (800a0ec <vTaskSwitchContext+0xac>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d003      	beq.n	800a056 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a04e:	4b28      	ldr	r3, [pc, #160]	; (800a0f0 <vTaskSwitchContext+0xb0>)
 800a050:	2201      	movs	r2, #1
 800a052:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a054:	e044      	b.n	800a0e0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800a056:	4b26      	ldr	r3, [pc, #152]	; (800a0f0 <vTaskSwitchContext+0xb0>)
 800a058:	2200      	movs	r2, #0
 800a05a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a05c:	4b25      	ldr	r3, [pc, #148]	; (800a0f4 <vTaskSwitchContext+0xb4>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	fab3 f383 	clz	r3, r3
 800a068:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a06a:	7afb      	ldrb	r3, [r7, #11]
 800a06c:	f1c3 031f 	rsb	r3, r3, #31
 800a070:	617b      	str	r3, [r7, #20]
 800a072:	4921      	ldr	r1, [pc, #132]	; (800a0f8 <vTaskSwitchContext+0xb8>)
 800a074:	697a      	ldr	r2, [r7, #20]
 800a076:	4613      	mov	r3, r2
 800a078:	009b      	lsls	r3, r3, #2
 800a07a:	4413      	add	r3, r2
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	440b      	add	r3, r1
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d10a      	bne.n	800a09c <vTaskSwitchContext+0x5c>
	__asm volatile
 800a086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08a:	f383 8811 	msr	BASEPRI, r3
 800a08e:	f3bf 8f6f 	isb	sy
 800a092:	f3bf 8f4f 	dsb	sy
 800a096:	607b      	str	r3, [r7, #4]
}
 800a098:	bf00      	nop
 800a09a:	e7fe      	b.n	800a09a <vTaskSwitchContext+0x5a>
 800a09c:	697a      	ldr	r2, [r7, #20]
 800a09e:	4613      	mov	r3, r2
 800a0a0:	009b      	lsls	r3, r3, #2
 800a0a2:	4413      	add	r3, r2
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	4a14      	ldr	r2, [pc, #80]	; (800a0f8 <vTaskSwitchContext+0xb8>)
 800a0a8:	4413      	add	r3, r2
 800a0aa:	613b      	str	r3, [r7, #16]
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	685a      	ldr	r2, [r3, #4]
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	605a      	str	r2, [r3, #4]
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	685a      	ldr	r2, [r3, #4]
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	3308      	adds	r3, #8
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d104      	bne.n	800a0cc <vTaskSwitchContext+0x8c>
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	685a      	ldr	r2, [r3, #4]
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	605a      	str	r2, [r3, #4]
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	68db      	ldr	r3, [r3, #12]
 800a0d2:	4a0a      	ldr	r2, [pc, #40]	; (800a0fc <vTaskSwitchContext+0xbc>)
 800a0d4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a0d6:	4b09      	ldr	r3, [pc, #36]	; (800a0fc <vTaskSwitchContext+0xbc>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	334c      	adds	r3, #76	; 0x4c
 800a0dc:	4a08      	ldr	r2, [pc, #32]	; (800a100 <vTaskSwitchContext+0xc0>)
 800a0de:	6013      	str	r3, [r2, #0]
}
 800a0e0:	bf00      	nop
 800a0e2:	371c      	adds	r7, #28
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr
 800a0ec:	2000047c 	.word	0x2000047c
 800a0f0:	20000468 	.word	0x20000468
 800a0f4:	2000045c 	.word	0x2000045c
 800a0f8:	20000358 	.word	0x20000358
 800a0fc:	20000354 	.word	0x20000354
 800a100:	20000010 	.word	0x20000010

0800a104 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d10a      	bne.n	800a12a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a118:	f383 8811 	msr	BASEPRI, r3
 800a11c:	f3bf 8f6f 	isb	sy
 800a120:	f3bf 8f4f 	dsb	sy
 800a124:	60fb      	str	r3, [r7, #12]
}
 800a126:	bf00      	nop
 800a128:	e7fe      	b.n	800a128 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a12a:	4b07      	ldr	r3, [pc, #28]	; (800a148 <vTaskPlaceOnEventList+0x44>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	3318      	adds	r3, #24
 800a130:	4619      	mov	r1, r3
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f7fe fe78 	bl	8008e28 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a138:	2101      	movs	r1, #1
 800a13a:	6838      	ldr	r0, [r7, #0]
 800a13c:	f000 fa6a 	bl	800a614 <prvAddCurrentTaskToDelayedList>
}
 800a140:	bf00      	nop
 800a142:	3710      	adds	r7, #16
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}
 800a148:	20000354 	.word	0x20000354

0800a14c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b086      	sub	sp, #24
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	68db      	ldr	r3, [r3, #12]
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d10a      	bne.n	800a178 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a166:	f383 8811 	msr	BASEPRI, r3
 800a16a:	f3bf 8f6f 	isb	sy
 800a16e:	f3bf 8f4f 	dsb	sy
 800a172:	60fb      	str	r3, [r7, #12]
}
 800a174:	bf00      	nop
 800a176:	e7fe      	b.n	800a176 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	3318      	adds	r3, #24
 800a17c:	4618      	mov	r0, r3
 800a17e:	f7fe fe8c 	bl	8008e9a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a182:	4b1d      	ldr	r3, [pc, #116]	; (800a1f8 <xTaskRemoveFromEventList+0xac>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d11c      	bne.n	800a1c4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	3304      	adds	r3, #4
 800a18e:	4618      	mov	r0, r3
 800a190:	f7fe fe83 	bl	8008e9a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a198:	2201      	movs	r2, #1
 800a19a:	409a      	lsls	r2, r3
 800a19c:	4b17      	ldr	r3, [pc, #92]	; (800a1fc <xTaskRemoveFromEventList+0xb0>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	4a16      	ldr	r2, [pc, #88]	; (800a1fc <xTaskRemoveFromEventList+0xb0>)
 800a1a4:	6013      	str	r3, [r2, #0]
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	4413      	add	r3, r2
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	4a13      	ldr	r2, [pc, #76]	; (800a200 <xTaskRemoveFromEventList+0xb4>)
 800a1b4:	441a      	add	r2, r3
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	3304      	adds	r3, #4
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	4610      	mov	r0, r2
 800a1be:	f7fe fe0f 	bl	8008de0 <vListInsertEnd>
 800a1c2:	e005      	b.n	800a1d0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	3318      	adds	r3, #24
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	480e      	ldr	r0, [pc, #56]	; (800a204 <xTaskRemoveFromEventList+0xb8>)
 800a1cc:	f7fe fe08 	bl	8008de0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1d4:	4b0c      	ldr	r3, [pc, #48]	; (800a208 <xTaskRemoveFromEventList+0xbc>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d905      	bls.n	800a1ea <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a1e2:	4b0a      	ldr	r3, [pc, #40]	; (800a20c <xTaskRemoveFromEventList+0xc0>)
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	601a      	str	r2, [r3, #0]
 800a1e8:	e001      	b.n	800a1ee <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a1ee:	697b      	ldr	r3, [r7, #20]
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3718      	adds	r7, #24
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}
 800a1f8:	2000047c 	.word	0x2000047c
 800a1fc:	2000045c 	.word	0x2000045c
 800a200:	20000358 	.word	0x20000358
 800a204:	20000414 	.word	0x20000414
 800a208:	20000354 	.word	0x20000354
 800a20c:	20000468 	.word	0x20000468

0800a210 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a210:	b480      	push	{r7}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a218:	4b06      	ldr	r3, [pc, #24]	; (800a234 <vTaskInternalSetTimeOutState+0x24>)
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a220:	4b05      	ldr	r3, [pc, #20]	; (800a238 <vTaskInternalSetTimeOutState+0x28>)
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	605a      	str	r2, [r3, #4]
}
 800a228:	bf00      	nop
 800a22a:	370c      	adds	r7, #12
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr
 800a234:	2000046c 	.word	0x2000046c
 800a238:	20000458 	.word	0x20000458

0800a23c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b088      	sub	sp, #32
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d10a      	bne.n	800a262 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a250:	f383 8811 	msr	BASEPRI, r3
 800a254:	f3bf 8f6f 	isb	sy
 800a258:	f3bf 8f4f 	dsb	sy
 800a25c:	613b      	str	r3, [r7, #16]
}
 800a25e:	bf00      	nop
 800a260:	e7fe      	b.n	800a260 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d10a      	bne.n	800a27e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26c:	f383 8811 	msr	BASEPRI, r3
 800a270:	f3bf 8f6f 	isb	sy
 800a274:	f3bf 8f4f 	dsb	sy
 800a278:	60fb      	str	r3, [r7, #12]
}
 800a27a:	bf00      	nop
 800a27c:	e7fe      	b.n	800a27c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a27e:	f000 fb59 	bl	800a934 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a282:	4b1d      	ldr	r3, [pc, #116]	; (800a2f8 <xTaskCheckForTimeOut+0xbc>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	685b      	ldr	r3, [r3, #4]
 800a28c:	69ba      	ldr	r2, [r7, #24]
 800a28e:	1ad3      	subs	r3, r2, r3
 800a290:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a29a:	d102      	bne.n	800a2a2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a29c:	2300      	movs	r3, #0
 800a29e:	61fb      	str	r3, [r7, #28]
 800a2a0:	e023      	b.n	800a2ea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681a      	ldr	r2, [r3, #0]
 800a2a6:	4b15      	ldr	r3, [pc, #84]	; (800a2fc <xTaskCheckForTimeOut+0xc0>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d007      	beq.n	800a2be <xTaskCheckForTimeOut+0x82>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	69ba      	ldr	r2, [r7, #24]
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d302      	bcc.n	800a2be <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	61fb      	str	r3, [r7, #28]
 800a2bc:	e015      	b.n	800a2ea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	697a      	ldr	r2, [r7, #20]
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d20b      	bcs.n	800a2e0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	1ad2      	subs	r2, r2, r3
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f7ff ff9b 	bl	800a210 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	61fb      	str	r3, [r7, #28]
 800a2de:	e004      	b.n	800a2ea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a2ea:	f000 fb53 	bl	800a994 <vPortExitCritical>

	return xReturn;
 800a2ee:	69fb      	ldr	r3, [r7, #28]
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3720      	adds	r7, #32
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}
 800a2f8:	20000458 	.word	0x20000458
 800a2fc:	2000046c 	.word	0x2000046c

0800a300 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a300:	b480      	push	{r7}
 800a302:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a304:	4b03      	ldr	r3, [pc, #12]	; (800a314 <vTaskMissedYield+0x14>)
 800a306:	2201      	movs	r2, #1
 800a308:	601a      	str	r2, [r3, #0]
}
 800a30a:	bf00      	nop
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr
 800a314:	20000468 	.word	0x20000468

0800a318 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b082      	sub	sp, #8
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a320:	f000 f852 	bl	800a3c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a324:	4b06      	ldr	r3, [pc, #24]	; (800a340 <prvIdleTask+0x28>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	2b01      	cmp	r3, #1
 800a32a:	d9f9      	bls.n	800a320 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a32c:	4b05      	ldr	r3, [pc, #20]	; (800a344 <prvIdleTask+0x2c>)
 800a32e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a332:	601a      	str	r2, [r3, #0]
 800a334:	f3bf 8f4f 	dsb	sy
 800a338:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a33c:	e7f0      	b.n	800a320 <prvIdleTask+0x8>
 800a33e:	bf00      	nop
 800a340:	20000358 	.word	0x20000358
 800a344:	e000ed04 	.word	0xe000ed04

0800a348 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b082      	sub	sp, #8
 800a34c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a34e:	2300      	movs	r3, #0
 800a350:	607b      	str	r3, [r7, #4]
 800a352:	e00c      	b.n	800a36e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	4613      	mov	r3, r2
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	4413      	add	r3, r2
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	4a12      	ldr	r2, [pc, #72]	; (800a3a8 <prvInitialiseTaskLists+0x60>)
 800a360:	4413      	add	r3, r2
 800a362:	4618      	mov	r0, r3
 800a364:	f7fe fd0f 	bl	8008d86 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	3301      	adds	r3, #1
 800a36c:	607b      	str	r3, [r7, #4]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2b06      	cmp	r3, #6
 800a372:	d9ef      	bls.n	800a354 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a374:	480d      	ldr	r0, [pc, #52]	; (800a3ac <prvInitialiseTaskLists+0x64>)
 800a376:	f7fe fd06 	bl	8008d86 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a37a:	480d      	ldr	r0, [pc, #52]	; (800a3b0 <prvInitialiseTaskLists+0x68>)
 800a37c:	f7fe fd03 	bl	8008d86 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a380:	480c      	ldr	r0, [pc, #48]	; (800a3b4 <prvInitialiseTaskLists+0x6c>)
 800a382:	f7fe fd00 	bl	8008d86 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a386:	480c      	ldr	r0, [pc, #48]	; (800a3b8 <prvInitialiseTaskLists+0x70>)
 800a388:	f7fe fcfd 	bl	8008d86 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a38c:	480b      	ldr	r0, [pc, #44]	; (800a3bc <prvInitialiseTaskLists+0x74>)
 800a38e:	f7fe fcfa 	bl	8008d86 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a392:	4b0b      	ldr	r3, [pc, #44]	; (800a3c0 <prvInitialiseTaskLists+0x78>)
 800a394:	4a05      	ldr	r2, [pc, #20]	; (800a3ac <prvInitialiseTaskLists+0x64>)
 800a396:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a398:	4b0a      	ldr	r3, [pc, #40]	; (800a3c4 <prvInitialiseTaskLists+0x7c>)
 800a39a:	4a05      	ldr	r2, [pc, #20]	; (800a3b0 <prvInitialiseTaskLists+0x68>)
 800a39c:	601a      	str	r2, [r3, #0]
}
 800a39e:	bf00      	nop
 800a3a0:	3708      	adds	r7, #8
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	20000358 	.word	0x20000358
 800a3ac:	200003e4 	.word	0x200003e4
 800a3b0:	200003f8 	.word	0x200003f8
 800a3b4:	20000414 	.word	0x20000414
 800a3b8:	20000428 	.word	0x20000428
 800a3bc:	20000440 	.word	0x20000440
 800a3c0:	2000040c 	.word	0x2000040c
 800a3c4:	20000410 	.word	0x20000410

0800a3c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a3ce:	e019      	b.n	800a404 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a3d0:	f000 fab0 	bl	800a934 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3d4:	4b10      	ldr	r3, [pc, #64]	; (800a418 <prvCheckTasksWaitingTermination+0x50>)
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	68db      	ldr	r3, [r3, #12]
 800a3da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	3304      	adds	r3, #4
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f7fe fd5a 	bl	8008e9a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a3e6:	4b0d      	ldr	r3, [pc, #52]	; (800a41c <prvCheckTasksWaitingTermination+0x54>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	3b01      	subs	r3, #1
 800a3ec:	4a0b      	ldr	r2, [pc, #44]	; (800a41c <prvCheckTasksWaitingTermination+0x54>)
 800a3ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a3f0:	4b0b      	ldr	r3, [pc, #44]	; (800a420 <prvCheckTasksWaitingTermination+0x58>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	3b01      	subs	r3, #1
 800a3f6:	4a0a      	ldr	r2, [pc, #40]	; (800a420 <prvCheckTasksWaitingTermination+0x58>)
 800a3f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a3fa:	f000 facb 	bl	800a994 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f000 f810 	bl	800a424 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a404:	4b06      	ldr	r3, [pc, #24]	; (800a420 <prvCheckTasksWaitingTermination+0x58>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d1e1      	bne.n	800a3d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a40c:	bf00      	nop
 800a40e:	bf00      	nop
 800a410:	3708      	adds	r7, #8
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	20000428 	.word	0x20000428
 800a41c:	20000454 	.word	0x20000454
 800a420:	2000043c 	.word	0x2000043c

0800a424 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	334c      	adds	r3, #76	; 0x4c
 800a430:	4618      	mov	r0, r3
 800a432:	f001 f851 	bl	800b4d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d108      	bne.n	800a452 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a444:	4618      	mov	r0, r3
 800a446:	f000 fc63 	bl	800ad10 <vPortFree>
				vPortFree( pxTCB );
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f000 fc60 	bl	800ad10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a450:	e018      	b.n	800a484 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a458:	2b01      	cmp	r3, #1
 800a45a:	d103      	bne.n	800a464 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f000 fc57 	bl	800ad10 <vPortFree>
	}
 800a462:	e00f      	b.n	800a484 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a46a:	2b02      	cmp	r3, #2
 800a46c:	d00a      	beq.n	800a484 <prvDeleteTCB+0x60>
	__asm volatile
 800a46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a472:	f383 8811 	msr	BASEPRI, r3
 800a476:	f3bf 8f6f 	isb	sy
 800a47a:	f3bf 8f4f 	dsb	sy
 800a47e:	60fb      	str	r3, [r7, #12]
}
 800a480:	bf00      	nop
 800a482:	e7fe      	b.n	800a482 <prvDeleteTCB+0x5e>
	}
 800a484:	bf00      	nop
 800a486:	3710      	adds	r7, #16
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a492:	4b0c      	ldr	r3, [pc, #48]	; (800a4c4 <prvResetNextTaskUnblockTime+0x38>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d104      	bne.n	800a4a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a49c:	4b0a      	ldr	r3, [pc, #40]	; (800a4c8 <prvResetNextTaskUnblockTime+0x3c>)
 800a49e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a4a4:	e008      	b.n	800a4b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4a6:	4b07      	ldr	r3, [pc, #28]	; (800a4c4 <prvResetNextTaskUnblockTime+0x38>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	68db      	ldr	r3, [r3, #12]
 800a4ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	4a04      	ldr	r2, [pc, #16]	; (800a4c8 <prvResetNextTaskUnblockTime+0x3c>)
 800a4b6:	6013      	str	r3, [r2, #0]
}
 800a4b8:	bf00      	nop
 800a4ba:	370c      	adds	r7, #12
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr
 800a4c4:	2000040c 	.word	0x2000040c
 800a4c8:	20000474 	.word	0x20000474

0800a4cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a4d2:	4b0b      	ldr	r3, [pc, #44]	; (800a500 <xTaskGetSchedulerState+0x34>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d102      	bne.n	800a4e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a4da:	2301      	movs	r3, #1
 800a4dc:	607b      	str	r3, [r7, #4]
 800a4de:	e008      	b.n	800a4f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4e0:	4b08      	ldr	r3, [pc, #32]	; (800a504 <xTaskGetSchedulerState+0x38>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d102      	bne.n	800a4ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a4e8:	2302      	movs	r3, #2
 800a4ea:	607b      	str	r3, [r7, #4]
 800a4ec:	e001      	b.n	800a4f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a4f2:	687b      	ldr	r3, [r7, #4]
	}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	370c      	adds	r7, #12
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr
 800a500:	20000460 	.word	0x20000460
 800a504:	2000047c 	.word	0x2000047c

0800a508 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b086      	sub	sp, #24
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a514:	2300      	movs	r3, #0
 800a516:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d06e      	beq.n	800a5fc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a51e:	4b3a      	ldr	r3, [pc, #232]	; (800a608 <xTaskPriorityDisinherit+0x100>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	693a      	ldr	r2, [r7, #16]
 800a524:	429a      	cmp	r2, r3
 800a526:	d00a      	beq.n	800a53e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a52c:	f383 8811 	msr	BASEPRI, r3
 800a530:	f3bf 8f6f 	isb	sy
 800a534:	f3bf 8f4f 	dsb	sy
 800a538:	60fb      	str	r3, [r7, #12]
}
 800a53a:	bf00      	nop
 800a53c:	e7fe      	b.n	800a53c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a542:	2b00      	cmp	r3, #0
 800a544:	d10a      	bne.n	800a55c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a54a:	f383 8811 	msr	BASEPRI, r3
 800a54e:	f3bf 8f6f 	isb	sy
 800a552:	f3bf 8f4f 	dsb	sy
 800a556:	60bb      	str	r3, [r7, #8]
}
 800a558:	bf00      	nop
 800a55a:	e7fe      	b.n	800a55a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a560:	1e5a      	subs	r2, r3, #1
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a56e:	429a      	cmp	r2, r3
 800a570:	d044      	beq.n	800a5fc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a576:	2b00      	cmp	r3, #0
 800a578:	d140      	bne.n	800a5fc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	3304      	adds	r3, #4
 800a57e:	4618      	mov	r0, r3
 800a580:	f7fe fc8b 	bl	8008e9a <uxListRemove>
 800a584:	4603      	mov	r3, r0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d115      	bne.n	800a5b6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a58e:	491f      	ldr	r1, [pc, #124]	; (800a60c <xTaskPriorityDisinherit+0x104>)
 800a590:	4613      	mov	r3, r2
 800a592:	009b      	lsls	r3, r3, #2
 800a594:	4413      	add	r3, r2
 800a596:	009b      	lsls	r3, r3, #2
 800a598:	440b      	add	r3, r1
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d10a      	bne.n	800a5b6 <xTaskPriorityDisinherit+0xae>
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	fa02 f303 	lsl.w	r3, r2, r3
 800a5aa:	43da      	mvns	r2, r3
 800a5ac:	4b18      	ldr	r3, [pc, #96]	; (800a610 <xTaskPriorityDisinherit+0x108>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4013      	ands	r3, r2
 800a5b2:	4a17      	ldr	r2, [pc, #92]	; (800a610 <xTaskPriorityDisinherit+0x108>)
 800a5b4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c2:	f1c3 0207 	rsb	r2, r3, #7
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	409a      	lsls	r2, r3
 800a5d2:	4b0f      	ldr	r3, [pc, #60]	; (800a610 <xTaskPriorityDisinherit+0x108>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	4a0d      	ldr	r2, [pc, #52]	; (800a610 <xTaskPriorityDisinherit+0x108>)
 800a5da:	6013      	str	r3, [r2, #0]
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5e0:	4613      	mov	r3, r2
 800a5e2:	009b      	lsls	r3, r3, #2
 800a5e4:	4413      	add	r3, r2
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	4a08      	ldr	r2, [pc, #32]	; (800a60c <xTaskPriorityDisinherit+0x104>)
 800a5ea:	441a      	add	r2, r3
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	3304      	adds	r3, #4
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	4610      	mov	r0, r2
 800a5f4:	f7fe fbf4 	bl	8008de0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a5fc:	697b      	ldr	r3, [r7, #20]
	}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3718      	adds	r7, #24
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
 800a606:	bf00      	nop
 800a608:	20000354 	.word	0x20000354
 800a60c:	20000358 	.word	0x20000358
 800a610:	2000045c 	.word	0x2000045c

0800a614 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a61e:	4b29      	ldr	r3, [pc, #164]	; (800a6c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a624:	4b28      	ldr	r3, [pc, #160]	; (800a6c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	3304      	adds	r3, #4
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7fe fc35 	bl	8008e9a <uxListRemove>
 800a630:	4603      	mov	r3, r0
 800a632:	2b00      	cmp	r3, #0
 800a634:	d10b      	bne.n	800a64e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a636:	4b24      	ldr	r3, [pc, #144]	; (800a6c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a63c:	2201      	movs	r2, #1
 800a63e:	fa02 f303 	lsl.w	r3, r2, r3
 800a642:	43da      	mvns	r2, r3
 800a644:	4b21      	ldr	r3, [pc, #132]	; (800a6cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4013      	ands	r3, r2
 800a64a:	4a20      	ldr	r2, [pc, #128]	; (800a6cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800a64c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a654:	d10a      	bne.n	800a66c <prvAddCurrentTaskToDelayedList+0x58>
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d007      	beq.n	800a66c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a65c:	4b1a      	ldr	r3, [pc, #104]	; (800a6c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	3304      	adds	r3, #4
 800a662:	4619      	mov	r1, r3
 800a664:	481a      	ldr	r0, [pc, #104]	; (800a6d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a666:	f7fe fbbb 	bl	8008de0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a66a:	e026      	b.n	800a6ba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a66c:	68fa      	ldr	r2, [r7, #12]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	4413      	add	r3, r2
 800a672:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a674:	4b14      	ldr	r3, [pc, #80]	; (800a6c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	68ba      	ldr	r2, [r7, #8]
 800a67a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a67c:	68ba      	ldr	r2, [r7, #8]
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	429a      	cmp	r2, r3
 800a682:	d209      	bcs.n	800a698 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a684:	4b13      	ldr	r3, [pc, #76]	; (800a6d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a686:	681a      	ldr	r2, [r3, #0]
 800a688:	4b0f      	ldr	r3, [pc, #60]	; (800a6c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	3304      	adds	r3, #4
 800a68e:	4619      	mov	r1, r3
 800a690:	4610      	mov	r0, r2
 800a692:	f7fe fbc9 	bl	8008e28 <vListInsert>
}
 800a696:	e010      	b.n	800a6ba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a698:	4b0f      	ldr	r3, [pc, #60]	; (800a6d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a69a:	681a      	ldr	r2, [r3, #0]
 800a69c:	4b0a      	ldr	r3, [pc, #40]	; (800a6c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	3304      	adds	r3, #4
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	4610      	mov	r0, r2
 800a6a6:	f7fe fbbf 	bl	8008e28 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a6aa:	4b0c      	ldr	r3, [pc, #48]	; (800a6dc <prvAddCurrentTaskToDelayedList+0xc8>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	68ba      	ldr	r2, [r7, #8]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d202      	bcs.n	800a6ba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a6b4:	4a09      	ldr	r2, [pc, #36]	; (800a6dc <prvAddCurrentTaskToDelayedList+0xc8>)
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	6013      	str	r3, [r2, #0]
}
 800a6ba:	bf00      	nop
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	20000458 	.word	0x20000458
 800a6c8:	20000354 	.word	0x20000354
 800a6cc:	2000045c 	.word	0x2000045c
 800a6d0:	20000440 	.word	0x20000440
 800a6d4:	20000410 	.word	0x20000410
 800a6d8:	2000040c 	.word	0x2000040c
 800a6dc:	20000474 	.word	0x20000474

0800a6e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b085      	sub	sp, #20
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	60f8      	str	r0, [r7, #12]
 800a6e8:	60b9      	str	r1, [r7, #8]
 800a6ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	3b04      	subs	r3, #4
 800a6f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a6f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	3b04      	subs	r3, #4
 800a6fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	f023 0201 	bic.w	r2, r3, #1
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	3b04      	subs	r3, #4
 800a70e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a710:	4a0c      	ldr	r2, [pc, #48]	; (800a744 <pxPortInitialiseStack+0x64>)
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	3b14      	subs	r3, #20
 800a71a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a71c:	687a      	ldr	r2, [r7, #4]
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	3b04      	subs	r3, #4
 800a726:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f06f 0202 	mvn.w	r2, #2
 800a72e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	3b20      	subs	r3, #32
 800a734:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a736:	68fb      	ldr	r3, [r7, #12]
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3714      	adds	r7, #20
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr
 800a744:	0800a749 	.word	0x0800a749

0800a748 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a748:	b480      	push	{r7}
 800a74a:	b085      	sub	sp, #20
 800a74c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a74e:	2300      	movs	r3, #0
 800a750:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a752:	4b12      	ldr	r3, [pc, #72]	; (800a79c <prvTaskExitError+0x54>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a75a:	d00a      	beq.n	800a772 <prvTaskExitError+0x2a>
	__asm volatile
 800a75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a760:	f383 8811 	msr	BASEPRI, r3
 800a764:	f3bf 8f6f 	isb	sy
 800a768:	f3bf 8f4f 	dsb	sy
 800a76c:	60fb      	str	r3, [r7, #12]
}
 800a76e:	bf00      	nop
 800a770:	e7fe      	b.n	800a770 <prvTaskExitError+0x28>
	__asm volatile
 800a772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a776:	f383 8811 	msr	BASEPRI, r3
 800a77a:	f3bf 8f6f 	isb	sy
 800a77e:	f3bf 8f4f 	dsb	sy
 800a782:	60bb      	str	r3, [r7, #8]
}
 800a784:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a786:	bf00      	nop
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d0fc      	beq.n	800a788 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a78e:	bf00      	nop
 800a790:	bf00      	nop
 800a792:	3714      	adds	r7, #20
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr
 800a79c:	2000000c 	.word	0x2000000c

0800a7a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a7a0:	4b07      	ldr	r3, [pc, #28]	; (800a7c0 <pxCurrentTCBConst2>)
 800a7a2:	6819      	ldr	r1, [r3, #0]
 800a7a4:	6808      	ldr	r0, [r1, #0]
 800a7a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7aa:	f380 8809 	msr	PSP, r0
 800a7ae:	f3bf 8f6f 	isb	sy
 800a7b2:	f04f 0000 	mov.w	r0, #0
 800a7b6:	f380 8811 	msr	BASEPRI, r0
 800a7ba:	4770      	bx	lr
 800a7bc:	f3af 8000 	nop.w

0800a7c0 <pxCurrentTCBConst2>:
 800a7c0:	20000354 	.word	0x20000354
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a7c4:	bf00      	nop
 800a7c6:	bf00      	nop

0800a7c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a7c8:	4808      	ldr	r0, [pc, #32]	; (800a7ec <prvPortStartFirstTask+0x24>)
 800a7ca:	6800      	ldr	r0, [r0, #0]
 800a7cc:	6800      	ldr	r0, [r0, #0]
 800a7ce:	f380 8808 	msr	MSP, r0
 800a7d2:	f04f 0000 	mov.w	r0, #0
 800a7d6:	f380 8814 	msr	CONTROL, r0
 800a7da:	b662      	cpsie	i
 800a7dc:	b661      	cpsie	f
 800a7de:	f3bf 8f4f 	dsb	sy
 800a7e2:	f3bf 8f6f 	isb	sy
 800a7e6:	df00      	svc	0
 800a7e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a7ea:	bf00      	nop
 800a7ec:	e000ed08 	.word	0xe000ed08

0800a7f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b086      	sub	sp, #24
 800a7f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a7f6:	4b46      	ldr	r3, [pc, #280]	; (800a910 <xPortStartScheduler+0x120>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4a46      	ldr	r2, [pc, #280]	; (800a914 <xPortStartScheduler+0x124>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d10a      	bne.n	800a816 <xPortStartScheduler+0x26>
	__asm volatile
 800a800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a804:	f383 8811 	msr	BASEPRI, r3
 800a808:	f3bf 8f6f 	isb	sy
 800a80c:	f3bf 8f4f 	dsb	sy
 800a810:	613b      	str	r3, [r7, #16]
}
 800a812:	bf00      	nop
 800a814:	e7fe      	b.n	800a814 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a816:	4b3e      	ldr	r3, [pc, #248]	; (800a910 <xPortStartScheduler+0x120>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a3f      	ldr	r2, [pc, #252]	; (800a918 <xPortStartScheduler+0x128>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d10a      	bne.n	800a836 <xPortStartScheduler+0x46>
	__asm volatile
 800a820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a824:	f383 8811 	msr	BASEPRI, r3
 800a828:	f3bf 8f6f 	isb	sy
 800a82c:	f3bf 8f4f 	dsb	sy
 800a830:	60fb      	str	r3, [r7, #12]
}
 800a832:	bf00      	nop
 800a834:	e7fe      	b.n	800a834 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a836:	4b39      	ldr	r3, [pc, #228]	; (800a91c <xPortStartScheduler+0x12c>)
 800a838:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	b2db      	uxtb	r3, r3
 800a840:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	22ff      	movs	r2, #255	; 0xff
 800a846:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a850:	78fb      	ldrb	r3, [r7, #3]
 800a852:	b2db      	uxtb	r3, r3
 800a854:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a858:	b2da      	uxtb	r2, r3
 800a85a:	4b31      	ldr	r3, [pc, #196]	; (800a920 <xPortStartScheduler+0x130>)
 800a85c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a85e:	4b31      	ldr	r3, [pc, #196]	; (800a924 <xPortStartScheduler+0x134>)
 800a860:	2207      	movs	r2, #7
 800a862:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a864:	e009      	b.n	800a87a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a866:	4b2f      	ldr	r3, [pc, #188]	; (800a924 <xPortStartScheduler+0x134>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	3b01      	subs	r3, #1
 800a86c:	4a2d      	ldr	r2, [pc, #180]	; (800a924 <xPortStartScheduler+0x134>)
 800a86e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a870:	78fb      	ldrb	r3, [r7, #3]
 800a872:	b2db      	uxtb	r3, r3
 800a874:	005b      	lsls	r3, r3, #1
 800a876:	b2db      	uxtb	r3, r3
 800a878:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a87a:	78fb      	ldrb	r3, [r7, #3]
 800a87c:	b2db      	uxtb	r3, r3
 800a87e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a882:	2b80      	cmp	r3, #128	; 0x80
 800a884:	d0ef      	beq.n	800a866 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a886:	4b27      	ldr	r3, [pc, #156]	; (800a924 <xPortStartScheduler+0x134>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f1c3 0307 	rsb	r3, r3, #7
 800a88e:	2b04      	cmp	r3, #4
 800a890:	d00a      	beq.n	800a8a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a896:	f383 8811 	msr	BASEPRI, r3
 800a89a:	f3bf 8f6f 	isb	sy
 800a89e:	f3bf 8f4f 	dsb	sy
 800a8a2:	60bb      	str	r3, [r7, #8]
}
 800a8a4:	bf00      	nop
 800a8a6:	e7fe      	b.n	800a8a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a8a8:	4b1e      	ldr	r3, [pc, #120]	; (800a924 <xPortStartScheduler+0x134>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	021b      	lsls	r3, r3, #8
 800a8ae:	4a1d      	ldr	r2, [pc, #116]	; (800a924 <xPortStartScheduler+0x134>)
 800a8b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a8b2:	4b1c      	ldr	r3, [pc, #112]	; (800a924 <xPortStartScheduler+0x134>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a8ba:	4a1a      	ldr	r2, [pc, #104]	; (800a924 <xPortStartScheduler+0x134>)
 800a8bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	b2da      	uxtb	r2, r3
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a8c6:	4b18      	ldr	r3, [pc, #96]	; (800a928 <xPortStartScheduler+0x138>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a17      	ldr	r2, [pc, #92]	; (800a928 <xPortStartScheduler+0x138>)
 800a8cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a8d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a8d2:	4b15      	ldr	r3, [pc, #84]	; (800a928 <xPortStartScheduler+0x138>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4a14      	ldr	r2, [pc, #80]	; (800a928 <xPortStartScheduler+0x138>)
 800a8d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a8dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a8de:	f000 f8dd 	bl	800aa9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a8e2:	4b12      	ldr	r3, [pc, #72]	; (800a92c <xPortStartScheduler+0x13c>)
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a8e8:	f000 f8fc 	bl	800aae4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a8ec:	4b10      	ldr	r3, [pc, #64]	; (800a930 <xPortStartScheduler+0x140>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a0f      	ldr	r2, [pc, #60]	; (800a930 <xPortStartScheduler+0x140>)
 800a8f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a8f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a8f8:	f7ff ff66 	bl	800a7c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a8fc:	f7ff fba0 	bl	800a040 <vTaskSwitchContext>
	prvTaskExitError();
 800a900:	f7ff ff22 	bl	800a748 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a904:	2300      	movs	r3, #0
}
 800a906:	4618      	mov	r0, r3
 800a908:	3718      	adds	r7, #24
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
 800a90e:	bf00      	nop
 800a910:	e000ed00 	.word	0xe000ed00
 800a914:	410fc271 	.word	0x410fc271
 800a918:	410fc270 	.word	0x410fc270
 800a91c:	e000e400 	.word	0xe000e400
 800a920:	20000480 	.word	0x20000480
 800a924:	20000484 	.word	0x20000484
 800a928:	e000ed20 	.word	0xe000ed20
 800a92c:	2000000c 	.word	0x2000000c
 800a930:	e000ef34 	.word	0xe000ef34

0800a934 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
	__asm volatile
 800a93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a93e:	f383 8811 	msr	BASEPRI, r3
 800a942:	f3bf 8f6f 	isb	sy
 800a946:	f3bf 8f4f 	dsb	sy
 800a94a:	607b      	str	r3, [r7, #4]
}
 800a94c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a94e:	4b0f      	ldr	r3, [pc, #60]	; (800a98c <vPortEnterCritical+0x58>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	3301      	adds	r3, #1
 800a954:	4a0d      	ldr	r2, [pc, #52]	; (800a98c <vPortEnterCritical+0x58>)
 800a956:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a958:	4b0c      	ldr	r3, [pc, #48]	; (800a98c <vPortEnterCritical+0x58>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d10f      	bne.n	800a980 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a960:	4b0b      	ldr	r3, [pc, #44]	; (800a990 <vPortEnterCritical+0x5c>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	b2db      	uxtb	r3, r3
 800a966:	2b00      	cmp	r3, #0
 800a968:	d00a      	beq.n	800a980 <vPortEnterCritical+0x4c>
	__asm volatile
 800a96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a96e:	f383 8811 	msr	BASEPRI, r3
 800a972:	f3bf 8f6f 	isb	sy
 800a976:	f3bf 8f4f 	dsb	sy
 800a97a:	603b      	str	r3, [r7, #0]
}
 800a97c:	bf00      	nop
 800a97e:	e7fe      	b.n	800a97e <vPortEnterCritical+0x4a>
	}
}
 800a980:	bf00      	nop
 800a982:	370c      	adds	r7, #12
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr
 800a98c:	2000000c 	.word	0x2000000c
 800a990:	e000ed04 	.word	0xe000ed04

0800a994 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a99a:	4b12      	ldr	r3, [pc, #72]	; (800a9e4 <vPortExitCritical+0x50>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d10a      	bne.n	800a9b8 <vPortExitCritical+0x24>
	__asm volatile
 800a9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a6:	f383 8811 	msr	BASEPRI, r3
 800a9aa:	f3bf 8f6f 	isb	sy
 800a9ae:	f3bf 8f4f 	dsb	sy
 800a9b2:	607b      	str	r3, [r7, #4]
}
 800a9b4:	bf00      	nop
 800a9b6:	e7fe      	b.n	800a9b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a9b8:	4b0a      	ldr	r3, [pc, #40]	; (800a9e4 <vPortExitCritical+0x50>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	3b01      	subs	r3, #1
 800a9be:	4a09      	ldr	r2, [pc, #36]	; (800a9e4 <vPortExitCritical+0x50>)
 800a9c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a9c2:	4b08      	ldr	r3, [pc, #32]	; (800a9e4 <vPortExitCritical+0x50>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d105      	bne.n	800a9d6 <vPortExitCritical+0x42>
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	f383 8811 	msr	BASEPRI, r3
}
 800a9d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a9d6:	bf00      	nop
 800a9d8:	370c      	adds	r7, #12
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	2000000c 	.word	0x2000000c
	...

0800a9f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a9f0:	f3ef 8009 	mrs	r0, PSP
 800a9f4:	f3bf 8f6f 	isb	sy
 800a9f8:	4b15      	ldr	r3, [pc, #84]	; (800aa50 <pxCurrentTCBConst>)
 800a9fa:	681a      	ldr	r2, [r3, #0]
 800a9fc:	f01e 0f10 	tst.w	lr, #16
 800aa00:	bf08      	it	eq
 800aa02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aa06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa0a:	6010      	str	r0, [r2, #0]
 800aa0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aa10:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aa14:	f380 8811 	msr	BASEPRI, r0
 800aa18:	f3bf 8f4f 	dsb	sy
 800aa1c:	f3bf 8f6f 	isb	sy
 800aa20:	f7ff fb0e 	bl	800a040 <vTaskSwitchContext>
 800aa24:	f04f 0000 	mov.w	r0, #0
 800aa28:	f380 8811 	msr	BASEPRI, r0
 800aa2c:	bc09      	pop	{r0, r3}
 800aa2e:	6819      	ldr	r1, [r3, #0]
 800aa30:	6808      	ldr	r0, [r1, #0]
 800aa32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa36:	f01e 0f10 	tst.w	lr, #16
 800aa3a:	bf08      	it	eq
 800aa3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aa40:	f380 8809 	msr	PSP, r0
 800aa44:	f3bf 8f6f 	isb	sy
 800aa48:	4770      	bx	lr
 800aa4a:	bf00      	nop
 800aa4c:	f3af 8000 	nop.w

0800aa50 <pxCurrentTCBConst>:
 800aa50:	20000354 	.word	0x20000354
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aa54:	bf00      	nop
 800aa56:	bf00      	nop

0800aa58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
	__asm volatile
 800aa5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa62:	f383 8811 	msr	BASEPRI, r3
 800aa66:	f3bf 8f6f 	isb	sy
 800aa6a:	f3bf 8f4f 	dsb	sy
 800aa6e:	607b      	str	r3, [r7, #4]
}
 800aa70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aa72:	f7ff fa2d 	bl	8009ed0 <xTaskIncrementTick>
 800aa76:	4603      	mov	r3, r0
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d003      	beq.n	800aa84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa7c:	4b06      	ldr	r3, [pc, #24]	; (800aa98 <SysTick_Handler+0x40>)
 800aa7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa82:	601a      	str	r2, [r3, #0]
 800aa84:	2300      	movs	r3, #0
 800aa86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	f383 8811 	msr	BASEPRI, r3
}
 800aa8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aa90:	bf00      	nop
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	e000ed04 	.word	0xe000ed04

0800aa9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aaa0:	4b0b      	ldr	r3, [pc, #44]	; (800aad0 <vPortSetupTimerInterrupt+0x34>)
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aaa6:	4b0b      	ldr	r3, [pc, #44]	; (800aad4 <vPortSetupTimerInterrupt+0x38>)
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aaac:	4b0a      	ldr	r3, [pc, #40]	; (800aad8 <vPortSetupTimerInterrupt+0x3c>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a0a      	ldr	r2, [pc, #40]	; (800aadc <vPortSetupTimerInterrupt+0x40>)
 800aab2:	fba2 2303 	umull	r2, r3, r2, r3
 800aab6:	099b      	lsrs	r3, r3, #6
 800aab8:	4a09      	ldr	r2, [pc, #36]	; (800aae0 <vPortSetupTimerInterrupt+0x44>)
 800aaba:	3b01      	subs	r3, #1
 800aabc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aabe:	4b04      	ldr	r3, [pc, #16]	; (800aad0 <vPortSetupTimerInterrupt+0x34>)
 800aac0:	2207      	movs	r2, #7
 800aac2:	601a      	str	r2, [r3, #0]
}
 800aac4:	bf00      	nop
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr
 800aace:	bf00      	nop
 800aad0:	e000e010 	.word	0xe000e010
 800aad4:	e000e018 	.word	0xe000e018
 800aad8:	20000000 	.word	0x20000000
 800aadc:	10624dd3 	.word	0x10624dd3
 800aae0:	e000e014 	.word	0xe000e014

0800aae4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aae4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aaf4 <vPortEnableVFP+0x10>
 800aae8:	6801      	ldr	r1, [r0, #0]
 800aaea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aaee:	6001      	str	r1, [r0, #0]
 800aaf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aaf2:	bf00      	nop
 800aaf4:	e000ed88 	.word	0xe000ed88

0800aaf8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aaf8:	b480      	push	{r7}
 800aafa:	b085      	sub	sp, #20
 800aafc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aafe:	f3ef 8305 	mrs	r3, IPSR
 800ab02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2b0f      	cmp	r3, #15
 800ab08:	d914      	bls.n	800ab34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ab0a:	4a17      	ldr	r2, [pc, #92]	; (800ab68 <vPortValidateInterruptPriority+0x70>)
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	4413      	add	r3, r2
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ab14:	4b15      	ldr	r3, [pc, #84]	; (800ab6c <vPortValidateInterruptPriority+0x74>)
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	7afa      	ldrb	r2, [r7, #11]
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d20a      	bcs.n	800ab34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ab1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab22:	f383 8811 	msr	BASEPRI, r3
 800ab26:	f3bf 8f6f 	isb	sy
 800ab2a:	f3bf 8f4f 	dsb	sy
 800ab2e:	607b      	str	r3, [r7, #4]
}
 800ab30:	bf00      	nop
 800ab32:	e7fe      	b.n	800ab32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab34:	4b0e      	ldr	r3, [pc, #56]	; (800ab70 <vPortValidateInterruptPriority+0x78>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ab3c:	4b0d      	ldr	r3, [pc, #52]	; (800ab74 <vPortValidateInterruptPriority+0x7c>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d90a      	bls.n	800ab5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ab44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab48:	f383 8811 	msr	BASEPRI, r3
 800ab4c:	f3bf 8f6f 	isb	sy
 800ab50:	f3bf 8f4f 	dsb	sy
 800ab54:	603b      	str	r3, [r7, #0]
}
 800ab56:	bf00      	nop
 800ab58:	e7fe      	b.n	800ab58 <vPortValidateInterruptPriority+0x60>
	}
 800ab5a:	bf00      	nop
 800ab5c:	3714      	adds	r7, #20
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr
 800ab66:	bf00      	nop
 800ab68:	e000e3f0 	.word	0xe000e3f0
 800ab6c:	20000480 	.word	0x20000480
 800ab70:	e000ed0c 	.word	0xe000ed0c
 800ab74:	20000484 	.word	0x20000484

0800ab78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b08a      	sub	sp, #40	; 0x28
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ab80:	2300      	movs	r3, #0
 800ab82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ab84:	f7ff f8fa 	bl	8009d7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ab88:	4b5b      	ldr	r3, [pc, #364]	; (800acf8 <pvPortMalloc+0x180>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d101      	bne.n	800ab94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ab90:	f000 f920 	bl	800add4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ab94:	4b59      	ldr	r3, [pc, #356]	; (800acfc <pvPortMalloc+0x184>)
 800ab96:	681a      	ldr	r2, [r3, #0]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	4013      	ands	r3, r2
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	f040 8093 	bne.w	800acc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d01d      	beq.n	800abe4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800aba8:	2208      	movs	r2, #8
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	4413      	add	r3, r2
 800abae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f003 0307 	and.w	r3, r3, #7
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d014      	beq.n	800abe4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f023 0307 	bic.w	r3, r3, #7
 800abc0:	3308      	adds	r3, #8
 800abc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f003 0307 	and.w	r3, r3, #7
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d00a      	beq.n	800abe4 <pvPortMalloc+0x6c>
	__asm volatile
 800abce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd2:	f383 8811 	msr	BASEPRI, r3
 800abd6:	f3bf 8f6f 	isb	sy
 800abda:	f3bf 8f4f 	dsb	sy
 800abde:	617b      	str	r3, [r7, #20]
}
 800abe0:	bf00      	nop
 800abe2:	e7fe      	b.n	800abe2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d06e      	beq.n	800acc8 <pvPortMalloc+0x150>
 800abea:	4b45      	ldr	r3, [pc, #276]	; (800ad00 <pvPortMalloc+0x188>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d869      	bhi.n	800acc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800abf4:	4b43      	ldr	r3, [pc, #268]	; (800ad04 <pvPortMalloc+0x18c>)
 800abf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800abf8:	4b42      	ldr	r3, [pc, #264]	; (800ad04 <pvPortMalloc+0x18c>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abfe:	e004      	b.n	800ac0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ac00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ac04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d903      	bls.n	800ac1c <pvPortMalloc+0xa4>
 800ac14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d1f1      	bne.n	800ac00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ac1c:	4b36      	ldr	r3, [pc, #216]	; (800acf8 <pvPortMalloc+0x180>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d050      	beq.n	800acc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ac26:	6a3b      	ldr	r3, [r7, #32]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2208      	movs	r2, #8
 800ac2c:	4413      	add	r3, r2
 800ac2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ac30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	6a3b      	ldr	r3, [r7, #32]
 800ac36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ac38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3a:	685a      	ldr	r2, [r3, #4]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	1ad2      	subs	r2, r2, r3
 800ac40:	2308      	movs	r3, #8
 800ac42:	005b      	lsls	r3, r3, #1
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d91f      	bls.n	800ac88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ac48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	4413      	add	r3, r2
 800ac4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac50:	69bb      	ldr	r3, [r7, #24]
 800ac52:	f003 0307 	and.w	r3, r3, #7
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d00a      	beq.n	800ac70 <pvPortMalloc+0xf8>
	__asm volatile
 800ac5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac5e:	f383 8811 	msr	BASEPRI, r3
 800ac62:	f3bf 8f6f 	isb	sy
 800ac66:	f3bf 8f4f 	dsb	sy
 800ac6a:	613b      	str	r3, [r7, #16]
}
 800ac6c:	bf00      	nop
 800ac6e:	e7fe      	b.n	800ac6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ac70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac72:	685a      	ldr	r2, [r3, #4]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	1ad2      	subs	r2, r2, r3
 800ac78:	69bb      	ldr	r3, [r7, #24]
 800ac7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ac7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ac82:	69b8      	ldr	r0, [r7, #24]
 800ac84:	f000 f908 	bl	800ae98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ac88:	4b1d      	ldr	r3, [pc, #116]	; (800ad00 <pvPortMalloc+0x188>)
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	1ad3      	subs	r3, r2, r3
 800ac92:	4a1b      	ldr	r2, [pc, #108]	; (800ad00 <pvPortMalloc+0x188>)
 800ac94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ac96:	4b1a      	ldr	r3, [pc, #104]	; (800ad00 <pvPortMalloc+0x188>)
 800ac98:	681a      	ldr	r2, [r3, #0]
 800ac9a:	4b1b      	ldr	r3, [pc, #108]	; (800ad08 <pvPortMalloc+0x190>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d203      	bcs.n	800acaa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aca2:	4b17      	ldr	r3, [pc, #92]	; (800ad00 <pvPortMalloc+0x188>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4a18      	ldr	r2, [pc, #96]	; (800ad08 <pvPortMalloc+0x190>)
 800aca8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800acaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acac:	685a      	ldr	r2, [r3, #4]
 800acae:	4b13      	ldr	r3, [pc, #76]	; (800acfc <pvPortMalloc+0x184>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	431a      	orrs	r2, r3
 800acb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800acb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acba:	2200      	movs	r2, #0
 800acbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800acbe:	4b13      	ldr	r3, [pc, #76]	; (800ad0c <pvPortMalloc+0x194>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	3301      	adds	r3, #1
 800acc4:	4a11      	ldr	r2, [pc, #68]	; (800ad0c <pvPortMalloc+0x194>)
 800acc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800acc8:	f7ff f866 	bl	8009d98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800accc:	69fb      	ldr	r3, [r7, #28]
 800acce:	f003 0307 	and.w	r3, r3, #7
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d00a      	beq.n	800acec <pvPortMalloc+0x174>
	__asm volatile
 800acd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acda:	f383 8811 	msr	BASEPRI, r3
 800acde:	f3bf 8f6f 	isb	sy
 800ace2:	f3bf 8f4f 	dsb	sy
 800ace6:	60fb      	str	r3, [r7, #12]
}
 800ace8:	bf00      	nop
 800acea:	e7fe      	b.n	800acea <pvPortMalloc+0x172>
	return pvReturn;
 800acec:	69fb      	ldr	r3, [r7, #28]
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3728      	adds	r7, #40	; 0x28
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	bf00      	nop
 800acf8:	20001048 	.word	0x20001048
 800acfc:	2000105c 	.word	0x2000105c
 800ad00:	2000104c 	.word	0x2000104c
 800ad04:	20001040 	.word	0x20001040
 800ad08:	20001050 	.word	0x20001050
 800ad0c:	20001054 	.word	0x20001054

0800ad10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b086      	sub	sp, #24
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d04d      	beq.n	800adbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ad22:	2308      	movs	r3, #8
 800ad24:	425b      	negs	r3, r3
 800ad26:	697a      	ldr	r2, [r7, #20]
 800ad28:	4413      	add	r3, r2
 800ad2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	685a      	ldr	r2, [r3, #4]
 800ad34:	4b24      	ldr	r3, [pc, #144]	; (800adc8 <vPortFree+0xb8>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	4013      	ands	r3, r2
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d10a      	bne.n	800ad54 <vPortFree+0x44>
	__asm volatile
 800ad3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad42:	f383 8811 	msr	BASEPRI, r3
 800ad46:	f3bf 8f6f 	isb	sy
 800ad4a:	f3bf 8f4f 	dsb	sy
 800ad4e:	60fb      	str	r3, [r7, #12]
}
 800ad50:	bf00      	nop
 800ad52:	e7fe      	b.n	800ad52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d00a      	beq.n	800ad72 <vPortFree+0x62>
	__asm volatile
 800ad5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad60:	f383 8811 	msr	BASEPRI, r3
 800ad64:	f3bf 8f6f 	isb	sy
 800ad68:	f3bf 8f4f 	dsb	sy
 800ad6c:	60bb      	str	r3, [r7, #8]
}
 800ad6e:	bf00      	nop
 800ad70:	e7fe      	b.n	800ad70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	685a      	ldr	r2, [r3, #4]
 800ad76:	4b14      	ldr	r3, [pc, #80]	; (800adc8 <vPortFree+0xb8>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4013      	ands	r3, r2
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d01e      	beq.n	800adbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d11a      	bne.n	800adbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	685a      	ldr	r2, [r3, #4]
 800ad8c:	4b0e      	ldr	r3, [pc, #56]	; (800adc8 <vPortFree+0xb8>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	43db      	mvns	r3, r3
 800ad92:	401a      	ands	r2, r3
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ad98:	f7fe fff0 	bl	8009d7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	685a      	ldr	r2, [r3, #4]
 800ada0:	4b0a      	ldr	r3, [pc, #40]	; (800adcc <vPortFree+0xbc>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	4413      	add	r3, r2
 800ada6:	4a09      	ldr	r2, [pc, #36]	; (800adcc <vPortFree+0xbc>)
 800ada8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800adaa:	6938      	ldr	r0, [r7, #16]
 800adac:	f000 f874 	bl	800ae98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800adb0:	4b07      	ldr	r3, [pc, #28]	; (800add0 <vPortFree+0xc0>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	3301      	adds	r3, #1
 800adb6:	4a06      	ldr	r2, [pc, #24]	; (800add0 <vPortFree+0xc0>)
 800adb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800adba:	f7fe ffed 	bl	8009d98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800adbe:	bf00      	nop
 800adc0:	3718      	adds	r7, #24
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	bf00      	nop
 800adc8:	2000105c 	.word	0x2000105c
 800adcc:	2000104c 	.word	0x2000104c
 800add0:	20001058 	.word	0x20001058

0800add4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800add4:	b480      	push	{r7}
 800add6:	b085      	sub	sp, #20
 800add8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800adda:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800adde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ade0:	4b27      	ldr	r3, [pc, #156]	; (800ae80 <prvHeapInit+0xac>)
 800ade2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f003 0307 	and.w	r3, r3, #7
 800adea:	2b00      	cmp	r3, #0
 800adec:	d00c      	beq.n	800ae08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	3307      	adds	r3, #7
 800adf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	f023 0307 	bic.w	r3, r3, #7
 800adfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800adfc:	68ba      	ldr	r2, [r7, #8]
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	1ad3      	subs	r3, r2, r3
 800ae02:	4a1f      	ldr	r2, [pc, #124]	; (800ae80 <prvHeapInit+0xac>)
 800ae04:	4413      	add	r3, r2
 800ae06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ae0c:	4a1d      	ldr	r2, [pc, #116]	; (800ae84 <prvHeapInit+0xb0>)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ae12:	4b1c      	ldr	r3, [pc, #112]	; (800ae84 <prvHeapInit+0xb0>)
 800ae14:	2200      	movs	r2, #0
 800ae16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	68ba      	ldr	r2, [r7, #8]
 800ae1c:	4413      	add	r3, r2
 800ae1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ae20:	2208      	movs	r2, #8
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	1a9b      	subs	r3, r3, r2
 800ae26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f023 0307 	bic.w	r3, r3, #7
 800ae2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	4a15      	ldr	r2, [pc, #84]	; (800ae88 <prvHeapInit+0xb4>)
 800ae34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ae36:	4b14      	ldr	r3, [pc, #80]	; (800ae88 <prvHeapInit+0xb4>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ae3e:	4b12      	ldr	r3, [pc, #72]	; (800ae88 <prvHeapInit+0xb4>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	2200      	movs	r2, #0
 800ae44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	68fa      	ldr	r2, [r7, #12]
 800ae4e:	1ad2      	subs	r2, r2, r3
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ae54:	4b0c      	ldr	r3, [pc, #48]	; (800ae88 <prvHeapInit+0xb4>)
 800ae56:	681a      	ldr	r2, [r3, #0]
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	4a0a      	ldr	r2, [pc, #40]	; (800ae8c <prvHeapInit+0xb8>)
 800ae62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	4a09      	ldr	r2, [pc, #36]	; (800ae90 <prvHeapInit+0xbc>)
 800ae6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ae6c:	4b09      	ldr	r3, [pc, #36]	; (800ae94 <prvHeapInit+0xc0>)
 800ae6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ae72:	601a      	str	r2, [r3, #0]
}
 800ae74:	bf00      	nop
 800ae76:	3714      	adds	r7, #20
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr
 800ae80:	20000488 	.word	0x20000488
 800ae84:	20001040 	.word	0x20001040
 800ae88:	20001048 	.word	0x20001048
 800ae8c:	20001050 	.word	0x20001050
 800ae90:	2000104c 	.word	0x2000104c
 800ae94:	2000105c 	.word	0x2000105c

0800ae98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b085      	sub	sp, #20
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aea0:	4b28      	ldr	r3, [pc, #160]	; (800af44 <prvInsertBlockIntoFreeList+0xac>)
 800aea2:	60fb      	str	r3, [r7, #12]
 800aea4:	e002      	b.n	800aeac <prvInsertBlockIntoFreeList+0x14>
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	60fb      	str	r3, [r7, #12]
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	d8f7      	bhi.n	800aea6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	68ba      	ldr	r2, [r7, #8]
 800aec0:	4413      	add	r3, r2
 800aec2:	687a      	ldr	r2, [r7, #4]
 800aec4:	429a      	cmp	r2, r3
 800aec6:	d108      	bne.n	800aeda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	685a      	ldr	r2, [r3, #4]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	441a      	add	r2, r3
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	68ba      	ldr	r2, [r7, #8]
 800aee4:	441a      	add	r2, r3
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d118      	bne.n	800af20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	4b15      	ldr	r3, [pc, #84]	; (800af48 <prvInsertBlockIntoFreeList+0xb0>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d00d      	beq.n	800af16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	685a      	ldr	r2, [r3, #4]
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	441a      	add	r2, r3
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	681a      	ldr	r2, [r3, #0]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	601a      	str	r2, [r3, #0]
 800af14:	e008      	b.n	800af28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800af16:	4b0c      	ldr	r3, [pc, #48]	; (800af48 <prvInsertBlockIntoFreeList+0xb0>)
 800af18:	681a      	ldr	r2, [r3, #0]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	601a      	str	r2, [r3, #0]
 800af1e:	e003      	b.n	800af28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800af28:	68fa      	ldr	r2, [r7, #12]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d002      	beq.n	800af36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	687a      	ldr	r2, [r7, #4]
 800af34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af36:	bf00      	nop
 800af38:	3714      	adds	r7, #20
 800af3a:	46bd      	mov	sp, r7
 800af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af40:	4770      	bx	lr
 800af42:	bf00      	nop
 800af44:	20001040 	.word	0x20001040
 800af48:	20001048 	.word	0x20001048

0800af4c <__errno>:
 800af4c:	4b01      	ldr	r3, [pc, #4]	; (800af54 <__errno+0x8>)
 800af4e:	6818      	ldr	r0, [r3, #0]
 800af50:	4770      	bx	lr
 800af52:	bf00      	nop
 800af54:	20000010 	.word	0x20000010

0800af58 <__sflush_r>:
 800af58:	898a      	ldrh	r2, [r1, #12]
 800af5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af5e:	4605      	mov	r5, r0
 800af60:	0710      	lsls	r0, r2, #28
 800af62:	460c      	mov	r4, r1
 800af64:	d458      	bmi.n	800b018 <__sflush_r+0xc0>
 800af66:	684b      	ldr	r3, [r1, #4]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	dc05      	bgt.n	800af78 <__sflush_r+0x20>
 800af6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af6e:	2b00      	cmp	r3, #0
 800af70:	dc02      	bgt.n	800af78 <__sflush_r+0x20>
 800af72:	2000      	movs	r0, #0
 800af74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af7a:	2e00      	cmp	r6, #0
 800af7c:	d0f9      	beq.n	800af72 <__sflush_r+0x1a>
 800af7e:	2300      	movs	r3, #0
 800af80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af84:	682f      	ldr	r7, [r5, #0]
 800af86:	602b      	str	r3, [r5, #0]
 800af88:	d032      	beq.n	800aff0 <__sflush_r+0x98>
 800af8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af8c:	89a3      	ldrh	r3, [r4, #12]
 800af8e:	075a      	lsls	r2, r3, #29
 800af90:	d505      	bpl.n	800af9e <__sflush_r+0x46>
 800af92:	6863      	ldr	r3, [r4, #4]
 800af94:	1ac0      	subs	r0, r0, r3
 800af96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af98:	b10b      	cbz	r3, 800af9e <__sflush_r+0x46>
 800af9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af9c:	1ac0      	subs	r0, r0, r3
 800af9e:	2300      	movs	r3, #0
 800afa0:	4602      	mov	r2, r0
 800afa2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afa4:	6a21      	ldr	r1, [r4, #32]
 800afa6:	4628      	mov	r0, r5
 800afa8:	47b0      	blx	r6
 800afaa:	1c43      	adds	r3, r0, #1
 800afac:	89a3      	ldrh	r3, [r4, #12]
 800afae:	d106      	bne.n	800afbe <__sflush_r+0x66>
 800afb0:	6829      	ldr	r1, [r5, #0]
 800afb2:	291d      	cmp	r1, #29
 800afb4:	d82c      	bhi.n	800b010 <__sflush_r+0xb8>
 800afb6:	4a2a      	ldr	r2, [pc, #168]	; (800b060 <__sflush_r+0x108>)
 800afb8:	40ca      	lsrs	r2, r1
 800afba:	07d6      	lsls	r6, r2, #31
 800afbc:	d528      	bpl.n	800b010 <__sflush_r+0xb8>
 800afbe:	2200      	movs	r2, #0
 800afc0:	6062      	str	r2, [r4, #4]
 800afc2:	04d9      	lsls	r1, r3, #19
 800afc4:	6922      	ldr	r2, [r4, #16]
 800afc6:	6022      	str	r2, [r4, #0]
 800afc8:	d504      	bpl.n	800afd4 <__sflush_r+0x7c>
 800afca:	1c42      	adds	r2, r0, #1
 800afcc:	d101      	bne.n	800afd2 <__sflush_r+0x7a>
 800afce:	682b      	ldr	r3, [r5, #0]
 800afd0:	b903      	cbnz	r3, 800afd4 <__sflush_r+0x7c>
 800afd2:	6560      	str	r0, [r4, #84]	; 0x54
 800afd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afd6:	602f      	str	r7, [r5, #0]
 800afd8:	2900      	cmp	r1, #0
 800afda:	d0ca      	beq.n	800af72 <__sflush_r+0x1a>
 800afdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afe0:	4299      	cmp	r1, r3
 800afe2:	d002      	beq.n	800afea <__sflush_r+0x92>
 800afe4:	4628      	mov	r0, r5
 800afe6:	f000 f9bf 	bl	800b368 <_free_r>
 800afea:	2000      	movs	r0, #0
 800afec:	6360      	str	r0, [r4, #52]	; 0x34
 800afee:	e7c1      	b.n	800af74 <__sflush_r+0x1c>
 800aff0:	6a21      	ldr	r1, [r4, #32]
 800aff2:	2301      	movs	r3, #1
 800aff4:	4628      	mov	r0, r5
 800aff6:	47b0      	blx	r6
 800aff8:	1c41      	adds	r1, r0, #1
 800affa:	d1c7      	bne.n	800af8c <__sflush_r+0x34>
 800affc:	682b      	ldr	r3, [r5, #0]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d0c4      	beq.n	800af8c <__sflush_r+0x34>
 800b002:	2b1d      	cmp	r3, #29
 800b004:	d001      	beq.n	800b00a <__sflush_r+0xb2>
 800b006:	2b16      	cmp	r3, #22
 800b008:	d101      	bne.n	800b00e <__sflush_r+0xb6>
 800b00a:	602f      	str	r7, [r5, #0]
 800b00c:	e7b1      	b.n	800af72 <__sflush_r+0x1a>
 800b00e:	89a3      	ldrh	r3, [r4, #12]
 800b010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b014:	81a3      	strh	r3, [r4, #12]
 800b016:	e7ad      	b.n	800af74 <__sflush_r+0x1c>
 800b018:	690f      	ldr	r7, [r1, #16]
 800b01a:	2f00      	cmp	r7, #0
 800b01c:	d0a9      	beq.n	800af72 <__sflush_r+0x1a>
 800b01e:	0793      	lsls	r3, r2, #30
 800b020:	680e      	ldr	r6, [r1, #0]
 800b022:	bf08      	it	eq
 800b024:	694b      	ldreq	r3, [r1, #20]
 800b026:	600f      	str	r7, [r1, #0]
 800b028:	bf18      	it	ne
 800b02a:	2300      	movne	r3, #0
 800b02c:	eba6 0807 	sub.w	r8, r6, r7
 800b030:	608b      	str	r3, [r1, #8]
 800b032:	f1b8 0f00 	cmp.w	r8, #0
 800b036:	dd9c      	ble.n	800af72 <__sflush_r+0x1a>
 800b038:	6a21      	ldr	r1, [r4, #32]
 800b03a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b03c:	4643      	mov	r3, r8
 800b03e:	463a      	mov	r2, r7
 800b040:	4628      	mov	r0, r5
 800b042:	47b0      	blx	r6
 800b044:	2800      	cmp	r0, #0
 800b046:	dc06      	bgt.n	800b056 <__sflush_r+0xfe>
 800b048:	89a3      	ldrh	r3, [r4, #12]
 800b04a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b04e:	81a3      	strh	r3, [r4, #12]
 800b050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b054:	e78e      	b.n	800af74 <__sflush_r+0x1c>
 800b056:	4407      	add	r7, r0
 800b058:	eba8 0800 	sub.w	r8, r8, r0
 800b05c:	e7e9      	b.n	800b032 <__sflush_r+0xda>
 800b05e:	bf00      	nop
 800b060:	20400001 	.word	0x20400001

0800b064 <_fflush_r>:
 800b064:	b538      	push	{r3, r4, r5, lr}
 800b066:	690b      	ldr	r3, [r1, #16]
 800b068:	4605      	mov	r5, r0
 800b06a:	460c      	mov	r4, r1
 800b06c:	b913      	cbnz	r3, 800b074 <_fflush_r+0x10>
 800b06e:	2500      	movs	r5, #0
 800b070:	4628      	mov	r0, r5
 800b072:	bd38      	pop	{r3, r4, r5, pc}
 800b074:	b118      	cbz	r0, 800b07e <_fflush_r+0x1a>
 800b076:	6983      	ldr	r3, [r0, #24]
 800b078:	b90b      	cbnz	r3, 800b07e <_fflush_r+0x1a>
 800b07a:	f000 f899 	bl	800b1b0 <__sinit>
 800b07e:	4b14      	ldr	r3, [pc, #80]	; (800b0d0 <_fflush_r+0x6c>)
 800b080:	429c      	cmp	r4, r3
 800b082:	d11b      	bne.n	800b0bc <_fflush_r+0x58>
 800b084:	686c      	ldr	r4, [r5, #4]
 800b086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d0ef      	beq.n	800b06e <_fflush_r+0xa>
 800b08e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b090:	07d0      	lsls	r0, r2, #31
 800b092:	d404      	bmi.n	800b09e <_fflush_r+0x3a>
 800b094:	0599      	lsls	r1, r3, #22
 800b096:	d402      	bmi.n	800b09e <_fflush_r+0x3a>
 800b098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b09a:	f000 f94c 	bl	800b336 <__retarget_lock_acquire_recursive>
 800b09e:	4628      	mov	r0, r5
 800b0a0:	4621      	mov	r1, r4
 800b0a2:	f7ff ff59 	bl	800af58 <__sflush_r>
 800b0a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0a8:	07da      	lsls	r2, r3, #31
 800b0aa:	4605      	mov	r5, r0
 800b0ac:	d4e0      	bmi.n	800b070 <_fflush_r+0xc>
 800b0ae:	89a3      	ldrh	r3, [r4, #12]
 800b0b0:	059b      	lsls	r3, r3, #22
 800b0b2:	d4dd      	bmi.n	800b070 <_fflush_r+0xc>
 800b0b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0b6:	f000 f93f 	bl	800b338 <__retarget_lock_release_recursive>
 800b0ba:	e7d9      	b.n	800b070 <_fflush_r+0xc>
 800b0bc:	4b05      	ldr	r3, [pc, #20]	; (800b0d4 <_fflush_r+0x70>)
 800b0be:	429c      	cmp	r4, r3
 800b0c0:	d101      	bne.n	800b0c6 <_fflush_r+0x62>
 800b0c2:	68ac      	ldr	r4, [r5, #8]
 800b0c4:	e7df      	b.n	800b086 <_fflush_r+0x22>
 800b0c6:	4b04      	ldr	r3, [pc, #16]	; (800b0d8 <_fflush_r+0x74>)
 800b0c8:	429c      	cmp	r4, r3
 800b0ca:	bf08      	it	eq
 800b0cc:	68ec      	ldreq	r4, [r5, #12]
 800b0ce:	e7da      	b.n	800b086 <_fflush_r+0x22>
 800b0d0:	0800c898 	.word	0x0800c898
 800b0d4:	0800c8b8 	.word	0x0800c8b8
 800b0d8:	0800c878 	.word	0x0800c878

0800b0dc <fflush>:
 800b0dc:	4601      	mov	r1, r0
 800b0de:	b920      	cbnz	r0, 800b0ea <fflush+0xe>
 800b0e0:	4b04      	ldr	r3, [pc, #16]	; (800b0f4 <fflush+0x18>)
 800b0e2:	4905      	ldr	r1, [pc, #20]	; (800b0f8 <fflush+0x1c>)
 800b0e4:	6818      	ldr	r0, [r3, #0]
 800b0e6:	f000 b8e1 	b.w	800b2ac <_fwalk_reent>
 800b0ea:	4b04      	ldr	r3, [pc, #16]	; (800b0fc <fflush+0x20>)
 800b0ec:	6818      	ldr	r0, [r3, #0]
 800b0ee:	f7ff bfb9 	b.w	800b064 <_fflush_r>
 800b0f2:	bf00      	nop
 800b0f4:	0800c8d8 	.word	0x0800c8d8
 800b0f8:	0800b065 	.word	0x0800b065
 800b0fc:	20000010 	.word	0x20000010

0800b100 <std>:
 800b100:	2300      	movs	r3, #0
 800b102:	b510      	push	{r4, lr}
 800b104:	4604      	mov	r4, r0
 800b106:	e9c0 3300 	strd	r3, r3, [r0]
 800b10a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b10e:	6083      	str	r3, [r0, #8]
 800b110:	8181      	strh	r1, [r0, #12]
 800b112:	6643      	str	r3, [r0, #100]	; 0x64
 800b114:	81c2      	strh	r2, [r0, #14]
 800b116:	6183      	str	r3, [r0, #24]
 800b118:	4619      	mov	r1, r3
 800b11a:	2208      	movs	r2, #8
 800b11c:	305c      	adds	r0, #92	; 0x5c
 800b11e:	f000 f91a 	bl	800b356 <memset>
 800b122:	4b05      	ldr	r3, [pc, #20]	; (800b138 <std+0x38>)
 800b124:	6263      	str	r3, [r4, #36]	; 0x24
 800b126:	4b05      	ldr	r3, [pc, #20]	; (800b13c <std+0x3c>)
 800b128:	62a3      	str	r3, [r4, #40]	; 0x28
 800b12a:	4b05      	ldr	r3, [pc, #20]	; (800b140 <std+0x40>)
 800b12c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b12e:	4b05      	ldr	r3, [pc, #20]	; (800b144 <std+0x44>)
 800b130:	6224      	str	r4, [r4, #32]
 800b132:	6323      	str	r3, [r4, #48]	; 0x30
 800b134:	bd10      	pop	{r4, pc}
 800b136:	bf00      	nop
 800b138:	0800b5b1 	.word	0x0800b5b1
 800b13c:	0800b5d3 	.word	0x0800b5d3
 800b140:	0800b60b 	.word	0x0800b60b
 800b144:	0800b62f 	.word	0x0800b62f

0800b148 <_cleanup_r>:
 800b148:	4901      	ldr	r1, [pc, #4]	; (800b150 <_cleanup_r+0x8>)
 800b14a:	f000 b8af 	b.w	800b2ac <_fwalk_reent>
 800b14e:	bf00      	nop
 800b150:	0800b065 	.word	0x0800b065

0800b154 <__sfmoreglue>:
 800b154:	b570      	push	{r4, r5, r6, lr}
 800b156:	1e4a      	subs	r2, r1, #1
 800b158:	2568      	movs	r5, #104	; 0x68
 800b15a:	4355      	muls	r5, r2
 800b15c:	460e      	mov	r6, r1
 800b15e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b162:	f000 f951 	bl	800b408 <_malloc_r>
 800b166:	4604      	mov	r4, r0
 800b168:	b140      	cbz	r0, 800b17c <__sfmoreglue+0x28>
 800b16a:	2100      	movs	r1, #0
 800b16c:	e9c0 1600 	strd	r1, r6, [r0]
 800b170:	300c      	adds	r0, #12
 800b172:	60a0      	str	r0, [r4, #8]
 800b174:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b178:	f000 f8ed 	bl	800b356 <memset>
 800b17c:	4620      	mov	r0, r4
 800b17e:	bd70      	pop	{r4, r5, r6, pc}

0800b180 <__sfp_lock_acquire>:
 800b180:	4801      	ldr	r0, [pc, #4]	; (800b188 <__sfp_lock_acquire+0x8>)
 800b182:	f000 b8d8 	b.w	800b336 <__retarget_lock_acquire_recursive>
 800b186:	bf00      	nop
 800b188:	20001184 	.word	0x20001184

0800b18c <__sfp_lock_release>:
 800b18c:	4801      	ldr	r0, [pc, #4]	; (800b194 <__sfp_lock_release+0x8>)
 800b18e:	f000 b8d3 	b.w	800b338 <__retarget_lock_release_recursive>
 800b192:	bf00      	nop
 800b194:	20001184 	.word	0x20001184

0800b198 <__sinit_lock_acquire>:
 800b198:	4801      	ldr	r0, [pc, #4]	; (800b1a0 <__sinit_lock_acquire+0x8>)
 800b19a:	f000 b8cc 	b.w	800b336 <__retarget_lock_acquire_recursive>
 800b19e:	bf00      	nop
 800b1a0:	2000117f 	.word	0x2000117f

0800b1a4 <__sinit_lock_release>:
 800b1a4:	4801      	ldr	r0, [pc, #4]	; (800b1ac <__sinit_lock_release+0x8>)
 800b1a6:	f000 b8c7 	b.w	800b338 <__retarget_lock_release_recursive>
 800b1aa:	bf00      	nop
 800b1ac:	2000117f 	.word	0x2000117f

0800b1b0 <__sinit>:
 800b1b0:	b510      	push	{r4, lr}
 800b1b2:	4604      	mov	r4, r0
 800b1b4:	f7ff fff0 	bl	800b198 <__sinit_lock_acquire>
 800b1b8:	69a3      	ldr	r3, [r4, #24]
 800b1ba:	b11b      	cbz	r3, 800b1c4 <__sinit+0x14>
 800b1bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1c0:	f7ff bff0 	b.w	800b1a4 <__sinit_lock_release>
 800b1c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b1c8:	6523      	str	r3, [r4, #80]	; 0x50
 800b1ca:	4b13      	ldr	r3, [pc, #76]	; (800b218 <__sinit+0x68>)
 800b1cc:	4a13      	ldr	r2, [pc, #76]	; (800b21c <__sinit+0x6c>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	62a2      	str	r2, [r4, #40]	; 0x28
 800b1d2:	42a3      	cmp	r3, r4
 800b1d4:	bf04      	itt	eq
 800b1d6:	2301      	moveq	r3, #1
 800b1d8:	61a3      	streq	r3, [r4, #24]
 800b1da:	4620      	mov	r0, r4
 800b1dc:	f000 f820 	bl	800b220 <__sfp>
 800b1e0:	6060      	str	r0, [r4, #4]
 800b1e2:	4620      	mov	r0, r4
 800b1e4:	f000 f81c 	bl	800b220 <__sfp>
 800b1e8:	60a0      	str	r0, [r4, #8]
 800b1ea:	4620      	mov	r0, r4
 800b1ec:	f000 f818 	bl	800b220 <__sfp>
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	60e0      	str	r0, [r4, #12]
 800b1f4:	2104      	movs	r1, #4
 800b1f6:	6860      	ldr	r0, [r4, #4]
 800b1f8:	f7ff ff82 	bl	800b100 <std>
 800b1fc:	68a0      	ldr	r0, [r4, #8]
 800b1fe:	2201      	movs	r2, #1
 800b200:	2109      	movs	r1, #9
 800b202:	f7ff ff7d 	bl	800b100 <std>
 800b206:	68e0      	ldr	r0, [r4, #12]
 800b208:	2202      	movs	r2, #2
 800b20a:	2112      	movs	r1, #18
 800b20c:	f7ff ff78 	bl	800b100 <std>
 800b210:	2301      	movs	r3, #1
 800b212:	61a3      	str	r3, [r4, #24]
 800b214:	e7d2      	b.n	800b1bc <__sinit+0xc>
 800b216:	bf00      	nop
 800b218:	0800c8d8 	.word	0x0800c8d8
 800b21c:	0800b149 	.word	0x0800b149

0800b220 <__sfp>:
 800b220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b222:	4607      	mov	r7, r0
 800b224:	f7ff ffac 	bl	800b180 <__sfp_lock_acquire>
 800b228:	4b1e      	ldr	r3, [pc, #120]	; (800b2a4 <__sfp+0x84>)
 800b22a:	681e      	ldr	r6, [r3, #0]
 800b22c:	69b3      	ldr	r3, [r6, #24]
 800b22e:	b913      	cbnz	r3, 800b236 <__sfp+0x16>
 800b230:	4630      	mov	r0, r6
 800b232:	f7ff ffbd 	bl	800b1b0 <__sinit>
 800b236:	3648      	adds	r6, #72	; 0x48
 800b238:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b23c:	3b01      	subs	r3, #1
 800b23e:	d503      	bpl.n	800b248 <__sfp+0x28>
 800b240:	6833      	ldr	r3, [r6, #0]
 800b242:	b30b      	cbz	r3, 800b288 <__sfp+0x68>
 800b244:	6836      	ldr	r6, [r6, #0]
 800b246:	e7f7      	b.n	800b238 <__sfp+0x18>
 800b248:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b24c:	b9d5      	cbnz	r5, 800b284 <__sfp+0x64>
 800b24e:	4b16      	ldr	r3, [pc, #88]	; (800b2a8 <__sfp+0x88>)
 800b250:	60e3      	str	r3, [r4, #12]
 800b252:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b256:	6665      	str	r5, [r4, #100]	; 0x64
 800b258:	f000 f86c 	bl	800b334 <__retarget_lock_init_recursive>
 800b25c:	f7ff ff96 	bl	800b18c <__sfp_lock_release>
 800b260:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b264:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b268:	6025      	str	r5, [r4, #0]
 800b26a:	61a5      	str	r5, [r4, #24]
 800b26c:	2208      	movs	r2, #8
 800b26e:	4629      	mov	r1, r5
 800b270:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b274:	f000 f86f 	bl	800b356 <memset>
 800b278:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b27c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b280:	4620      	mov	r0, r4
 800b282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b284:	3468      	adds	r4, #104	; 0x68
 800b286:	e7d9      	b.n	800b23c <__sfp+0x1c>
 800b288:	2104      	movs	r1, #4
 800b28a:	4638      	mov	r0, r7
 800b28c:	f7ff ff62 	bl	800b154 <__sfmoreglue>
 800b290:	4604      	mov	r4, r0
 800b292:	6030      	str	r0, [r6, #0]
 800b294:	2800      	cmp	r0, #0
 800b296:	d1d5      	bne.n	800b244 <__sfp+0x24>
 800b298:	f7ff ff78 	bl	800b18c <__sfp_lock_release>
 800b29c:	230c      	movs	r3, #12
 800b29e:	603b      	str	r3, [r7, #0]
 800b2a0:	e7ee      	b.n	800b280 <__sfp+0x60>
 800b2a2:	bf00      	nop
 800b2a4:	0800c8d8 	.word	0x0800c8d8
 800b2a8:	ffff0001 	.word	0xffff0001

0800b2ac <_fwalk_reent>:
 800b2ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2b0:	4606      	mov	r6, r0
 800b2b2:	4688      	mov	r8, r1
 800b2b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b2b8:	2700      	movs	r7, #0
 800b2ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b2be:	f1b9 0901 	subs.w	r9, r9, #1
 800b2c2:	d505      	bpl.n	800b2d0 <_fwalk_reent+0x24>
 800b2c4:	6824      	ldr	r4, [r4, #0]
 800b2c6:	2c00      	cmp	r4, #0
 800b2c8:	d1f7      	bne.n	800b2ba <_fwalk_reent+0xe>
 800b2ca:	4638      	mov	r0, r7
 800b2cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2d0:	89ab      	ldrh	r3, [r5, #12]
 800b2d2:	2b01      	cmp	r3, #1
 800b2d4:	d907      	bls.n	800b2e6 <_fwalk_reent+0x3a>
 800b2d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b2da:	3301      	adds	r3, #1
 800b2dc:	d003      	beq.n	800b2e6 <_fwalk_reent+0x3a>
 800b2de:	4629      	mov	r1, r5
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	47c0      	blx	r8
 800b2e4:	4307      	orrs	r7, r0
 800b2e6:	3568      	adds	r5, #104	; 0x68
 800b2e8:	e7e9      	b.n	800b2be <_fwalk_reent+0x12>
	...

0800b2ec <__libc_init_array>:
 800b2ec:	b570      	push	{r4, r5, r6, lr}
 800b2ee:	4d0d      	ldr	r5, [pc, #52]	; (800b324 <__libc_init_array+0x38>)
 800b2f0:	4c0d      	ldr	r4, [pc, #52]	; (800b328 <__libc_init_array+0x3c>)
 800b2f2:	1b64      	subs	r4, r4, r5
 800b2f4:	10a4      	asrs	r4, r4, #2
 800b2f6:	2600      	movs	r6, #0
 800b2f8:	42a6      	cmp	r6, r4
 800b2fa:	d109      	bne.n	800b310 <__libc_init_array+0x24>
 800b2fc:	4d0b      	ldr	r5, [pc, #44]	; (800b32c <__libc_init_array+0x40>)
 800b2fe:	4c0c      	ldr	r4, [pc, #48]	; (800b330 <__libc_init_array+0x44>)
 800b300:	f001 fa24 	bl	800c74c <_init>
 800b304:	1b64      	subs	r4, r4, r5
 800b306:	10a4      	asrs	r4, r4, #2
 800b308:	2600      	movs	r6, #0
 800b30a:	42a6      	cmp	r6, r4
 800b30c:	d105      	bne.n	800b31a <__libc_init_array+0x2e>
 800b30e:	bd70      	pop	{r4, r5, r6, pc}
 800b310:	f855 3b04 	ldr.w	r3, [r5], #4
 800b314:	4798      	blx	r3
 800b316:	3601      	adds	r6, #1
 800b318:	e7ee      	b.n	800b2f8 <__libc_init_array+0xc>
 800b31a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b31e:	4798      	blx	r3
 800b320:	3601      	adds	r6, #1
 800b322:	e7f2      	b.n	800b30a <__libc_init_array+0x1e>
 800b324:	0800cac0 	.word	0x0800cac0
 800b328:	0800cac0 	.word	0x0800cac0
 800b32c:	0800cac0 	.word	0x0800cac0
 800b330:	0800cac4 	.word	0x0800cac4

0800b334 <__retarget_lock_init_recursive>:
 800b334:	4770      	bx	lr

0800b336 <__retarget_lock_acquire_recursive>:
 800b336:	4770      	bx	lr

0800b338 <__retarget_lock_release_recursive>:
 800b338:	4770      	bx	lr

0800b33a <memcpy>:
 800b33a:	440a      	add	r2, r1
 800b33c:	4291      	cmp	r1, r2
 800b33e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b342:	d100      	bne.n	800b346 <memcpy+0xc>
 800b344:	4770      	bx	lr
 800b346:	b510      	push	{r4, lr}
 800b348:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b34c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b350:	4291      	cmp	r1, r2
 800b352:	d1f9      	bne.n	800b348 <memcpy+0xe>
 800b354:	bd10      	pop	{r4, pc}

0800b356 <memset>:
 800b356:	4402      	add	r2, r0
 800b358:	4603      	mov	r3, r0
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d100      	bne.n	800b360 <memset+0xa>
 800b35e:	4770      	bx	lr
 800b360:	f803 1b01 	strb.w	r1, [r3], #1
 800b364:	e7f9      	b.n	800b35a <memset+0x4>
	...

0800b368 <_free_r>:
 800b368:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b36a:	2900      	cmp	r1, #0
 800b36c:	d048      	beq.n	800b400 <_free_r+0x98>
 800b36e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b372:	9001      	str	r0, [sp, #4]
 800b374:	2b00      	cmp	r3, #0
 800b376:	f1a1 0404 	sub.w	r4, r1, #4
 800b37a:	bfb8      	it	lt
 800b37c:	18e4      	addlt	r4, r4, r3
 800b37e:	f000 f98f 	bl	800b6a0 <__malloc_lock>
 800b382:	4a20      	ldr	r2, [pc, #128]	; (800b404 <_free_r+0x9c>)
 800b384:	9801      	ldr	r0, [sp, #4]
 800b386:	6813      	ldr	r3, [r2, #0]
 800b388:	4615      	mov	r5, r2
 800b38a:	b933      	cbnz	r3, 800b39a <_free_r+0x32>
 800b38c:	6063      	str	r3, [r4, #4]
 800b38e:	6014      	str	r4, [r2, #0]
 800b390:	b003      	add	sp, #12
 800b392:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b396:	f000 b989 	b.w	800b6ac <__malloc_unlock>
 800b39a:	42a3      	cmp	r3, r4
 800b39c:	d90b      	bls.n	800b3b6 <_free_r+0x4e>
 800b39e:	6821      	ldr	r1, [r4, #0]
 800b3a0:	1862      	adds	r2, r4, r1
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	bf04      	itt	eq
 800b3a6:	681a      	ldreq	r2, [r3, #0]
 800b3a8:	685b      	ldreq	r3, [r3, #4]
 800b3aa:	6063      	str	r3, [r4, #4]
 800b3ac:	bf04      	itt	eq
 800b3ae:	1852      	addeq	r2, r2, r1
 800b3b0:	6022      	streq	r2, [r4, #0]
 800b3b2:	602c      	str	r4, [r5, #0]
 800b3b4:	e7ec      	b.n	800b390 <_free_r+0x28>
 800b3b6:	461a      	mov	r2, r3
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	b10b      	cbz	r3, 800b3c0 <_free_r+0x58>
 800b3bc:	42a3      	cmp	r3, r4
 800b3be:	d9fa      	bls.n	800b3b6 <_free_r+0x4e>
 800b3c0:	6811      	ldr	r1, [r2, #0]
 800b3c2:	1855      	adds	r5, r2, r1
 800b3c4:	42a5      	cmp	r5, r4
 800b3c6:	d10b      	bne.n	800b3e0 <_free_r+0x78>
 800b3c8:	6824      	ldr	r4, [r4, #0]
 800b3ca:	4421      	add	r1, r4
 800b3cc:	1854      	adds	r4, r2, r1
 800b3ce:	42a3      	cmp	r3, r4
 800b3d0:	6011      	str	r1, [r2, #0]
 800b3d2:	d1dd      	bne.n	800b390 <_free_r+0x28>
 800b3d4:	681c      	ldr	r4, [r3, #0]
 800b3d6:	685b      	ldr	r3, [r3, #4]
 800b3d8:	6053      	str	r3, [r2, #4]
 800b3da:	4421      	add	r1, r4
 800b3dc:	6011      	str	r1, [r2, #0]
 800b3de:	e7d7      	b.n	800b390 <_free_r+0x28>
 800b3e0:	d902      	bls.n	800b3e8 <_free_r+0x80>
 800b3e2:	230c      	movs	r3, #12
 800b3e4:	6003      	str	r3, [r0, #0]
 800b3e6:	e7d3      	b.n	800b390 <_free_r+0x28>
 800b3e8:	6825      	ldr	r5, [r4, #0]
 800b3ea:	1961      	adds	r1, r4, r5
 800b3ec:	428b      	cmp	r3, r1
 800b3ee:	bf04      	itt	eq
 800b3f0:	6819      	ldreq	r1, [r3, #0]
 800b3f2:	685b      	ldreq	r3, [r3, #4]
 800b3f4:	6063      	str	r3, [r4, #4]
 800b3f6:	bf04      	itt	eq
 800b3f8:	1949      	addeq	r1, r1, r5
 800b3fa:	6021      	streq	r1, [r4, #0]
 800b3fc:	6054      	str	r4, [r2, #4]
 800b3fe:	e7c7      	b.n	800b390 <_free_r+0x28>
 800b400:	b003      	add	sp, #12
 800b402:	bd30      	pop	{r4, r5, pc}
 800b404:	20001060 	.word	0x20001060

0800b408 <_malloc_r>:
 800b408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b40a:	1ccd      	adds	r5, r1, #3
 800b40c:	f025 0503 	bic.w	r5, r5, #3
 800b410:	3508      	adds	r5, #8
 800b412:	2d0c      	cmp	r5, #12
 800b414:	bf38      	it	cc
 800b416:	250c      	movcc	r5, #12
 800b418:	2d00      	cmp	r5, #0
 800b41a:	4606      	mov	r6, r0
 800b41c:	db01      	blt.n	800b422 <_malloc_r+0x1a>
 800b41e:	42a9      	cmp	r1, r5
 800b420:	d903      	bls.n	800b42a <_malloc_r+0x22>
 800b422:	230c      	movs	r3, #12
 800b424:	6033      	str	r3, [r6, #0]
 800b426:	2000      	movs	r0, #0
 800b428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b42a:	f000 f939 	bl	800b6a0 <__malloc_lock>
 800b42e:	4921      	ldr	r1, [pc, #132]	; (800b4b4 <_malloc_r+0xac>)
 800b430:	680a      	ldr	r2, [r1, #0]
 800b432:	4614      	mov	r4, r2
 800b434:	b99c      	cbnz	r4, 800b45e <_malloc_r+0x56>
 800b436:	4f20      	ldr	r7, [pc, #128]	; (800b4b8 <_malloc_r+0xb0>)
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	b923      	cbnz	r3, 800b446 <_malloc_r+0x3e>
 800b43c:	4621      	mov	r1, r4
 800b43e:	4630      	mov	r0, r6
 800b440:	f000 f8a6 	bl	800b590 <_sbrk_r>
 800b444:	6038      	str	r0, [r7, #0]
 800b446:	4629      	mov	r1, r5
 800b448:	4630      	mov	r0, r6
 800b44a:	f000 f8a1 	bl	800b590 <_sbrk_r>
 800b44e:	1c43      	adds	r3, r0, #1
 800b450:	d123      	bne.n	800b49a <_malloc_r+0x92>
 800b452:	230c      	movs	r3, #12
 800b454:	6033      	str	r3, [r6, #0]
 800b456:	4630      	mov	r0, r6
 800b458:	f000 f928 	bl	800b6ac <__malloc_unlock>
 800b45c:	e7e3      	b.n	800b426 <_malloc_r+0x1e>
 800b45e:	6823      	ldr	r3, [r4, #0]
 800b460:	1b5b      	subs	r3, r3, r5
 800b462:	d417      	bmi.n	800b494 <_malloc_r+0x8c>
 800b464:	2b0b      	cmp	r3, #11
 800b466:	d903      	bls.n	800b470 <_malloc_r+0x68>
 800b468:	6023      	str	r3, [r4, #0]
 800b46a:	441c      	add	r4, r3
 800b46c:	6025      	str	r5, [r4, #0]
 800b46e:	e004      	b.n	800b47a <_malloc_r+0x72>
 800b470:	6863      	ldr	r3, [r4, #4]
 800b472:	42a2      	cmp	r2, r4
 800b474:	bf0c      	ite	eq
 800b476:	600b      	streq	r3, [r1, #0]
 800b478:	6053      	strne	r3, [r2, #4]
 800b47a:	4630      	mov	r0, r6
 800b47c:	f000 f916 	bl	800b6ac <__malloc_unlock>
 800b480:	f104 000b 	add.w	r0, r4, #11
 800b484:	1d23      	adds	r3, r4, #4
 800b486:	f020 0007 	bic.w	r0, r0, #7
 800b48a:	1ac2      	subs	r2, r0, r3
 800b48c:	d0cc      	beq.n	800b428 <_malloc_r+0x20>
 800b48e:	1a1b      	subs	r3, r3, r0
 800b490:	50a3      	str	r3, [r4, r2]
 800b492:	e7c9      	b.n	800b428 <_malloc_r+0x20>
 800b494:	4622      	mov	r2, r4
 800b496:	6864      	ldr	r4, [r4, #4]
 800b498:	e7cc      	b.n	800b434 <_malloc_r+0x2c>
 800b49a:	1cc4      	adds	r4, r0, #3
 800b49c:	f024 0403 	bic.w	r4, r4, #3
 800b4a0:	42a0      	cmp	r0, r4
 800b4a2:	d0e3      	beq.n	800b46c <_malloc_r+0x64>
 800b4a4:	1a21      	subs	r1, r4, r0
 800b4a6:	4630      	mov	r0, r6
 800b4a8:	f000 f872 	bl	800b590 <_sbrk_r>
 800b4ac:	3001      	adds	r0, #1
 800b4ae:	d1dd      	bne.n	800b46c <_malloc_r+0x64>
 800b4b0:	e7cf      	b.n	800b452 <_malloc_r+0x4a>
 800b4b2:	bf00      	nop
 800b4b4:	20001060 	.word	0x20001060
 800b4b8:	20001064 	.word	0x20001064

0800b4bc <cleanup_glue>:
 800b4bc:	b538      	push	{r3, r4, r5, lr}
 800b4be:	460c      	mov	r4, r1
 800b4c0:	6809      	ldr	r1, [r1, #0]
 800b4c2:	4605      	mov	r5, r0
 800b4c4:	b109      	cbz	r1, 800b4ca <cleanup_glue+0xe>
 800b4c6:	f7ff fff9 	bl	800b4bc <cleanup_glue>
 800b4ca:	4621      	mov	r1, r4
 800b4cc:	4628      	mov	r0, r5
 800b4ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4d2:	f7ff bf49 	b.w	800b368 <_free_r>
	...

0800b4d8 <_reclaim_reent>:
 800b4d8:	4b2c      	ldr	r3, [pc, #176]	; (800b58c <_reclaim_reent+0xb4>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	4283      	cmp	r3, r0
 800b4de:	b570      	push	{r4, r5, r6, lr}
 800b4e0:	4604      	mov	r4, r0
 800b4e2:	d051      	beq.n	800b588 <_reclaim_reent+0xb0>
 800b4e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b4e6:	b143      	cbz	r3, 800b4fa <_reclaim_reent+0x22>
 800b4e8:	68db      	ldr	r3, [r3, #12]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d14a      	bne.n	800b584 <_reclaim_reent+0xac>
 800b4ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4f0:	6819      	ldr	r1, [r3, #0]
 800b4f2:	b111      	cbz	r1, 800b4fa <_reclaim_reent+0x22>
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	f7ff ff37 	bl	800b368 <_free_r>
 800b4fa:	6961      	ldr	r1, [r4, #20]
 800b4fc:	b111      	cbz	r1, 800b504 <_reclaim_reent+0x2c>
 800b4fe:	4620      	mov	r0, r4
 800b500:	f7ff ff32 	bl	800b368 <_free_r>
 800b504:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b506:	b111      	cbz	r1, 800b50e <_reclaim_reent+0x36>
 800b508:	4620      	mov	r0, r4
 800b50a:	f7ff ff2d 	bl	800b368 <_free_r>
 800b50e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b510:	b111      	cbz	r1, 800b518 <_reclaim_reent+0x40>
 800b512:	4620      	mov	r0, r4
 800b514:	f7ff ff28 	bl	800b368 <_free_r>
 800b518:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b51a:	b111      	cbz	r1, 800b522 <_reclaim_reent+0x4a>
 800b51c:	4620      	mov	r0, r4
 800b51e:	f7ff ff23 	bl	800b368 <_free_r>
 800b522:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b524:	b111      	cbz	r1, 800b52c <_reclaim_reent+0x54>
 800b526:	4620      	mov	r0, r4
 800b528:	f7ff ff1e 	bl	800b368 <_free_r>
 800b52c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b52e:	b111      	cbz	r1, 800b536 <_reclaim_reent+0x5e>
 800b530:	4620      	mov	r0, r4
 800b532:	f7ff ff19 	bl	800b368 <_free_r>
 800b536:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b538:	b111      	cbz	r1, 800b540 <_reclaim_reent+0x68>
 800b53a:	4620      	mov	r0, r4
 800b53c:	f7ff ff14 	bl	800b368 <_free_r>
 800b540:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b542:	b111      	cbz	r1, 800b54a <_reclaim_reent+0x72>
 800b544:	4620      	mov	r0, r4
 800b546:	f7ff ff0f 	bl	800b368 <_free_r>
 800b54a:	69a3      	ldr	r3, [r4, #24]
 800b54c:	b1e3      	cbz	r3, 800b588 <_reclaim_reent+0xb0>
 800b54e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b550:	4620      	mov	r0, r4
 800b552:	4798      	blx	r3
 800b554:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b556:	b1b9      	cbz	r1, 800b588 <_reclaim_reent+0xb0>
 800b558:	4620      	mov	r0, r4
 800b55a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b55e:	f7ff bfad 	b.w	800b4bc <cleanup_glue>
 800b562:	5949      	ldr	r1, [r1, r5]
 800b564:	b941      	cbnz	r1, 800b578 <_reclaim_reent+0xa0>
 800b566:	3504      	adds	r5, #4
 800b568:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b56a:	2d80      	cmp	r5, #128	; 0x80
 800b56c:	68d9      	ldr	r1, [r3, #12]
 800b56e:	d1f8      	bne.n	800b562 <_reclaim_reent+0x8a>
 800b570:	4620      	mov	r0, r4
 800b572:	f7ff fef9 	bl	800b368 <_free_r>
 800b576:	e7ba      	b.n	800b4ee <_reclaim_reent+0x16>
 800b578:	680e      	ldr	r6, [r1, #0]
 800b57a:	4620      	mov	r0, r4
 800b57c:	f7ff fef4 	bl	800b368 <_free_r>
 800b580:	4631      	mov	r1, r6
 800b582:	e7ef      	b.n	800b564 <_reclaim_reent+0x8c>
 800b584:	2500      	movs	r5, #0
 800b586:	e7ef      	b.n	800b568 <_reclaim_reent+0x90>
 800b588:	bd70      	pop	{r4, r5, r6, pc}
 800b58a:	bf00      	nop
 800b58c:	20000010 	.word	0x20000010

0800b590 <_sbrk_r>:
 800b590:	b538      	push	{r3, r4, r5, lr}
 800b592:	4d06      	ldr	r5, [pc, #24]	; (800b5ac <_sbrk_r+0x1c>)
 800b594:	2300      	movs	r3, #0
 800b596:	4604      	mov	r4, r0
 800b598:	4608      	mov	r0, r1
 800b59a:	602b      	str	r3, [r5, #0]
 800b59c:	f7f8 f9b0 	bl	8003900 <_sbrk>
 800b5a0:	1c43      	adds	r3, r0, #1
 800b5a2:	d102      	bne.n	800b5aa <_sbrk_r+0x1a>
 800b5a4:	682b      	ldr	r3, [r5, #0]
 800b5a6:	b103      	cbz	r3, 800b5aa <_sbrk_r+0x1a>
 800b5a8:	6023      	str	r3, [r4, #0]
 800b5aa:	bd38      	pop	{r3, r4, r5, pc}
 800b5ac:	20001188 	.word	0x20001188

0800b5b0 <__sread>:
 800b5b0:	b510      	push	{r4, lr}
 800b5b2:	460c      	mov	r4, r1
 800b5b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5b8:	f000 f87e 	bl	800b6b8 <_read_r>
 800b5bc:	2800      	cmp	r0, #0
 800b5be:	bfab      	itete	ge
 800b5c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b5c2:	89a3      	ldrhlt	r3, [r4, #12]
 800b5c4:	181b      	addge	r3, r3, r0
 800b5c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b5ca:	bfac      	ite	ge
 800b5cc:	6563      	strge	r3, [r4, #84]	; 0x54
 800b5ce:	81a3      	strhlt	r3, [r4, #12]
 800b5d0:	bd10      	pop	{r4, pc}

0800b5d2 <__swrite>:
 800b5d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5d6:	461f      	mov	r7, r3
 800b5d8:	898b      	ldrh	r3, [r1, #12]
 800b5da:	05db      	lsls	r3, r3, #23
 800b5dc:	4605      	mov	r5, r0
 800b5de:	460c      	mov	r4, r1
 800b5e0:	4616      	mov	r6, r2
 800b5e2:	d505      	bpl.n	800b5f0 <__swrite+0x1e>
 800b5e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5e8:	2302      	movs	r3, #2
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	f000 f846 	bl	800b67c <_lseek_r>
 800b5f0:	89a3      	ldrh	r3, [r4, #12]
 800b5f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b5fa:	81a3      	strh	r3, [r4, #12]
 800b5fc:	4632      	mov	r2, r6
 800b5fe:	463b      	mov	r3, r7
 800b600:	4628      	mov	r0, r5
 800b602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b606:	f000 b817 	b.w	800b638 <_write_r>

0800b60a <__sseek>:
 800b60a:	b510      	push	{r4, lr}
 800b60c:	460c      	mov	r4, r1
 800b60e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b612:	f000 f833 	bl	800b67c <_lseek_r>
 800b616:	1c43      	adds	r3, r0, #1
 800b618:	89a3      	ldrh	r3, [r4, #12]
 800b61a:	bf15      	itete	ne
 800b61c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b61e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b622:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b626:	81a3      	strheq	r3, [r4, #12]
 800b628:	bf18      	it	ne
 800b62a:	81a3      	strhne	r3, [r4, #12]
 800b62c:	bd10      	pop	{r4, pc}

0800b62e <__sclose>:
 800b62e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b632:	f000 b813 	b.w	800b65c <_close_r>
	...

0800b638 <_write_r>:
 800b638:	b538      	push	{r3, r4, r5, lr}
 800b63a:	4d07      	ldr	r5, [pc, #28]	; (800b658 <_write_r+0x20>)
 800b63c:	4604      	mov	r4, r0
 800b63e:	4608      	mov	r0, r1
 800b640:	4611      	mov	r1, r2
 800b642:	2200      	movs	r2, #0
 800b644:	602a      	str	r2, [r5, #0]
 800b646:	461a      	mov	r2, r3
 800b648:	f7f8 f925 	bl	8003896 <_write>
 800b64c:	1c43      	adds	r3, r0, #1
 800b64e:	d102      	bne.n	800b656 <_write_r+0x1e>
 800b650:	682b      	ldr	r3, [r5, #0]
 800b652:	b103      	cbz	r3, 800b656 <_write_r+0x1e>
 800b654:	6023      	str	r3, [r4, #0]
 800b656:	bd38      	pop	{r3, r4, r5, pc}
 800b658:	20001188 	.word	0x20001188

0800b65c <_close_r>:
 800b65c:	b538      	push	{r3, r4, r5, lr}
 800b65e:	4d06      	ldr	r5, [pc, #24]	; (800b678 <_close_r+0x1c>)
 800b660:	2300      	movs	r3, #0
 800b662:	4604      	mov	r4, r0
 800b664:	4608      	mov	r0, r1
 800b666:	602b      	str	r3, [r5, #0]
 800b668:	f7f8 f931 	bl	80038ce <_close>
 800b66c:	1c43      	adds	r3, r0, #1
 800b66e:	d102      	bne.n	800b676 <_close_r+0x1a>
 800b670:	682b      	ldr	r3, [r5, #0]
 800b672:	b103      	cbz	r3, 800b676 <_close_r+0x1a>
 800b674:	6023      	str	r3, [r4, #0]
 800b676:	bd38      	pop	{r3, r4, r5, pc}
 800b678:	20001188 	.word	0x20001188

0800b67c <_lseek_r>:
 800b67c:	b538      	push	{r3, r4, r5, lr}
 800b67e:	4d07      	ldr	r5, [pc, #28]	; (800b69c <_lseek_r+0x20>)
 800b680:	4604      	mov	r4, r0
 800b682:	4608      	mov	r0, r1
 800b684:	4611      	mov	r1, r2
 800b686:	2200      	movs	r2, #0
 800b688:	602a      	str	r2, [r5, #0]
 800b68a:	461a      	mov	r2, r3
 800b68c:	f7f8 f92b 	bl	80038e6 <_lseek>
 800b690:	1c43      	adds	r3, r0, #1
 800b692:	d102      	bne.n	800b69a <_lseek_r+0x1e>
 800b694:	682b      	ldr	r3, [r5, #0]
 800b696:	b103      	cbz	r3, 800b69a <_lseek_r+0x1e>
 800b698:	6023      	str	r3, [r4, #0]
 800b69a:	bd38      	pop	{r3, r4, r5, pc}
 800b69c:	20001188 	.word	0x20001188

0800b6a0 <__malloc_lock>:
 800b6a0:	4801      	ldr	r0, [pc, #4]	; (800b6a8 <__malloc_lock+0x8>)
 800b6a2:	f7ff be48 	b.w	800b336 <__retarget_lock_acquire_recursive>
 800b6a6:	bf00      	nop
 800b6a8:	20001180 	.word	0x20001180

0800b6ac <__malloc_unlock>:
 800b6ac:	4801      	ldr	r0, [pc, #4]	; (800b6b4 <__malloc_unlock+0x8>)
 800b6ae:	f7ff be43 	b.w	800b338 <__retarget_lock_release_recursive>
 800b6b2:	bf00      	nop
 800b6b4:	20001180 	.word	0x20001180

0800b6b8 <_read_r>:
 800b6b8:	b538      	push	{r3, r4, r5, lr}
 800b6ba:	4d07      	ldr	r5, [pc, #28]	; (800b6d8 <_read_r+0x20>)
 800b6bc:	4604      	mov	r4, r0
 800b6be:	4608      	mov	r0, r1
 800b6c0:	4611      	mov	r1, r2
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	602a      	str	r2, [r5, #0]
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	f7f8 f8c8 	bl	800385c <_read>
 800b6cc:	1c43      	adds	r3, r0, #1
 800b6ce:	d102      	bne.n	800b6d6 <_read_r+0x1e>
 800b6d0:	682b      	ldr	r3, [r5, #0]
 800b6d2:	b103      	cbz	r3, 800b6d6 <_read_r+0x1e>
 800b6d4:	6023      	str	r3, [r4, #0]
 800b6d6:	bd38      	pop	{r3, r4, r5, pc}
 800b6d8:	20001188 	.word	0x20001188
 800b6dc:	00000000 	.word	0x00000000

0800b6e0 <sin>:
 800b6e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b6e2:	ec53 2b10 	vmov	r2, r3, d0
 800b6e6:	4826      	ldr	r0, [pc, #152]	; (800b780 <sin+0xa0>)
 800b6e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b6ec:	4281      	cmp	r1, r0
 800b6ee:	dc07      	bgt.n	800b700 <sin+0x20>
 800b6f0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800b778 <sin+0x98>
 800b6f4:	2000      	movs	r0, #0
 800b6f6:	f000 fe5b 	bl	800c3b0 <__kernel_sin>
 800b6fa:	ec51 0b10 	vmov	r0, r1, d0
 800b6fe:	e007      	b.n	800b710 <sin+0x30>
 800b700:	4820      	ldr	r0, [pc, #128]	; (800b784 <sin+0xa4>)
 800b702:	4281      	cmp	r1, r0
 800b704:	dd09      	ble.n	800b71a <sin+0x3a>
 800b706:	ee10 0a10 	vmov	r0, s0
 800b70a:	4619      	mov	r1, r3
 800b70c:	f7f4 fd64 	bl	80001d8 <__aeabi_dsub>
 800b710:	ec41 0b10 	vmov	d0, r0, r1
 800b714:	b005      	add	sp, #20
 800b716:	f85d fb04 	ldr.w	pc, [sp], #4
 800b71a:	4668      	mov	r0, sp
 800b71c:	f000 f834 	bl	800b788 <__ieee754_rem_pio2>
 800b720:	f000 0003 	and.w	r0, r0, #3
 800b724:	2801      	cmp	r0, #1
 800b726:	d008      	beq.n	800b73a <sin+0x5a>
 800b728:	2802      	cmp	r0, #2
 800b72a:	d00d      	beq.n	800b748 <sin+0x68>
 800b72c:	b9d0      	cbnz	r0, 800b764 <sin+0x84>
 800b72e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b732:	ed9d 0b00 	vldr	d0, [sp]
 800b736:	2001      	movs	r0, #1
 800b738:	e7dd      	b.n	800b6f6 <sin+0x16>
 800b73a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b73e:	ed9d 0b00 	vldr	d0, [sp]
 800b742:	f000 fa2d 	bl	800bba0 <__kernel_cos>
 800b746:	e7d8      	b.n	800b6fa <sin+0x1a>
 800b748:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b74c:	ed9d 0b00 	vldr	d0, [sp]
 800b750:	2001      	movs	r0, #1
 800b752:	f000 fe2d 	bl	800c3b0 <__kernel_sin>
 800b756:	ec53 2b10 	vmov	r2, r3, d0
 800b75a:	ee10 0a10 	vmov	r0, s0
 800b75e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b762:	e7d5      	b.n	800b710 <sin+0x30>
 800b764:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b768:	ed9d 0b00 	vldr	d0, [sp]
 800b76c:	f000 fa18 	bl	800bba0 <__kernel_cos>
 800b770:	e7f1      	b.n	800b756 <sin+0x76>
 800b772:	bf00      	nop
 800b774:	f3af 8000 	nop.w
	...
 800b780:	3fe921fb 	.word	0x3fe921fb
 800b784:	7fefffff 	.word	0x7fefffff

0800b788 <__ieee754_rem_pio2>:
 800b788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b78c:	ed2d 8b02 	vpush	{d8}
 800b790:	ec55 4b10 	vmov	r4, r5, d0
 800b794:	4bca      	ldr	r3, [pc, #808]	; (800bac0 <__ieee754_rem_pio2+0x338>)
 800b796:	b08b      	sub	sp, #44	; 0x2c
 800b798:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b79c:	4598      	cmp	r8, r3
 800b79e:	4682      	mov	sl, r0
 800b7a0:	9502      	str	r5, [sp, #8]
 800b7a2:	dc08      	bgt.n	800b7b6 <__ieee754_rem_pio2+0x2e>
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	ed80 0b00 	vstr	d0, [r0]
 800b7ac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b7b0:	f04f 0b00 	mov.w	fp, #0
 800b7b4:	e028      	b.n	800b808 <__ieee754_rem_pio2+0x80>
 800b7b6:	4bc3      	ldr	r3, [pc, #780]	; (800bac4 <__ieee754_rem_pio2+0x33c>)
 800b7b8:	4598      	cmp	r8, r3
 800b7ba:	dc78      	bgt.n	800b8ae <__ieee754_rem_pio2+0x126>
 800b7bc:	9b02      	ldr	r3, [sp, #8]
 800b7be:	4ec2      	ldr	r6, [pc, #776]	; (800bac8 <__ieee754_rem_pio2+0x340>)
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	ee10 0a10 	vmov	r0, s0
 800b7c6:	a3b0      	add	r3, pc, #704	; (adr r3, 800ba88 <__ieee754_rem_pio2+0x300>)
 800b7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7cc:	4629      	mov	r1, r5
 800b7ce:	dd39      	ble.n	800b844 <__ieee754_rem_pio2+0xbc>
 800b7d0:	f7f4 fd02 	bl	80001d8 <__aeabi_dsub>
 800b7d4:	45b0      	cmp	r8, r6
 800b7d6:	4604      	mov	r4, r0
 800b7d8:	460d      	mov	r5, r1
 800b7da:	d01b      	beq.n	800b814 <__ieee754_rem_pio2+0x8c>
 800b7dc:	a3ac      	add	r3, pc, #688	; (adr r3, 800ba90 <__ieee754_rem_pio2+0x308>)
 800b7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e2:	f7f4 fcf9 	bl	80001d8 <__aeabi_dsub>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	e9ca 2300 	strd	r2, r3, [sl]
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	4629      	mov	r1, r5
 800b7f2:	f7f4 fcf1 	bl	80001d8 <__aeabi_dsub>
 800b7f6:	a3a6      	add	r3, pc, #664	; (adr r3, 800ba90 <__ieee754_rem_pio2+0x308>)
 800b7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7fc:	f7f4 fcec 	bl	80001d8 <__aeabi_dsub>
 800b800:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b804:	f04f 0b01 	mov.w	fp, #1
 800b808:	4658      	mov	r0, fp
 800b80a:	b00b      	add	sp, #44	; 0x2c
 800b80c:	ecbd 8b02 	vpop	{d8}
 800b810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b814:	a3a0      	add	r3, pc, #640	; (adr r3, 800ba98 <__ieee754_rem_pio2+0x310>)
 800b816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81a:	f7f4 fcdd 	bl	80001d8 <__aeabi_dsub>
 800b81e:	a3a0      	add	r3, pc, #640	; (adr r3, 800baa0 <__ieee754_rem_pio2+0x318>)
 800b820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b824:	4604      	mov	r4, r0
 800b826:	460d      	mov	r5, r1
 800b828:	f7f4 fcd6 	bl	80001d8 <__aeabi_dsub>
 800b82c:	4602      	mov	r2, r0
 800b82e:	460b      	mov	r3, r1
 800b830:	e9ca 2300 	strd	r2, r3, [sl]
 800b834:	4620      	mov	r0, r4
 800b836:	4629      	mov	r1, r5
 800b838:	f7f4 fcce 	bl	80001d8 <__aeabi_dsub>
 800b83c:	a398      	add	r3, pc, #608	; (adr r3, 800baa0 <__ieee754_rem_pio2+0x318>)
 800b83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b842:	e7db      	b.n	800b7fc <__ieee754_rem_pio2+0x74>
 800b844:	f7f4 fcca 	bl	80001dc <__adddf3>
 800b848:	45b0      	cmp	r8, r6
 800b84a:	4604      	mov	r4, r0
 800b84c:	460d      	mov	r5, r1
 800b84e:	d016      	beq.n	800b87e <__ieee754_rem_pio2+0xf6>
 800b850:	a38f      	add	r3, pc, #572	; (adr r3, 800ba90 <__ieee754_rem_pio2+0x308>)
 800b852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b856:	f7f4 fcc1 	bl	80001dc <__adddf3>
 800b85a:	4602      	mov	r2, r0
 800b85c:	460b      	mov	r3, r1
 800b85e:	e9ca 2300 	strd	r2, r3, [sl]
 800b862:	4620      	mov	r0, r4
 800b864:	4629      	mov	r1, r5
 800b866:	f7f4 fcb7 	bl	80001d8 <__aeabi_dsub>
 800b86a:	a389      	add	r3, pc, #548	; (adr r3, 800ba90 <__ieee754_rem_pio2+0x308>)
 800b86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b870:	f7f4 fcb4 	bl	80001dc <__adddf3>
 800b874:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800b878:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b87c:	e7c4      	b.n	800b808 <__ieee754_rem_pio2+0x80>
 800b87e:	a386      	add	r3, pc, #536	; (adr r3, 800ba98 <__ieee754_rem_pio2+0x310>)
 800b880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b884:	f7f4 fcaa 	bl	80001dc <__adddf3>
 800b888:	a385      	add	r3, pc, #532	; (adr r3, 800baa0 <__ieee754_rem_pio2+0x318>)
 800b88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88e:	4604      	mov	r4, r0
 800b890:	460d      	mov	r5, r1
 800b892:	f7f4 fca3 	bl	80001dc <__adddf3>
 800b896:	4602      	mov	r2, r0
 800b898:	460b      	mov	r3, r1
 800b89a:	e9ca 2300 	strd	r2, r3, [sl]
 800b89e:	4620      	mov	r0, r4
 800b8a0:	4629      	mov	r1, r5
 800b8a2:	f7f4 fc99 	bl	80001d8 <__aeabi_dsub>
 800b8a6:	a37e      	add	r3, pc, #504	; (adr r3, 800baa0 <__ieee754_rem_pio2+0x318>)
 800b8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ac:	e7e0      	b.n	800b870 <__ieee754_rem_pio2+0xe8>
 800b8ae:	4b87      	ldr	r3, [pc, #540]	; (800bacc <__ieee754_rem_pio2+0x344>)
 800b8b0:	4598      	cmp	r8, r3
 800b8b2:	f300 80d9 	bgt.w	800ba68 <__ieee754_rem_pio2+0x2e0>
 800b8b6:	f000 fe39 	bl	800c52c <fabs>
 800b8ba:	ec55 4b10 	vmov	r4, r5, d0
 800b8be:	ee10 0a10 	vmov	r0, s0
 800b8c2:	a379      	add	r3, pc, #484	; (adr r3, 800baa8 <__ieee754_rem_pio2+0x320>)
 800b8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c8:	4629      	mov	r1, r5
 800b8ca:	f7f4 fe3d 	bl	8000548 <__aeabi_dmul>
 800b8ce:	4b80      	ldr	r3, [pc, #512]	; (800bad0 <__ieee754_rem_pio2+0x348>)
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	f7f4 fc83 	bl	80001dc <__adddf3>
 800b8d6:	f7f5 f8d1 	bl	8000a7c <__aeabi_d2iz>
 800b8da:	4683      	mov	fp, r0
 800b8dc:	f7f4 fdca 	bl	8000474 <__aeabi_i2d>
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	ec43 2b18 	vmov	d8, r2, r3
 800b8e8:	a367      	add	r3, pc, #412	; (adr r3, 800ba88 <__ieee754_rem_pio2+0x300>)
 800b8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ee:	f7f4 fe2b 	bl	8000548 <__aeabi_dmul>
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	460b      	mov	r3, r1
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	4629      	mov	r1, r5
 800b8fa:	f7f4 fc6d 	bl	80001d8 <__aeabi_dsub>
 800b8fe:	a364      	add	r3, pc, #400	; (adr r3, 800ba90 <__ieee754_rem_pio2+0x308>)
 800b900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b904:	4606      	mov	r6, r0
 800b906:	460f      	mov	r7, r1
 800b908:	ec51 0b18 	vmov	r0, r1, d8
 800b90c:	f7f4 fe1c 	bl	8000548 <__aeabi_dmul>
 800b910:	f1bb 0f1f 	cmp.w	fp, #31
 800b914:	4604      	mov	r4, r0
 800b916:	460d      	mov	r5, r1
 800b918:	dc0d      	bgt.n	800b936 <__ieee754_rem_pio2+0x1ae>
 800b91a:	4b6e      	ldr	r3, [pc, #440]	; (800bad4 <__ieee754_rem_pio2+0x34c>)
 800b91c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800b920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b924:	4543      	cmp	r3, r8
 800b926:	d006      	beq.n	800b936 <__ieee754_rem_pio2+0x1ae>
 800b928:	4622      	mov	r2, r4
 800b92a:	462b      	mov	r3, r5
 800b92c:	4630      	mov	r0, r6
 800b92e:	4639      	mov	r1, r7
 800b930:	f7f4 fc52 	bl	80001d8 <__aeabi_dsub>
 800b934:	e00f      	b.n	800b956 <__ieee754_rem_pio2+0x1ce>
 800b936:	462b      	mov	r3, r5
 800b938:	4622      	mov	r2, r4
 800b93a:	4630      	mov	r0, r6
 800b93c:	4639      	mov	r1, r7
 800b93e:	f7f4 fc4b 	bl	80001d8 <__aeabi_dsub>
 800b942:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b946:	9303      	str	r3, [sp, #12]
 800b948:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b94c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800b950:	f1b8 0f10 	cmp.w	r8, #16
 800b954:	dc02      	bgt.n	800b95c <__ieee754_rem_pio2+0x1d4>
 800b956:	e9ca 0100 	strd	r0, r1, [sl]
 800b95a:	e039      	b.n	800b9d0 <__ieee754_rem_pio2+0x248>
 800b95c:	a34e      	add	r3, pc, #312	; (adr r3, 800ba98 <__ieee754_rem_pio2+0x310>)
 800b95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b962:	ec51 0b18 	vmov	r0, r1, d8
 800b966:	f7f4 fdef 	bl	8000548 <__aeabi_dmul>
 800b96a:	4604      	mov	r4, r0
 800b96c:	460d      	mov	r5, r1
 800b96e:	4602      	mov	r2, r0
 800b970:	460b      	mov	r3, r1
 800b972:	4630      	mov	r0, r6
 800b974:	4639      	mov	r1, r7
 800b976:	f7f4 fc2f 	bl	80001d8 <__aeabi_dsub>
 800b97a:	4602      	mov	r2, r0
 800b97c:	460b      	mov	r3, r1
 800b97e:	4680      	mov	r8, r0
 800b980:	4689      	mov	r9, r1
 800b982:	4630      	mov	r0, r6
 800b984:	4639      	mov	r1, r7
 800b986:	f7f4 fc27 	bl	80001d8 <__aeabi_dsub>
 800b98a:	4622      	mov	r2, r4
 800b98c:	462b      	mov	r3, r5
 800b98e:	f7f4 fc23 	bl	80001d8 <__aeabi_dsub>
 800b992:	a343      	add	r3, pc, #268	; (adr r3, 800baa0 <__ieee754_rem_pio2+0x318>)
 800b994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b998:	4604      	mov	r4, r0
 800b99a:	460d      	mov	r5, r1
 800b99c:	ec51 0b18 	vmov	r0, r1, d8
 800b9a0:	f7f4 fdd2 	bl	8000548 <__aeabi_dmul>
 800b9a4:	4622      	mov	r2, r4
 800b9a6:	462b      	mov	r3, r5
 800b9a8:	f7f4 fc16 	bl	80001d8 <__aeabi_dsub>
 800b9ac:	4602      	mov	r2, r0
 800b9ae:	460b      	mov	r3, r1
 800b9b0:	4604      	mov	r4, r0
 800b9b2:	460d      	mov	r5, r1
 800b9b4:	4640      	mov	r0, r8
 800b9b6:	4649      	mov	r1, r9
 800b9b8:	f7f4 fc0e 	bl	80001d8 <__aeabi_dsub>
 800b9bc:	9a03      	ldr	r2, [sp, #12]
 800b9be:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b9c2:	1ad3      	subs	r3, r2, r3
 800b9c4:	2b31      	cmp	r3, #49	; 0x31
 800b9c6:	dc24      	bgt.n	800ba12 <__ieee754_rem_pio2+0x28a>
 800b9c8:	e9ca 0100 	strd	r0, r1, [sl]
 800b9cc:	4646      	mov	r6, r8
 800b9ce:	464f      	mov	r7, r9
 800b9d0:	e9da 8900 	ldrd	r8, r9, [sl]
 800b9d4:	4630      	mov	r0, r6
 800b9d6:	4642      	mov	r2, r8
 800b9d8:	464b      	mov	r3, r9
 800b9da:	4639      	mov	r1, r7
 800b9dc:	f7f4 fbfc 	bl	80001d8 <__aeabi_dsub>
 800b9e0:	462b      	mov	r3, r5
 800b9e2:	4622      	mov	r2, r4
 800b9e4:	f7f4 fbf8 	bl	80001d8 <__aeabi_dsub>
 800b9e8:	9b02      	ldr	r3, [sp, #8]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b9f0:	f6bf af0a 	bge.w	800b808 <__ieee754_rem_pio2+0x80>
 800b9f4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b9f8:	f8ca 3004 	str.w	r3, [sl, #4]
 800b9fc:	f8ca 8000 	str.w	r8, [sl]
 800ba00:	f8ca 0008 	str.w	r0, [sl, #8]
 800ba04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba08:	f8ca 300c 	str.w	r3, [sl, #12]
 800ba0c:	f1cb 0b00 	rsb	fp, fp, #0
 800ba10:	e6fa      	b.n	800b808 <__ieee754_rem_pio2+0x80>
 800ba12:	a327      	add	r3, pc, #156	; (adr r3, 800bab0 <__ieee754_rem_pio2+0x328>)
 800ba14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba18:	ec51 0b18 	vmov	r0, r1, d8
 800ba1c:	f7f4 fd94 	bl	8000548 <__aeabi_dmul>
 800ba20:	4604      	mov	r4, r0
 800ba22:	460d      	mov	r5, r1
 800ba24:	4602      	mov	r2, r0
 800ba26:	460b      	mov	r3, r1
 800ba28:	4640      	mov	r0, r8
 800ba2a:	4649      	mov	r1, r9
 800ba2c:	f7f4 fbd4 	bl	80001d8 <__aeabi_dsub>
 800ba30:	4602      	mov	r2, r0
 800ba32:	460b      	mov	r3, r1
 800ba34:	4606      	mov	r6, r0
 800ba36:	460f      	mov	r7, r1
 800ba38:	4640      	mov	r0, r8
 800ba3a:	4649      	mov	r1, r9
 800ba3c:	f7f4 fbcc 	bl	80001d8 <__aeabi_dsub>
 800ba40:	4622      	mov	r2, r4
 800ba42:	462b      	mov	r3, r5
 800ba44:	f7f4 fbc8 	bl	80001d8 <__aeabi_dsub>
 800ba48:	a31b      	add	r3, pc, #108	; (adr r3, 800bab8 <__ieee754_rem_pio2+0x330>)
 800ba4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4e:	4604      	mov	r4, r0
 800ba50:	460d      	mov	r5, r1
 800ba52:	ec51 0b18 	vmov	r0, r1, d8
 800ba56:	f7f4 fd77 	bl	8000548 <__aeabi_dmul>
 800ba5a:	4622      	mov	r2, r4
 800ba5c:	462b      	mov	r3, r5
 800ba5e:	f7f4 fbbb 	bl	80001d8 <__aeabi_dsub>
 800ba62:	4604      	mov	r4, r0
 800ba64:	460d      	mov	r5, r1
 800ba66:	e75f      	b.n	800b928 <__ieee754_rem_pio2+0x1a0>
 800ba68:	4b1b      	ldr	r3, [pc, #108]	; (800bad8 <__ieee754_rem_pio2+0x350>)
 800ba6a:	4598      	cmp	r8, r3
 800ba6c:	dd36      	ble.n	800badc <__ieee754_rem_pio2+0x354>
 800ba6e:	ee10 2a10 	vmov	r2, s0
 800ba72:	462b      	mov	r3, r5
 800ba74:	4620      	mov	r0, r4
 800ba76:	4629      	mov	r1, r5
 800ba78:	f7f4 fbae 	bl	80001d8 <__aeabi_dsub>
 800ba7c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ba80:	e9ca 0100 	strd	r0, r1, [sl]
 800ba84:	e694      	b.n	800b7b0 <__ieee754_rem_pio2+0x28>
 800ba86:	bf00      	nop
 800ba88:	54400000 	.word	0x54400000
 800ba8c:	3ff921fb 	.word	0x3ff921fb
 800ba90:	1a626331 	.word	0x1a626331
 800ba94:	3dd0b461 	.word	0x3dd0b461
 800ba98:	1a600000 	.word	0x1a600000
 800ba9c:	3dd0b461 	.word	0x3dd0b461
 800baa0:	2e037073 	.word	0x2e037073
 800baa4:	3ba3198a 	.word	0x3ba3198a
 800baa8:	6dc9c883 	.word	0x6dc9c883
 800baac:	3fe45f30 	.word	0x3fe45f30
 800bab0:	2e000000 	.word	0x2e000000
 800bab4:	3ba3198a 	.word	0x3ba3198a
 800bab8:	252049c1 	.word	0x252049c1
 800babc:	397b839a 	.word	0x397b839a
 800bac0:	3fe921fb 	.word	0x3fe921fb
 800bac4:	4002d97b 	.word	0x4002d97b
 800bac8:	3ff921fb 	.word	0x3ff921fb
 800bacc:	413921fb 	.word	0x413921fb
 800bad0:	3fe00000 	.word	0x3fe00000
 800bad4:	0800c8dc 	.word	0x0800c8dc
 800bad8:	7fefffff 	.word	0x7fefffff
 800badc:	ea4f 5428 	mov.w	r4, r8, asr #20
 800bae0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800bae4:	ee10 0a10 	vmov	r0, s0
 800bae8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800baec:	ee10 6a10 	vmov	r6, s0
 800baf0:	460f      	mov	r7, r1
 800baf2:	f7f4 ffc3 	bl	8000a7c <__aeabi_d2iz>
 800baf6:	f7f4 fcbd 	bl	8000474 <__aeabi_i2d>
 800bafa:	4602      	mov	r2, r0
 800bafc:	460b      	mov	r3, r1
 800bafe:	4630      	mov	r0, r6
 800bb00:	4639      	mov	r1, r7
 800bb02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bb06:	f7f4 fb67 	bl	80001d8 <__aeabi_dsub>
 800bb0a:	4b22      	ldr	r3, [pc, #136]	; (800bb94 <__ieee754_rem_pio2+0x40c>)
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	f7f4 fd1b 	bl	8000548 <__aeabi_dmul>
 800bb12:	460f      	mov	r7, r1
 800bb14:	4606      	mov	r6, r0
 800bb16:	f7f4 ffb1 	bl	8000a7c <__aeabi_d2iz>
 800bb1a:	f7f4 fcab 	bl	8000474 <__aeabi_i2d>
 800bb1e:	4602      	mov	r2, r0
 800bb20:	460b      	mov	r3, r1
 800bb22:	4630      	mov	r0, r6
 800bb24:	4639      	mov	r1, r7
 800bb26:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bb2a:	f7f4 fb55 	bl	80001d8 <__aeabi_dsub>
 800bb2e:	4b19      	ldr	r3, [pc, #100]	; (800bb94 <__ieee754_rem_pio2+0x40c>)
 800bb30:	2200      	movs	r2, #0
 800bb32:	f7f4 fd09 	bl	8000548 <__aeabi_dmul>
 800bb36:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bb3a:	ad04      	add	r5, sp, #16
 800bb3c:	f04f 0803 	mov.w	r8, #3
 800bb40:	46a9      	mov	r9, r5
 800bb42:	2600      	movs	r6, #0
 800bb44:	2700      	movs	r7, #0
 800bb46:	4632      	mov	r2, r6
 800bb48:	463b      	mov	r3, r7
 800bb4a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800bb4e:	46c3      	mov	fp, r8
 800bb50:	3d08      	subs	r5, #8
 800bb52:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bb56:	f7f4 ff5f 	bl	8000a18 <__aeabi_dcmpeq>
 800bb5a:	2800      	cmp	r0, #0
 800bb5c:	d1f3      	bne.n	800bb46 <__ieee754_rem_pio2+0x3be>
 800bb5e:	4b0e      	ldr	r3, [pc, #56]	; (800bb98 <__ieee754_rem_pio2+0x410>)
 800bb60:	9301      	str	r3, [sp, #4]
 800bb62:	2302      	movs	r3, #2
 800bb64:	9300      	str	r3, [sp, #0]
 800bb66:	4622      	mov	r2, r4
 800bb68:	465b      	mov	r3, fp
 800bb6a:	4651      	mov	r1, sl
 800bb6c:	4648      	mov	r0, r9
 800bb6e:	f000 f8df 	bl	800bd30 <__kernel_rem_pio2>
 800bb72:	9b02      	ldr	r3, [sp, #8]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	4683      	mov	fp, r0
 800bb78:	f6bf ae46 	bge.w	800b808 <__ieee754_rem_pio2+0x80>
 800bb7c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800bb80:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bb84:	f8ca 3004 	str.w	r3, [sl, #4]
 800bb88:	f8da 300c 	ldr.w	r3, [sl, #12]
 800bb8c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bb90:	e73a      	b.n	800ba08 <__ieee754_rem_pio2+0x280>
 800bb92:	bf00      	nop
 800bb94:	41700000 	.word	0x41700000
 800bb98:	0800c95c 	.word	0x0800c95c
 800bb9c:	00000000 	.word	0x00000000

0800bba0 <__kernel_cos>:
 800bba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bba4:	ec57 6b10 	vmov	r6, r7, d0
 800bba8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800bbac:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800bbb0:	ed8d 1b00 	vstr	d1, [sp]
 800bbb4:	da07      	bge.n	800bbc6 <__kernel_cos+0x26>
 800bbb6:	ee10 0a10 	vmov	r0, s0
 800bbba:	4639      	mov	r1, r7
 800bbbc:	f7f4 ff5e 	bl	8000a7c <__aeabi_d2iz>
 800bbc0:	2800      	cmp	r0, #0
 800bbc2:	f000 8088 	beq.w	800bcd6 <__kernel_cos+0x136>
 800bbc6:	4632      	mov	r2, r6
 800bbc8:	463b      	mov	r3, r7
 800bbca:	4630      	mov	r0, r6
 800bbcc:	4639      	mov	r1, r7
 800bbce:	f7f4 fcbb 	bl	8000548 <__aeabi_dmul>
 800bbd2:	4b51      	ldr	r3, [pc, #324]	; (800bd18 <__kernel_cos+0x178>)
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	4604      	mov	r4, r0
 800bbd8:	460d      	mov	r5, r1
 800bbda:	f7f4 fcb5 	bl	8000548 <__aeabi_dmul>
 800bbde:	a340      	add	r3, pc, #256	; (adr r3, 800bce0 <__kernel_cos+0x140>)
 800bbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe4:	4682      	mov	sl, r0
 800bbe6:	468b      	mov	fp, r1
 800bbe8:	4620      	mov	r0, r4
 800bbea:	4629      	mov	r1, r5
 800bbec:	f7f4 fcac 	bl	8000548 <__aeabi_dmul>
 800bbf0:	a33d      	add	r3, pc, #244	; (adr r3, 800bce8 <__kernel_cos+0x148>)
 800bbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf6:	f7f4 faf1 	bl	80001dc <__adddf3>
 800bbfa:	4622      	mov	r2, r4
 800bbfc:	462b      	mov	r3, r5
 800bbfe:	f7f4 fca3 	bl	8000548 <__aeabi_dmul>
 800bc02:	a33b      	add	r3, pc, #236	; (adr r3, 800bcf0 <__kernel_cos+0x150>)
 800bc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc08:	f7f4 fae6 	bl	80001d8 <__aeabi_dsub>
 800bc0c:	4622      	mov	r2, r4
 800bc0e:	462b      	mov	r3, r5
 800bc10:	f7f4 fc9a 	bl	8000548 <__aeabi_dmul>
 800bc14:	a338      	add	r3, pc, #224	; (adr r3, 800bcf8 <__kernel_cos+0x158>)
 800bc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc1a:	f7f4 fadf 	bl	80001dc <__adddf3>
 800bc1e:	4622      	mov	r2, r4
 800bc20:	462b      	mov	r3, r5
 800bc22:	f7f4 fc91 	bl	8000548 <__aeabi_dmul>
 800bc26:	a336      	add	r3, pc, #216	; (adr r3, 800bd00 <__kernel_cos+0x160>)
 800bc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2c:	f7f4 fad4 	bl	80001d8 <__aeabi_dsub>
 800bc30:	4622      	mov	r2, r4
 800bc32:	462b      	mov	r3, r5
 800bc34:	f7f4 fc88 	bl	8000548 <__aeabi_dmul>
 800bc38:	a333      	add	r3, pc, #204	; (adr r3, 800bd08 <__kernel_cos+0x168>)
 800bc3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc3e:	f7f4 facd 	bl	80001dc <__adddf3>
 800bc42:	4622      	mov	r2, r4
 800bc44:	462b      	mov	r3, r5
 800bc46:	f7f4 fc7f 	bl	8000548 <__aeabi_dmul>
 800bc4a:	4622      	mov	r2, r4
 800bc4c:	462b      	mov	r3, r5
 800bc4e:	f7f4 fc7b 	bl	8000548 <__aeabi_dmul>
 800bc52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc56:	4604      	mov	r4, r0
 800bc58:	460d      	mov	r5, r1
 800bc5a:	4630      	mov	r0, r6
 800bc5c:	4639      	mov	r1, r7
 800bc5e:	f7f4 fc73 	bl	8000548 <__aeabi_dmul>
 800bc62:	460b      	mov	r3, r1
 800bc64:	4602      	mov	r2, r0
 800bc66:	4629      	mov	r1, r5
 800bc68:	4620      	mov	r0, r4
 800bc6a:	f7f4 fab5 	bl	80001d8 <__aeabi_dsub>
 800bc6e:	4b2b      	ldr	r3, [pc, #172]	; (800bd1c <__kernel_cos+0x17c>)
 800bc70:	4598      	cmp	r8, r3
 800bc72:	4606      	mov	r6, r0
 800bc74:	460f      	mov	r7, r1
 800bc76:	dc10      	bgt.n	800bc9a <__kernel_cos+0xfa>
 800bc78:	4602      	mov	r2, r0
 800bc7a:	460b      	mov	r3, r1
 800bc7c:	4650      	mov	r0, sl
 800bc7e:	4659      	mov	r1, fp
 800bc80:	f7f4 faaa 	bl	80001d8 <__aeabi_dsub>
 800bc84:	460b      	mov	r3, r1
 800bc86:	4926      	ldr	r1, [pc, #152]	; (800bd20 <__kernel_cos+0x180>)
 800bc88:	4602      	mov	r2, r0
 800bc8a:	2000      	movs	r0, #0
 800bc8c:	f7f4 faa4 	bl	80001d8 <__aeabi_dsub>
 800bc90:	ec41 0b10 	vmov	d0, r0, r1
 800bc94:	b003      	add	sp, #12
 800bc96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc9a:	4b22      	ldr	r3, [pc, #136]	; (800bd24 <__kernel_cos+0x184>)
 800bc9c:	4920      	ldr	r1, [pc, #128]	; (800bd20 <__kernel_cos+0x180>)
 800bc9e:	4598      	cmp	r8, r3
 800bca0:	bfcc      	ite	gt
 800bca2:	4d21      	ldrgt	r5, [pc, #132]	; (800bd28 <__kernel_cos+0x188>)
 800bca4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800bca8:	2400      	movs	r4, #0
 800bcaa:	4622      	mov	r2, r4
 800bcac:	462b      	mov	r3, r5
 800bcae:	2000      	movs	r0, #0
 800bcb0:	f7f4 fa92 	bl	80001d8 <__aeabi_dsub>
 800bcb4:	4622      	mov	r2, r4
 800bcb6:	4680      	mov	r8, r0
 800bcb8:	4689      	mov	r9, r1
 800bcba:	462b      	mov	r3, r5
 800bcbc:	4650      	mov	r0, sl
 800bcbe:	4659      	mov	r1, fp
 800bcc0:	f7f4 fa8a 	bl	80001d8 <__aeabi_dsub>
 800bcc4:	4632      	mov	r2, r6
 800bcc6:	463b      	mov	r3, r7
 800bcc8:	f7f4 fa86 	bl	80001d8 <__aeabi_dsub>
 800bccc:	4602      	mov	r2, r0
 800bcce:	460b      	mov	r3, r1
 800bcd0:	4640      	mov	r0, r8
 800bcd2:	4649      	mov	r1, r9
 800bcd4:	e7da      	b.n	800bc8c <__kernel_cos+0xec>
 800bcd6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800bd10 <__kernel_cos+0x170>
 800bcda:	e7db      	b.n	800bc94 <__kernel_cos+0xf4>
 800bcdc:	f3af 8000 	nop.w
 800bce0:	be8838d4 	.word	0xbe8838d4
 800bce4:	bda8fae9 	.word	0xbda8fae9
 800bce8:	bdb4b1c4 	.word	0xbdb4b1c4
 800bcec:	3e21ee9e 	.word	0x3e21ee9e
 800bcf0:	809c52ad 	.word	0x809c52ad
 800bcf4:	3e927e4f 	.word	0x3e927e4f
 800bcf8:	19cb1590 	.word	0x19cb1590
 800bcfc:	3efa01a0 	.word	0x3efa01a0
 800bd00:	16c15177 	.word	0x16c15177
 800bd04:	3f56c16c 	.word	0x3f56c16c
 800bd08:	5555554c 	.word	0x5555554c
 800bd0c:	3fa55555 	.word	0x3fa55555
 800bd10:	00000000 	.word	0x00000000
 800bd14:	3ff00000 	.word	0x3ff00000
 800bd18:	3fe00000 	.word	0x3fe00000
 800bd1c:	3fd33332 	.word	0x3fd33332
 800bd20:	3ff00000 	.word	0x3ff00000
 800bd24:	3fe90000 	.word	0x3fe90000
 800bd28:	3fd20000 	.word	0x3fd20000
 800bd2c:	00000000 	.word	0x00000000

0800bd30 <__kernel_rem_pio2>:
 800bd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd34:	ed2d 8b02 	vpush	{d8}
 800bd38:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800bd3c:	f112 0f14 	cmn.w	r2, #20
 800bd40:	9308      	str	r3, [sp, #32]
 800bd42:	9101      	str	r1, [sp, #4]
 800bd44:	4bc6      	ldr	r3, [pc, #792]	; (800c060 <__kernel_rem_pio2+0x330>)
 800bd46:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800bd48:	9009      	str	r0, [sp, #36]	; 0x24
 800bd4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bd4e:	9304      	str	r3, [sp, #16]
 800bd50:	9b08      	ldr	r3, [sp, #32]
 800bd52:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800bd56:	bfa8      	it	ge
 800bd58:	1ed4      	subge	r4, r2, #3
 800bd5a:	9306      	str	r3, [sp, #24]
 800bd5c:	bfb2      	itee	lt
 800bd5e:	2400      	movlt	r4, #0
 800bd60:	2318      	movge	r3, #24
 800bd62:	fb94 f4f3 	sdivge	r4, r4, r3
 800bd66:	f06f 0317 	mvn.w	r3, #23
 800bd6a:	fb04 3303 	mla	r3, r4, r3, r3
 800bd6e:	eb03 0a02 	add.w	sl, r3, r2
 800bd72:	9b04      	ldr	r3, [sp, #16]
 800bd74:	9a06      	ldr	r2, [sp, #24]
 800bd76:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800c050 <__kernel_rem_pio2+0x320>
 800bd7a:	eb03 0802 	add.w	r8, r3, r2
 800bd7e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800bd80:	1aa7      	subs	r7, r4, r2
 800bd82:	ae20      	add	r6, sp, #128	; 0x80
 800bd84:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bd88:	2500      	movs	r5, #0
 800bd8a:	4545      	cmp	r5, r8
 800bd8c:	dd18      	ble.n	800bdc0 <__kernel_rem_pio2+0x90>
 800bd8e:	9b08      	ldr	r3, [sp, #32]
 800bd90:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800bd94:	aa20      	add	r2, sp, #128	; 0x80
 800bd96:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800c050 <__kernel_rem_pio2+0x320>
 800bd9a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800bd9e:	f1c3 0301 	rsb	r3, r3, #1
 800bda2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800bda6:	9307      	str	r3, [sp, #28]
 800bda8:	9b07      	ldr	r3, [sp, #28]
 800bdaa:	9a04      	ldr	r2, [sp, #16]
 800bdac:	4443      	add	r3, r8
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	db2f      	blt.n	800be12 <__kernel_rem_pio2+0xe2>
 800bdb2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bdb6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800bdba:	462f      	mov	r7, r5
 800bdbc:	2600      	movs	r6, #0
 800bdbe:	e01b      	b.n	800bdf8 <__kernel_rem_pio2+0xc8>
 800bdc0:	42ef      	cmn	r7, r5
 800bdc2:	d407      	bmi.n	800bdd4 <__kernel_rem_pio2+0xa4>
 800bdc4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bdc8:	f7f4 fb54 	bl	8000474 <__aeabi_i2d>
 800bdcc:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bdd0:	3501      	adds	r5, #1
 800bdd2:	e7da      	b.n	800bd8a <__kernel_rem_pio2+0x5a>
 800bdd4:	ec51 0b18 	vmov	r0, r1, d8
 800bdd8:	e7f8      	b.n	800bdcc <__kernel_rem_pio2+0x9c>
 800bdda:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdde:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bde2:	f7f4 fbb1 	bl	8000548 <__aeabi_dmul>
 800bde6:	4602      	mov	r2, r0
 800bde8:	460b      	mov	r3, r1
 800bdea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdee:	f7f4 f9f5 	bl	80001dc <__adddf3>
 800bdf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdf6:	3601      	adds	r6, #1
 800bdf8:	9b06      	ldr	r3, [sp, #24]
 800bdfa:	429e      	cmp	r6, r3
 800bdfc:	f1a7 0708 	sub.w	r7, r7, #8
 800be00:	ddeb      	ble.n	800bdda <__kernel_rem_pio2+0xaa>
 800be02:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be06:	3508      	adds	r5, #8
 800be08:	ecab 7b02 	vstmia	fp!, {d7}
 800be0c:	f108 0801 	add.w	r8, r8, #1
 800be10:	e7ca      	b.n	800bda8 <__kernel_rem_pio2+0x78>
 800be12:	9b04      	ldr	r3, [sp, #16]
 800be14:	aa0c      	add	r2, sp, #48	; 0x30
 800be16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800be1a:	930b      	str	r3, [sp, #44]	; 0x2c
 800be1c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800be1e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800be22:	9c04      	ldr	r4, [sp, #16]
 800be24:	930a      	str	r3, [sp, #40]	; 0x28
 800be26:	ab98      	add	r3, sp, #608	; 0x260
 800be28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800be2c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800be30:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800be34:	f8cd b008 	str.w	fp, [sp, #8]
 800be38:	4625      	mov	r5, r4
 800be3a:	2d00      	cmp	r5, #0
 800be3c:	dc78      	bgt.n	800bf30 <__kernel_rem_pio2+0x200>
 800be3e:	ec47 6b10 	vmov	d0, r6, r7
 800be42:	4650      	mov	r0, sl
 800be44:	f000 fbfc 	bl	800c640 <scalbn>
 800be48:	ec57 6b10 	vmov	r6, r7, d0
 800be4c:	2200      	movs	r2, #0
 800be4e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800be52:	ee10 0a10 	vmov	r0, s0
 800be56:	4639      	mov	r1, r7
 800be58:	f7f4 fb76 	bl	8000548 <__aeabi_dmul>
 800be5c:	ec41 0b10 	vmov	d0, r0, r1
 800be60:	f000 fb6e 	bl	800c540 <floor>
 800be64:	4b7f      	ldr	r3, [pc, #508]	; (800c064 <__kernel_rem_pio2+0x334>)
 800be66:	ec51 0b10 	vmov	r0, r1, d0
 800be6a:	2200      	movs	r2, #0
 800be6c:	f7f4 fb6c 	bl	8000548 <__aeabi_dmul>
 800be70:	4602      	mov	r2, r0
 800be72:	460b      	mov	r3, r1
 800be74:	4630      	mov	r0, r6
 800be76:	4639      	mov	r1, r7
 800be78:	f7f4 f9ae 	bl	80001d8 <__aeabi_dsub>
 800be7c:	460f      	mov	r7, r1
 800be7e:	4606      	mov	r6, r0
 800be80:	f7f4 fdfc 	bl	8000a7c <__aeabi_d2iz>
 800be84:	9007      	str	r0, [sp, #28]
 800be86:	f7f4 faf5 	bl	8000474 <__aeabi_i2d>
 800be8a:	4602      	mov	r2, r0
 800be8c:	460b      	mov	r3, r1
 800be8e:	4630      	mov	r0, r6
 800be90:	4639      	mov	r1, r7
 800be92:	f7f4 f9a1 	bl	80001d8 <__aeabi_dsub>
 800be96:	f1ba 0f00 	cmp.w	sl, #0
 800be9a:	4606      	mov	r6, r0
 800be9c:	460f      	mov	r7, r1
 800be9e:	dd70      	ble.n	800bf82 <__kernel_rem_pio2+0x252>
 800bea0:	1e62      	subs	r2, r4, #1
 800bea2:	ab0c      	add	r3, sp, #48	; 0x30
 800bea4:	9d07      	ldr	r5, [sp, #28]
 800bea6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800beaa:	f1ca 0118 	rsb	r1, sl, #24
 800beae:	fa40 f301 	asr.w	r3, r0, r1
 800beb2:	441d      	add	r5, r3
 800beb4:	408b      	lsls	r3, r1
 800beb6:	1ac0      	subs	r0, r0, r3
 800beb8:	ab0c      	add	r3, sp, #48	; 0x30
 800beba:	9507      	str	r5, [sp, #28]
 800bebc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800bec0:	f1ca 0317 	rsb	r3, sl, #23
 800bec4:	fa40 f303 	asr.w	r3, r0, r3
 800bec8:	9302      	str	r3, [sp, #8]
 800beca:	9b02      	ldr	r3, [sp, #8]
 800becc:	2b00      	cmp	r3, #0
 800bece:	dd66      	ble.n	800bf9e <__kernel_rem_pio2+0x26e>
 800bed0:	9b07      	ldr	r3, [sp, #28]
 800bed2:	2200      	movs	r2, #0
 800bed4:	3301      	adds	r3, #1
 800bed6:	9307      	str	r3, [sp, #28]
 800bed8:	4615      	mov	r5, r2
 800beda:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800bede:	4294      	cmp	r4, r2
 800bee0:	f300 8099 	bgt.w	800c016 <__kernel_rem_pio2+0x2e6>
 800bee4:	f1ba 0f00 	cmp.w	sl, #0
 800bee8:	dd07      	ble.n	800befa <__kernel_rem_pio2+0x1ca>
 800beea:	f1ba 0f01 	cmp.w	sl, #1
 800beee:	f000 80a5 	beq.w	800c03c <__kernel_rem_pio2+0x30c>
 800bef2:	f1ba 0f02 	cmp.w	sl, #2
 800bef6:	f000 80c1 	beq.w	800c07c <__kernel_rem_pio2+0x34c>
 800befa:	9b02      	ldr	r3, [sp, #8]
 800befc:	2b02      	cmp	r3, #2
 800befe:	d14e      	bne.n	800bf9e <__kernel_rem_pio2+0x26e>
 800bf00:	4632      	mov	r2, r6
 800bf02:	463b      	mov	r3, r7
 800bf04:	4958      	ldr	r1, [pc, #352]	; (800c068 <__kernel_rem_pio2+0x338>)
 800bf06:	2000      	movs	r0, #0
 800bf08:	f7f4 f966 	bl	80001d8 <__aeabi_dsub>
 800bf0c:	4606      	mov	r6, r0
 800bf0e:	460f      	mov	r7, r1
 800bf10:	2d00      	cmp	r5, #0
 800bf12:	d044      	beq.n	800bf9e <__kernel_rem_pio2+0x26e>
 800bf14:	4650      	mov	r0, sl
 800bf16:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800c058 <__kernel_rem_pio2+0x328>
 800bf1a:	f000 fb91 	bl	800c640 <scalbn>
 800bf1e:	4630      	mov	r0, r6
 800bf20:	4639      	mov	r1, r7
 800bf22:	ec53 2b10 	vmov	r2, r3, d0
 800bf26:	f7f4 f957 	bl	80001d8 <__aeabi_dsub>
 800bf2a:	4606      	mov	r6, r0
 800bf2c:	460f      	mov	r7, r1
 800bf2e:	e036      	b.n	800bf9e <__kernel_rem_pio2+0x26e>
 800bf30:	4b4e      	ldr	r3, [pc, #312]	; (800c06c <__kernel_rem_pio2+0x33c>)
 800bf32:	2200      	movs	r2, #0
 800bf34:	4630      	mov	r0, r6
 800bf36:	4639      	mov	r1, r7
 800bf38:	f7f4 fb06 	bl	8000548 <__aeabi_dmul>
 800bf3c:	f7f4 fd9e 	bl	8000a7c <__aeabi_d2iz>
 800bf40:	f7f4 fa98 	bl	8000474 <__aeabi_i2d>
 800bf44:	4b4a      	ldr	r3, [pc, #296]	; (800c070 <__kernel_rem_pio2+0x340>)
 800bf46:	2200      	movs	r2, #0
 800bf48:	4680      	mov	r8, r0
 800bf4a:	4689      	mov	r9, r1
 800bf4c:	f7f4 fafc 	bl	8000548 <__aeabi_dmul>
 800bf50:	4602      	mov	r2, r0
 800bf52:	460b      	mov	r3, r1
 800bf54:	4630      	mov	r0, r6
 800bf56:	4639      	mov	r1, r7
 800bf58:	f7f4 f93e 	bl	80001d8 <__aeabi_dsub>
 800bf5c:	f7f4 fd8e 	bl	8000a7c <__aeabi_d2iz>
 800bf60:	9b02      	ldr	r3, [sp, #8]
 800bf62:	f843 0b04 	str.w	r0, [r3], #4
 800bf66:	3d01      	subs	r5, #1
 800bf68:	9302      	str	r3, [sp, #8]
 800bf6a:	ab70      	add	r3, sp, #448	; 0x1c0
 800bf6c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bf70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf74:	4640      	mov	r0, r8
 800bf76:	4649      	mov	r1, r9
 800bf78:	f7f4 f930 	bl	80001dc <__adddf3>
 800bf7c:	4606      	mov	r6, r0
 800bf7e:	460f      	mov	r7, r1
 800bf80:	e75b      	b.n	800be3a <__kernel_rem_pio2+0x10a>
 800bf82:	d105      	bne.n	800bf90 <__kernel_rem_pio2+0x260>
 800bf84:	1e63      	subs	r3, r4, #1
 800bf86:	aa0c      	add	r2, sp, #48	; 0x30
 800bf88:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800bf8c:	15c3      	asrs	r3, r0, #23
 800bf8e:	e79b      	b.n	800bec8 <__kernel_rem_pio2+0x198>
 800bf90:	4b38      	ldr	r3, [pc, #224]	; (800c074 <__kernel_rem_pio2+0x344>)
 800bf92:	2200      	movs	r2, #0
 800bf94:	f7f4 fd5e 	bl	8000a54 <__aeabi_dcmpge>
 800bf98:	2800      	cmp	r0, #0
 800bf9a:	d139      	bne.n	800c010 <__kernel_rem_pio2+0x2e0>
 800bf9c:	9002      	str	r0, [sp, #8]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	4630      	mov	r0, r6
 800bfa4:	4639      	mov	r1, r7
 800bfa6:	f7f4 fd37 	bl	8000a18 <__aeabi_dcmpeq>
 800bfaa:	2800      	cmp	r0, #0
 800bfac:	f000 80b4 	beq.w	800c118 <__kernel_rem_pio2+0x3e8>
 800bfb0:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800bfb4:	465b      	mov	r3, fp
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	9904      	ldr	r1, [sp, #16]
 800bfba:	428b      	cmp	r3, r1
 800bfbc:	da65      	bge.n	800c08a <__kernel_rem_pio2+0x35a>
 800bfbe:	2a00      	cmp	r2, #0
 800bfc0:	d07b      	beq.n	800c0ba <__kernel_rem_pio2+0x38a>
 800bfc2:	ab0c      	add	r3, sp, #48	; 0x30
 800bfc4:	f1aa 0a18 	sub.w	sl, sl, #24
 800bfc8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	f000 80a0 	beq.w	800c112 <__kernel_rem_pio2+0x3e2>
 800bfd2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800c058 <__kernel_rem_pio2+0x328>
 800bfd6:	4650      	mov	r0, sl
 800bfd8:	f000 fb32 	bl	800c640 <scalbn>
 800bfdc:	4f23      	ldr	r7, [pc, #140]	; (800c06c <__kernel_rem_pio2+0x33c>)
 800bfde:	ec55 4b10 	vmov	r4, r5, d0
 800bfe2:	46d8      	mov	r8, fp
 800bfe4:	2600      	movs	r6, #0
 800bfe6:	f1b8 0f00 	cmp.w	r8, #0
 800bfea:	f280 80cf 	bge.w	800c18c <__kernel_rem_pio2+0x45c>
 800bfee:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800c050 <__kernel_rem_pio2+0x320>
 800bff2:	465f      	mov	r7, fp
 800bff4:	f04f 0800 	mov.w	r8, #0
 800bff8:	2f00      	cmp	r7, #0
 800bffa:	f2c0 80fd 	blt.w	800c1f8 <__kernel_rem_pio2+0x4c8>
 800bffe:	ab70      	add	r3, sp, #448	; 0x1c0
 800c000:	f8df a074 	ldr.w	sl, [pc, #116]	; 800c078 <__kernel_rem_pio2+0x348>
 800c004:	ec55 4b18 	vmov	r4, r5, d8
 800c008:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800c00c:	2600      	movs	r6, #0
 800c00e:	e0e5      	b.n	800c1dc <__kernel_rem_pio2+0x4ac>
 800c010:	2302      	movs	r3, #2
 800c012:	9302      	str	r3, [sp, #8]
 800c014:	e75c      	b.n	800bed0 <__kernel_rem_pio2+0x1a0>
 800c016:	f8db 3000 	ldr.w	r3, [fp]
 800c01a:	b955      	cbnz	r5, 800c032 <__kernel_rem_pio2+0x302>
 800c01c:	b123      	cbz	r3, 800c028 <__kernel_rem_pio2+0x2f8>
 800c01e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c022:	f8cb 3000 	str.w	r3, [fp]
 800c026:	2301      	movs	r3, #1
 800c028:	3201      	adds	r2, #1
 800c02a:	f10b 0b04 	add.w	fp, fp, #4
 800c02e:	461d      	mov	r5, r3
 800c030:	e755      	b.n	800bede <__kernel_rem_pio2+0x1ae>
 800c032:	1acb      	subs	r3, r1, r3
 800c034:	f8cb 3000 	str.w	r3, [fp]
 800c038:	462b      	mov	r3, r5
 800c03a:	e7f5      	b.n	800c028 <__kernel_rem_pio2+0x2f8>
 800c03c:	1e62      	subs	r2, r4, #1
 800c03e:	ab0c      	add	r3, sp, #48	; 0x30
 800c040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c044:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c048:	a90c      	add	r1, sp, #48	; 0x30
 800c04a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c04e:	e754      	b.n	800befa <__kernel_rem_pio2+0x1ca>
	...
 800c05c:	3ff00000 	.word	0x3ff00000
 800c060:	0800caa8 	.word	0x0800caa8
 800c064:	40200000 	.word	0x40200000
 800c068:	3ff00000 	.word	0x3ff00000
 800c06c:	3e700000 	.word	0x3e700000
 800c070:	41700000 	.word	0x41700000
 800c074:	3fe00000 	.word	0x3fe00000
 800c078:	0800ca68 	.word	0x0800ca68
 800c07c:	1e62      	subs	r2, r4, #1
 800c07e:	ab0c      	add	r3, sp, #48	; 0x30
 800c080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c084:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c088:	e7de      	b.n	800c048 <__kernel_rem_pio2+0x318>
 800c08a:	a90c      	add	r1, sp, #48	; 0x30
 800c08c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c090:	3b01      	subs	r3, #1
 800c092:	430a      	orrs	r2, r1
 800c094:	e790      	b.n	800bfb8 <__kernel_rem_pio2+0x288>
 800c096:	3301      	adds	r3, #1
 800c098:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c09c:	2900      	cmp	r1, #0
 800c09e:	d0fa      	beq.n	800c096 <__kernel_rem_pio2+0x366>
 800c0a0:	9a08      	ldr	r2, [sp, #32]
 800c0a2:	18e3      	adds	r3, r4, r3
 800c0a4:	18a6      	adds	r6, r4, r2
 800c0a6:	aa20      	add	r2, sp, #128	; 0x80
 800c0a8:	1c65      	adds	r5, r4, #1
 800c0aa:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800c0ae:	9302      	str	r3, [sp, #8]
 800c0b0:	9b02      	ldr	r3, [sp, #8]
 800c0b2:	42ab      	cmp	r3, r5
 800c0b4:	da04      	bge.n	800c0c0 <__kernel_rem_pio2+0x390>
 800c0b6:	461c      	mov	r4, r3
 800c0b8:	e6b5      	b.n	800be26 <__kernel_rem_pio2+0xf6>
 800c0ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c0bc:	2301      	movs	r3, #1
 800c0be:	e7eb      	b.n	800c098 <__kernel_rem_pio2+0x368>
 800c0c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c0c6:	f7f4 f9d5 	bl	8000474 <__aeabi_i2d>
 800c0ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c0ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0d0:	46b3      	mov	fp, r6
 800c0d2:	461c      	mov	r4, r3
 800c0d4:	2700      	movs	r7, #0
 800c0d6:	f04f 0800 	mov.w	r8, #0
 800c0da:	f04f 0900 	mov.w	r9, #0
 800c0de:	9b06      	ldr	r3, [sp, #24]
 800c0e0:	429f      	cmp	r7, r3
 800c0e2:	dd06      	ble.n	800c0f2 <__kernel_rem_pio2+0x3c2>
 800c0e4:	ab70      	add	r3, sp, #448	; 0x1c0
 800c0e6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c0ea:	e9c3 8900 	strd	r8, r9, [r3]
 800c0ee:	3501      	adds	r5, #1
 800c0f0:	e7de      	b.n	800c0b0 <__kernel_rem_pio2+0x380>
 800c0f2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c0f6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c0fa:	f7f4 fa25 	bl	8000548 <__aeabi_dmul>
 800c0fe:	4602      	mov	r2, r0
 800c100:	460b      	mov	r3, r1
 800c102:	4640      	mov	r0, r8
 800c104:	4649      	mov	r1, r9
 800c106:	f7f4 f869 	bl	80001dc <__adddf3>
 800c10a:	3701      	adds	r7, #1
 800c10c:	4680      	mov	r8, r0
 800c10e:	4689      	mov	r9, r1
 800c110:	e7e5      	b.n	800c0de <__kernel_rem_pio2+0x3ae>
 800c112:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c116:	e754      	b.n	800bfc2 <__kernel_rem_pio2+0x292>
 800c118:	ec47 6b10 	vmov	d0, r6, r7
 800c11c:	f1ca 0000 	rsb	r0, sl, #0
 800c120:	f000 fa8e 	bl	800c640 <scalbn>
 800c124:	ec57 6b10 	vmov	r6, r7, d0
 800c128:	4b9f      	ldr	r3, [pc, #636]	; (800c3a8 <__kernel_rem_pio2+0x678>)
 800c12a:	ee10 0a10 	vmov	r0, s0
 800c12e:	2200      	movs	r2, #0
 800c130:	4639      	mov	r1, r7
 800c132:	f7f4 fc8f 	bl	8000a54 <__aeabi_dcmpge>
 800c136:	b300      	cbz	r0, 800c17a <__kernel_rem_pio2+0x44a>
 800c138:	4b9c      	ldr	r3, [pc, #624]	; (800c3ac <__kernel_rem_pio2+0x67c>)
 800c13a:	2200      	movs	r2, #0
 800c13c:	4630      	mov	r0, r6
 800c13e:	4639      	mov	r1, r7
 800c140:	f7f4 fa02 	bl	8000548 <__aeabi_dmul>
 800c144:	f7f4 fc9a 	bl	8000a7c <__aeabi_d2iz>
 800c148:	4605      	mov	r5, r0
 800c14a:	f7f4 f993 	bl	8000474 <__aeabi_i2d>
 800c14e:	4b96      	ldr	r3, [pc, #600]	; (800c3a8 <__kernel_rem_pio2+0x678>)
 800c150:	2200      	movs	r2, #0
 800c152:	f7f4 f9f9 	bl	8000548 <__aeabi_dmul>
 800c156:	460b      	mov	r3, r1
 800c158:	4602      	mov	r2, r0
 800c15a:	4639      	mov	r1, r7
 800c15c:	4630      	mov	r0, r6
 800c15e:	f7f4 f83b 	bl	80001d8 <__aeabi_dsub>
 800c162:	f7f4 fc8b 	bl	8000a7c <__aeabi_d2iz>
 800c166:	f104 0b01 	add.w	fp, r4, #1
 800c16a:	ab0c      	add	r3, sp, #48	; 0x30
 800c16c:	f10a 0a18 	add.w	sl, sl, #24
 800c170:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c174:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800c178:	e72b      	b.n	800bfd2 <__kernel_rem_pio2+0x2a2>
 800c17a:	4630      	mov	r0, r6
 800c17c:	4639      	mov	r1, r7
 800c17e:	f7f4 fc7d 	bl	8000a7c <__aeabi_d2iz>
 800c182:	ab0c      	add	r3, sp, #48	; 0x30
 800c184:	46a3      	mov	fp, r4
 800c186:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c18a:	e722      	b.n	800bfd2 <__kernel_rem_pio2+0x2a2>
 800c18c:	ab70      	add	r3, sp, #448	; 0x1c0
 800c18e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800c192:	ab0c      	add	r3, sp, #48	; 0x30
 800c194:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c198:	f7f4 f96c 	bl	8000474 <__aeabi_i2d>
 800c19c:	4622      	mov	r2, r4
 800c19e:	462b      	mov	r3, r5
 800c1a0:	f7f4 f9d2 	bl	8000548 <__aeabi_dmul>
 800c1a4:	4632      	mov	r2, r6
 800c1a6:	e9c9 0100 	strd	r0, r1, [r9]
 800c1aa:	463b      	mov	r3, r7
 800c1ac:	4620      	mov	r0, r4
 800c1ae:	4629      	mov	r1, r5
 800c1b0:	f7f4 f9ca 	bl	8000548 <__aeabi_dmul>
 800c1b4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c1b8:	4604      	mov	r4, r0
 800c1ba:	460d      	mov	r5, r1
 800c1bc:	e713      	b.n	800bfe6 <__kernel_rem_pio2+0x2b6>
 800c1be:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c1c2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800c1c6:	f7f4 f9bf 	bl	8000548 <__aeabi_dmul>
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	460b      	mov	r3, r1
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	4629      	mov	r1, r5
 800c1d2:	f7f4 f803 	bl	80001dc <__adddf3>
 800c1d6:	3601      	adds	r6, #1
 800c1d8:	4604      	mov	r4, r0
 800c1da:	460d      	mov	r5, r1
 800c1dc:	9b04      	ldr	r3, [sp, #16]
 800c1de:	429e      	cmp	r6, r3
 800c1e0:	dc01      	bgt.n	800c1e6 <__kernel_rem_pio2+0x4b6>
 800c1e2:	45b0      	cmp	r8, r6
 800c1e4:	daeb      	bge.n	800c1be <__kernel_rem_pio2+0x48e>
 800c1e6:	ab48      	add	r3, sp, #288	; 0x120
 800c1e8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c1ec:	e9c3 4500 	strd	r4, r5, [r3]
 800c1f0:	3f01      	subs	r7, #1
 800c1f2:	f108 0801 	add.w	r8, r8, #1
 800c1f6:	e6ff      	b.n	800bff8 <__kernel_rem_pio2+0x2c8>
 800c1f8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c1fa:	2b02      	cmp	r3, #2
 800c1fc:	dc0b      	bgt.n	800c216 <__kernel_rem_pio2+0x4e6>
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	dc6e      	bgt.n	800c2e0 <__kernel_rem_pio2+0x5b0>
 800c202:	d045      	beq.n	800c290 <__kernel_rem_pio2+0x560>
 800c204:	9b07      	ldr	r3, [sp, #28]
 800c206:	f003 0007 	and.w	r0, r3, #7
 800c20a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c20e:	ecbd 8b02 	vpop	{d8}
 800c212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c216:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c218:	2b03      	cmp	r3, #3
 800c21a:	d1f3      	bne.n	800c204 <__kernel_rem_pio2+0x4d4>
 800c21c:	ab48      	add	r3, sp, #288	; 0x120
 800c21e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800c222:	46d0      	mov	r8, sl
 800c224:	46d9      	mov	r9, fp
 800c226:	f1b9 0f00 	cmp.w	r9, #0
 800c22a:	f1a8 0808 	sub.w	r8, r8, #8
 800c22e:	dc64      	bgt.n	800c2fa <__kernel_rem_pio2+0x5ca>
 800c230:	465c      	mov	r4, fp
 800c232:	2c01      	cmp	r4, #1
 800c234:	f1aa 0a08 	sub.w	sl, sl, #8
 800c238:	dc7e      	bgt.n	800c338 <__kernel_rem_pio2+0x608>
 800c23a:	2000      	movs	r0, #0
 800c23c:	2100      	movs	r1, #0
 800c23e:	f1bb 0f01 	cmp.w	fp, #1
 800c242:	f300 8097 	bgt.w	800c374 <__kernel_rem_pio2+0x644>
 800c246:	9b02      	ldr	r3, [sp, #8]
 800c248:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800c24c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800c250:	2b00      	cmp	r3, #0
 800c252:	f040 8099 	bne.w	800c388 <__kernel_rem_pio2+0x658>
 800c256:	9b01      	ldr	r3, [sp, #4]
 800c258:	e9c3 5600 	strd	r5, r6, [r3]
 800c25c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800c260:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c264:	e7ce      	b.n	800c204 <__kernel_rem_pio2+0x4d4>
 800c266:	ab48      	add	r3, sp, #288	; 0x120
 800c268:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c270:	f7f3 ffb4 	bl	80001dc <__adddf3>
 800c274:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c278:	f1bb 0f00 	cmp.w	fp, #0
 800c27c:	daf3      	bge.n	800c266 <__kernel_rem_pio2+0x536>
 800c27e:	9b02      	ldr	r3, [sp, #8]
 800c280:	b113      	cbz	r3, 800c288 <__kernel_rem_pio2+0x558>
 800c282:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c286:	4619      	mov	r1, r3
 800c288:	9b01      	ldr	r3, [sp, #4]
 800c28a:	e9c3 0100 	strd	r0, r1, [r3]
 800c28e:	e7b9      	b.n	800c204 <__kernel_rem_pio2+0x4d4>
 800c290:	2000      	movs	r0, #0
 800c292:	2100      	movs	r1, #0
 800c294:	e7f0      	b.n	800c278 <__kernel_rem_pio2+0x548>
 800c296:	ab48      	add	r3, sp, #288	; 0x120
 800c298:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a0:	f7f3 ff9c 	bl	80001dc <__adddf3>
 800c2a4:	3c01      	subs	r4, #1
 800c2a6:	2c00      	cmp	r4, #0
 800c2a8:	daf5      	bge.n	800c296 <__kernel_rem_pio2+0x566>
 800c2aa:	9b02      	ldr	r3, [sp, #8]
 800c2ac:	b1e3      	cbz	r3, 800c2e8 <__kernel_rem_pio2+0x5b8>
 800c2ae:	4602      	mov	r2, r0
 800c2b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c2b4:	9c01      	ldr	r4, [sp, #4]
 800c2b6:	e9c4 2300 	strd	r2, r3, [r4]
 800c2ba:	4602      	mov	r2, r0
 800c2bc:	460b      	mov	r3, r1
 800c2be:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800c2c2:	f7f3 ff89 	bl	80001d8 <__aeabi_dsub>
 800c2c6:	ad4a      	add	r5, sp, #296	; 0x128
 800c2c8:	2401      	movs	r4, #1
 800c2ca:	45a3      	cmp	fp, r4
 800c2cc:	da0f      	bge.n	800c2ee <__kernel_rem_pio2+0x5be>
 800c2ce:	9b02      	ldr	r3, [sp, #8]
 800c2d0:	b113      	cbz	r3, 800c2d8 <__kernel_rem_pio2+0x5a8>
 800c2d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	9b01      	ldr	r3, [sp, #4]
 800c2da:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c2de:	e791      	b.n	800c204 <__kernel_rem_pio2+0x4d4>
 800c2e0:	465c      	mov	r4, fp
 800c2e2:	2000      	movs	r0, #0
 800c2e4:	2100      	movs	r1, #0
 800c2e6:	e7de      	b.n	800c2a6 <__kernel_rem_pio2+0x576>
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	460b      	mov	r3, r1
 800c2ec:	e7e2      	b.n	800c2b4 <__kernel_rem_pio2+0x584>
 800c2ee:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800c2f2:	f7f3 ff73 	bl	80001dc <__adddf3>
 800c2f6:	3401      	adds	r4, #1
 800c2f8:	e7e7      	b.n	800c2ca <__kernel_rem_pio2+0x59a>
 800c2fa:	e9d8 4500 	ldrd	r4, r5, [r8]
 800c2fe:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800c302:	4620      	mov	r0, r4
 800c304:	4632      	mov	r2, r6
 800c306:	463b      	mov	r3, r7
 800c308:	4629      	mov	r1, r5
 800c30a:	f7f3 ff67 	bl	80001dc <__adddf3>
 800c30e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c312:	4602      	mov	r2, r0
 800c314:	460b      	mov	r3, r1
 800c316:	4620      	mov	r0, r4
 800c318:	4629      	mov	r1, r5
 800c31a:	f7f3 ff5d 	bl	80001d8 <__aeabi_dsub>
 800c31e:	4632      	mov	r2, r6
 800c320:	463b      	mov	r3, r7
 800c322:	f7f3 ff5b 	bl	80001dc <__adddf3>
 800c326:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c32a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800c32e:	ed88 7b00 	vstr	d7, [r8]
 800c332:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800c336:	e776      	b.n	800c226 <__kernel_rem_pio2+0x4f6>
 800c338:	e9da 8900 	ldrd	r8, r9, [sl]
 800c33c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c340:	4640      	mov	r0, r8
 800c342:	4632      	mov	r2, r6
 800c344:	463b      	mov	r3, r7
 800c346:	4649      	mov	r1, r9
 800c348:	f7f3 ff48 	bl	80001dc <__adddf3>
 800c34c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c350:	4602      	mov	r2, r0
 800c352:	460b      	mov	r3, r1
 800c354:	4640      	mov	r0, r8
 800c356:	4649      	mov	r1, r9
 800c358:	f7f3 ff3e 	bl	80001d8 <__aeabi_dsub>
 800c35c:	4632      	mov	r2, r6
 800c35e:	463b      	mov	r3, r7
 800c360:	f7f3 ff3c 	bl	80001dc <__adddf3>
 800c364:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c368:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c36c:	ed8a 7b00 	vstr	d7, [sl]
 800c370:	3c01      	subs	r4, #1
 800c372:	e75e      	b.n	800c232 <__kernel_rem_pio2+0x502>
 800c374:	ab48      	add	r3, sp, #288	; 0x120
 800c376:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37e:	f7f3 ff2d 	bl	80001dc <__adddf3>
 800c382:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c386:	e75a      	b.n	800c23e <__kernel_rem_pio2+0x50e>
 800c388:	9b01      	ldr	r3, [sp, #4]
 800c38a:	9a01      	ldr	r2, [sp, #4]
 800c38c:	601d      	str	r5, [r3, #0]
 800c38e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800c392:	605c      	str	r4, [r3, #4]
 800c394:	609f      	str	r7, [r3, #8]
 800c396:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800c39a:	60d3      	str	r3, [r2, #12]
 800c39c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c3a0:	6110      	str	r0, [r2, #16]
 800c3a2:	6153      	str	r3, [r2, #20]
 800c3a4:	e72e      	b.n	800c204 <__kernel_rem_pio2+0x4d4>
 800c3a6:	bf00      	nop
 800c3a8:	41700000 	.word	0x41700000
 800c3ac:	3e700000 	.word	0x3e700000

0800c3b0 <__kernel_sin>:
 800c3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3b4:	ed2d 8b04 	vpush	{d8-d9}
 800c3b8:	eeb0 8a41 	vmov.f32	s16, s2
 800c3bc:	eef0 8a61 	vmov.f32	s17, s3
 800c3c0:	ec55 4b10 	vmov	r4, r5, d0
 800c3c4:	b083      	sub	sp, #12
 800c3c6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c3ca:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c3ce:	9001      	str	r0, [sp, #4]
 800c3d0:	da06      	bge.n	800c3e0 <__kernel_sin+0x30>
 800c3d2:	ee10 0a10 	vmov	r0, s0
 800c3d6:	4629      	mov	r1, r5
 800c3d8:	f7f4 fb50 	bl	8000a7c <__aeabi_d2iz>
 800c3dc:	2800      	cmp	r0, #0
 800c3de:	d051      	beq.n	800c484 <__kernel_sin+0xd4>
 800c3e0:	4622      	mov	r2, r4
 800c3e2:	462b      	mov	r3, r5
 800c3e4:	4620      	mov	r0, r4
 800c3e6:	4629      	mov	r1, r5
 800c3e8:	f7f4 f8ae 	bl	8000548 <__aeabi_dmul>
 800c3ec:	4682      	mov	sl, r0
 800c3ee:	468b      	mov	fp, r1
 800c3f0:	4602      	mov	r2, r0
 800c3f2:	460b      	mov	r3, r1
 800c3f4:	4620      	mov	r0, r4
 800c3f6:	4629      	mov	r1, r5
 800c3f8:	f7f4 f8a6 	bl	8000548 <__aeabi_dmul>
 800c3fc:	a341      	add	r3, pc, #260	; (adr r3, 800c504 <__kernel_sin+0x154>)
 800c3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c402:	4680      	mov	r8, r0
 800c404:	4689      	mov	r9, r1
 800c406:	4650      	mov	r0, sl
 800c408:	4659      	mov	r1, fp
 800c40a:	f7f4 f89d 	bl	8000548 <__aeabi_dmul>
 800c40e:	a33f      	add	r3, pc, #252	; (adr r3, 800c50c <__kernel_sin+0x15c>)
 800c410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c414:	f7f3 fee0 	bl	80001d8 <__aeabi_dsub>
 800c418:	4652      	mov	r2, sl
 800c41a:	465b      	mov	r3, fp
 800c41c:	f7f4 f894 	bl	8000548 <__aeabi_dmul>
 800c420:	a33c      	add	r3, pc, #240	; (adr r3, 800c514 <__kernel_sin+0x164>)
 800c422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c426:	f7f3 fed9 	bl	80001dc <__adddf3>
 800c42a:	4652      	mov	r2, sl
 800c42c:	465b      	mov	r3, fp
 800c42e:	f7f4 f88b 	bl	8000548 <__aeabi_dmul>
 800c432:	a33a      	add	r3, pc, #232	; (adr r3, 800c51c <__kernel_sin+0x16c>)
 800c434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c438:	f7f3 fece 	bl	80001d8 <__aeabi_dsub>
 800c43c:	4652      	mov	r2, sl
 800c43e:	465b      	mov	r3, fp
 800c440:	f7f4 f882 	bl	8000548 <__aeabi_dmul>
 800c444:	a337      	add	r3, pc, #220	; (adr r3, 800c524 <__kernel_sin+0x174>)
 800c446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c44a:	f7f3 fec7 	bl	80001dc <__adddf3>
 800c44e:	9b01      	ldr	r3, [sp, #4]
 800c450:	4606      	mov	r6, r0
 800c452:	460f      	mov	r7, r1
 800c454:	b9eb      	cbnz	r3, 800c492 <__kernel_sin+0xe2>
 800c456:	4602      	mov	r2, r0
 800c458:	460b      	mov	r3, r1
 800c45a:	4650      	mov	r0, sl
 800c45c:	4659      	mov	r1, fp
 800c45e:	f7f4 f873 	bl	8000548 <__aeabi_dmul>
 800c462:	a325      	add	r3, pc, #148	; (adr r3, 800c4f8 <__kernel_sin+0x148>)
 800c464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c468:	f7f3 feb6 	bl	80001d8 <__aeabi_dsub>
 800c46c:	4642      	mov	r2, r8
 800c46e:	464b      	mov	r3, r9
 800c470:	f7f4 f86a 	bl	8000548 <__aeabi_dmul>
 800c474:	4602      	mov	r2, r0
 800c476:	460b      	mov	r3, r1
 800c478:	4620      	mov	r0, r4
 800c47a:	4629      	mov	r1, r5
 800c47c:	f7f3 feae 	bl	80001dc <__adddf3>
 800c480:	4604      	mov	r4, r0
 800c482:	460d      	mov	r5, r1
 800c484:	ec45 4b10 	vmov	d0, r4, r5
 800c488:	b003      	add	sp, #12
 800c48a:	ecbd 8b04 	vpop	{d8-d9}
 800c48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c492:	4b1b      	ldr	r3, [pc, #108]	; (800c500 <__kernel_sin+0x150>)
 800c494:	ec51 0b18 	vmov	r0, r1, d8
 800c498:	2200      	movs	r2, #0
 800c49a:	f7f4 f855 	bl	8000548 <__aeabi_dmul>
 800c49e:	4632      	mov	r2, r6
 800c4a0:	ec41 0b19 	vmov	d9, r0, r1
 800c4a4:	463b      	mov	r3, r7
 800c4a6:	4640      	mov	r0, r8
 800c4a8:	4649      	mov	r1, r9
 800c4aa:	f7f4 f84d 	bl	8000548 <__aeabi_dmul>
 800c4ae:	4602      	mov	r2, r0
 800c4b0:	460b      	mov	r3, r1
 800c4b2:	ec51 0b19 	vmov	r0, r1, d9
 800c4b6:	f7f3 fe8f 	bl	80001d8 <__aeabi_dsub>
 800c4ba:	4652      	mov	r2, sl
 800c4bc:	465b      	mov	r3, fp
 800c4be:	f7f4 f843 	bl	8000548 <__aeabi_dmul>
 800c4c2:	ec53 2b18 	vmov	r2, r3, d8
 800c4c6:	f7f3 fe87 	bl	80001d8 <__aeabi_dsub>
 800c4ca:	a30b      	add	r3, pc, #44	; (adr r3, 800c4f8 <__kernel_sin+0x148>)
 800c4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d0:	4606      	mov	r6, r0
 800c4d2:	460f      	mov	r7, r1
 800c4d4:	4640      	mov	r0, r8
 800c4d6:	4649      	mov	r1, r9
 800c4d8:	f7f4 f836 	bl	8000548 <__aeabi_dmul>
 800c4dc:	4602      	mov	r2, r0
 800c4de:	460b      	mov	r3, r1
 800c4e0:	4630      	mov	r0, r6
 800c4e2:	4639      	mov	r1, r7
 800c4e4:	f7f3 fe7a 	bl	80001dc <__adddf3>
 800c4e8:	4602      	mov	r2, r0
 800c4ea:	460b      	mov	r3, r1
 800c4ec:	4620      	mov	r0, r4
 800c4ee:	4629      	mov	r1, r5
 800c4f0:	f7f3 fe72 	bl	80001d8 <__aeabi_dsub>
 800c4f4:	e7c4      	b.n	800c480 <__kernel_sin+0xd0>
 800c4f6:	bf00      	nop
 800c4f8:	55555549 	.word	0x55555549
 800c4fc:	3fc55555 	.word	0x3fc55555
 800c500:	3fe00000 	.word	0x3fe00000
 800c504:	5acfd57c 	.word	0x5acfd57c
 800c508:	3de5d93a 	.word	0x3de5d93a
 800c50c:	8a2b9ceb 	.word	0x8a2b9ceb
 800c510:	3e5ae5e6 	.word	0x3e5ae5e6
 800c514:	57b1fe7d 	.word	0x57b1fe7d
 800c518:	3ec71de3 	.word	0x3ec71de3
 800c51c:	19c161d5 	.word	0x19c161d5
 800c520:	3f2a01a0 	.word	0x3f2a01a0
 800c524:	1110f8a6 	.word	0x1110f8a6
 800c528:	3f811111 	.word	0x3f811111

0800c52c <fabs>:
 800c52c:	ec51 0b10 	vmov	r0, r1, d0
 800c530:	ee10 2a10 	vmov	r2, s0
 800c534:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c538:	ec43 2b10 	vmov	d0, r2, r3
 800c53c:	4770      	bx	lr
	...

0800c540 <floor>:
 800c540:	ec51 0b10 	vmov	r0, r1, d0
 800c544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c548:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c54c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c550:	2e13      	cmp	r6, #19
 800c552:	ee10 5a10 	vmov	r5, s0
 800c556:	ee10 8a10 	vmov	r8, s0
 800c55a:	460c      	mov	r4, r1
 800c55c:	dc32      	bgt.n	800c5c4 <floor+0x84>
 800c55e:	2e00      	cmp	r6, #0
 800c560:	da14      	bge.n	800c58c <floor+0x4c>
 800c562:	a333      	add	r3, pc, #204	; (adr r3, 800c630 <floor+0xf0>)
 800c564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c568:	f7f3 fe38 	bl	80001dc <__adddf3>
 800c56c:	2200      	movs	r2, #0
 800c56e:	2300      	movs	r3, #0
 800c570:	f7f4 fa7a 	bl	8000a68 <__aeabi_dcmpgt>
 800c574:	b138      	cbz	r0, 800c586 <floor+0x46>
 800c576:	2c00      	cmp	r4, #0
 800c578:	da57      	bge.n	800c62a <floor+0xea>
 800c57a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c57e:	431d      	orrs	r5, r3
 800c580:	d001      	beq.n	800c586 <floor+0x46>
 800c582:	4c2d      	ldr	r4, [pc, #180]	; (800c638 <floor+0xf8>)
 800c584:	2500      	movs	r5, #0
 800c586:	4621      	mov	r1, r4
 800c588:	4628      	mov	r0, r5
 800c58a:	e025      	b.n	800c5d8 <floor+0x98>
 800c58c:	4f2b      	ldr	r7, [pc, #172]	; (800c63c <floor+0xfc>)
 800c58e:	4137      	asrs	r7, r6
 800c590:	ea01 0307 	and.w	r3, r1, r7
 800c594:	4303      	orrs	r3, r0
 800c596:	d01f      	beq.n	800c5d8 <floor+0x98>
 800c598:	a325      	add	r3, pc, #148	; (adr r3, 800c630 <floor+0xf0>)
 800c59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c59e:	f7f3 fe1d 	bl	80001dc <__adddf3>
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	f7f4 fa5f 	bl	8000a68 <__aeabi_dcmpgt>
 800c5aa:	2800      	cmp	r0, #0
 800c5ac:	d0eb      	beq.n	800c586 <floor+0x46>
 800c5ae:	2c00      	cmp	r4, #0
 800c5b0:	bfbe      	ittt	lt
 800c5b2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c5b6:	fa43 f606 	asrlt.w	r6, r3, r6
 800c5ba:	19a4      	addlt	r4, r4, r6
 800c5bc:	ea24 0407 	bic.w	r4, r4, r7
 800c5c0:	2500      	movs	r5, #0
 800c5c2:	e7e0      	b.n	800c586 <floor+0x46>
 800c5c4:	2e33      	cmp	r6, #51	; 0x33
 800c5c6:	dd0b      	ble.n	800c5e0 <floor+0xa0>
 800c5c8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c5cc:	d104      	bne.n	800c5d8 <floor+0x98>
 800c5ce:	ee10 2a10 	vmov	r2, s0
 800c5d2:	460b      	mov	r3, r1
 800c5d4:	f7f3 fe02 	bl	80001dc <__adddf3>
 800c5d8:	ec41 0b10 	vmov	d0, r0, r1
 800c5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5e0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c5e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c5e8:	fa23 f707 	lsr.w	r7, r3, r7
 800c5ec:	4207      	tst	r7, r0
 800c5ee:	d0f3      	beq.n	800c5d8 <floor+0x98>
 800c5f0:	a30f      	add	r3, pc, #60	; (adr r3, 800c630 <floor+0xf0>)
 800c5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f6:	f7f3 fdf1 	bl	80001dc <__adddf3>
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	f7f4 fa33 	bl	8000a68 <__aeabi_dcmpgt>
 800c602:	2800      	cmp	r0, #0
 800c604:	d0bf      	beq.n	800c586 <floor+0x46>
 800c606:	2c00      	cmp	r4, #0
 800c608:	da02      	bge.n	800c610 <floor+0xd0>
 800c60a:	2e14      	cmp	r6, #20
 800c60c:	d103      	bne.n	800c616 <floor+0xd6>
 800c60e:	3401      	adds	r4, #1
 800c610:	ea25 0507 	bic.w	r5, r5, r7
 800c614:	e7b7      	b.n	800c586 <floor+0x46>
 800c616:	2301      	movs	r3, #1
 800c618:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c61c:	fa03 f606 	lsl.w	r6, r3, r6
 800c620:	4435      	add	r5, r6
 800c622:	4545      	cmp	r5, r8
 800c624:	bf38      	it	cc
 800c626:	18e4      	addcc	r4, r4, r3
 800c628:	e7f2      	b.n	800c610 <floor+0xd0>
 800c62a:	2500      	movs	r5, #0
 800c62c:	462c      	mov	r4, r5
 800c62e:	e7aa      	b.n	800c586 <floor+0x46>
 800c630:	8800759c 	.word	0x8800759c
 800c634:	7e37e43c 	.word	0x7e37e43c
 800c638:	bff00000 	.word	0xbff00000
 800c63c:	000fffff 	.word	0x000fffff

0800c640 <scalbn>:
 800c640:	b570      	push	{r4, r5, r6, lr}
 800c642:	ec55 4b10 	vmov	r4, r5, d0
 800c646:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c64a:	4606      	mov	r6, r0
 800c64c:	462b      	mov	r3, r5
 800c64e:	b99a      	cbnz	r2, 800c678 <scalbn+0x38>
 800c650:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c654:	4323      	orrs	r3, r4
 800c656:	d036      	beq.n	800c6c6 <scalbn+0x86>
 800c658:	4b39      	ldr	r3, [pc, #228]	; (800c740 <scalbn+0x100>)
 800c65a:	4629      	mov	r1, r5
 800c65c:	ee10 0a10 	vmov	r0, s0
 800c660:	2200      	movs	r2, #0
 800c662:	f7f3 ff71 	bl	8000548 <__aeabi_dmul>
 800c666:	4b37      	ldr	r3, [pc, #220]	; (800c744 <scalbn+0x104>)
 800c668:	429e      	cmp	r6, r3
 800c66a:	4604      	mov	r4, r0
 800c66c:	460d      	mov	r5, r1
 800c66e:	da10      	bge.n	800c692 <scalbn+0x52>
 800c670:	a32b      	add	r3, pc, #172	; (adr r3, 800c720 <scalbn+0xe0>)
 800c672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c676:	e03a      	b.n	800c6ee <scalbn+0xae>
 800c678:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c67c:	428a      	cmp	r2, r1
 800c67e:	d10c      	bne.n	800c69a <scalbn+0x5a>
 800c680:	ee10 2a10 	vmov	r2, s0
 800c684:	4620      	mov	r0, r4
 800c686:	4629      	mov	r1, r5
 800c688:	f7f3 fda8 	bl	80001dc <__adddf3>
 800c68c:	4604      	mov	r4, r0
 800c68e:	460d      	mov	r5, r1
 800c690:	e019      	b.n	800c6c6 <scalbn+0x86>
 800c692:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c696:	460b      	mov	r3, r1
 800c698:	3a36      	subs	r2, #54	; 0x36
 800c69a:	4432      	add	r2, r6
 800c69c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c6a0:	428a      	cmp	r2, r1
 800c6a2:	dd08      	ble.n	800c6b6 <scalbn+0x76>
 800c6a4:	2d00      	cmp	r5, #0
 800c6a6:	a120      	add	r1, pc, #128	; (adr r1, 800c728 <scalbn+0xe8>)
 800c6a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6ac:	da1c      	bge.n	800c6e8 <scalbn+0xa8>
 800c6ae:	a120      	add	r1, pc, #128	; (adr r1, 800c730 <scalbn+0xf0>)
 800c6b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6b4:	e018      	b.n	800c6e8 <scalbn+0xa8>
 800c6b6:	2a00      	cmp	r2, #0
 800c6b8:	dd08      	ble.n	800c6cc <scalbn+0x8c>
 800c6ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c6be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c6c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c6c6:	ec45 4b10 	vmov	d0, r4, r5
 800c6ca:	bd70      	pop	{r4, r5, r6, pc}
 800c6cc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c6d0:	da19      	bge.n	800c706 <scalbn+0xc6>
 800c6d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c6d6:	429e      	cmp	r6, r3
 800c6d8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c6dc:	dd0a      	ble.n	800c6f4 <scalbn+0xb4>
 800c6de:	a112      	add	r1, pc, #72	; (adr r1, 800c728 <scalbn+0xe8>)
 800c6e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d1e2      	bne.n	800c6ae <scalbn+0x6e>
 800c6e8:	a30f      	add	r3, pc, #60	; (adr r3, 800c728 <scalbn+0xe8>)
 800c6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ee:	f7f3 ff2b 	bl	8000548 <__aeabi_dmul>
 800c6f2:	e7cb      	b.n	800c68c <scalbn+0x4c>
 800c6f4:	a10a      	add	r1, pc, #40	; (adr r1, 800c720 <scalbn+0xe0>)
 800c6f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d0b8      	beq.n	800c670 <scalbn+0x30>
 800c6fe:	a10e      	add	r1, pc, #56	; (adr r1, 800c738 <scalbn+0xf8>)
 800c700:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c704:	e7b4      	b.n	800c670 <scalbn+0x30>
 800c706:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c70a:	3236      	adds	r2, #54	; 0x36
 800c70c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c710:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c714:	4620      	mov	r0, r4
 800c716:	4b0c      	ldr	r3, [pc, #48]	; (800c748 <scalbn+0x108>)
 800c718:	2200      	movs	r2, #0
 800c71a:	e7e8      	b.n	800c6ee <scalbn+0xae>
 800c71c:	f3af 8000 	nop.w
 800c720:	c2f8f359 	.word	0xc2f8f359
 800c724:	01a56e1f 	.word	0x01a56e1f
 800c728:	8800759c 	.word	0x8800759c
 800c72c:	7e37e43c 	.word	0x7e37e43c
 800c730:	8800759c 	.word	0x8800759c
 800c734:	fe37e43c 	.word	0xfe37e43c
 800c738:	c2f8f359 	.word	0xc2f8f359
 800c73c:	81a56e1f 	.word	0x81a56e1f
 800c740:	43500000 	.word	0x43500000
 800c744:	ffff3cb0 	.word	0xffff3cb0
 800c748:	3c900000 	.word	0x3c900000

0800c74c <_init>:
 800c74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c74e:	bf00      	nop
 800c750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c752:	bc08      	pop	{r3}
 800c754:	469e      	mov	lr, r3
 800c756:	4770      	bx	lr

0800c758 <_fini>:
 800c758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c75a:	bf00      	nop
 800c75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c75e:	bc08      	pop	{r3}
 800c760:	469e      	mov	lr, r3
 800c762:	4770      	bx	lr
